
ADC_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077c4  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08007a5c  08007a5c  00017a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a74  08007a74  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08007a74  08007a74  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007a74  08007a74  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a74  08007a74  00017a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a78  08007a78  00017a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08007a7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  24000010  08007a8c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400010c  08007a8c  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001900a  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002992  00000000  00000000  00039048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb8  00000000  00000000  0003b9e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd0  00000000  00000000  0003c698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003f0d7  00000000  00000000  0003d268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000104b8  00000000  00000000  0007c33f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019fde7  00000000  00000000  0008c7f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0022c5de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034ac  00000000  00000000  0022c634  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007a44 	.word	0x08007a44

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08007a44 	.word	0x08007a44

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3f      	ldr	r3, [pc, #252]	; (80003dc <SystemInit+0x104>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3e      	ldr	r2, [pc, #248]	; (80003dc <SystemInit+0x104>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b3b      	ldr	r3, [pc, #236]	; (80003dc <SystemInit+0x104>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a3a      	ldr	r2, [pc, #232]	; (80003dc <SystemInit+0x104>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b39      	ldr	r3, [pc, #228]	; (80003e0 <SystemInit+0x108>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b36      	ldr	r3, [pc, #216]	; (80003e0 <SystemInit+0x108>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a34      	ldr	r2, [pc, #208]	; (80003e0 <SystemInit+0x108>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b33      	ldr	r3, [pc, #204]	; (80003e4 <SystemInit+0x10c>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a32      	ldr	r2, [pc, #200]	; (80003e4 <SystemInit+0x10c>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b30      	ldr	r3, [pc, #192]	; (80003e4 <SystemInit+0x10c>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2f      	ldr	r3, [pc, #188]	; (80003e4 <SystemInit+0x10c>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492e      	ldr	r1, [pc, #184]	; (80003e4 <SystemInit+0x10c>)
 800032c:	4b2e      	ldr	r3, [pc, #184]	; (80003e8 <SystemInit+0x110>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b2b      	ldr	r3, [pc, #172]	; (80003e0 <SystemInit+0x108>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b28      	ldr	r3, [pc, #160]	; (80003e0 <SystemInit+0x108>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a26      	ldr	r2, [pc, #152]	; (80003e0 <SystemInit+0x108>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b25      	ldr	r3, [pc, #148]	; (80003e4 <SystemInit+0x10c>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b23      	ldr	r3, [pc, #140]	; (80003e4 <SystemInit+0x10c>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b22      	ldr	r3, [pc, #136]	; (80003e4 <SystemInit+0x10c>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b20      	ldr	r3, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000362:	4a22      	ldr	r2, [pc, #136]	; (80003ec <SystemInit+0x114>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1f      	ldr	r3, [pc, #124]	; (80003e4 <SystemInit+0x10c>)
 8000368:	4a21      	ldr	r2, [pc, #132]	; (80003f0 <SystemInit+0x118>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1d      	ldr	r3, [pc, #116]	; (80003e4 <SystemInit+0x10c>)
 800036e:	4a21      	ldr	r2, [pc, #132]	; (80003f4 <SystemInit+0x11c>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1c      	ldr	r3, [pc, #112]	; (80003e4 <SystemInit+0x10c>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b1a      	ldr	r3, [pc, #104]	; (80003e4 <SystemInit+0x10c>)
 800037a:	4a1e      	ldr	r2, [pc, #120]	; (80003f4 <SystemInit+0x11c>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b19      	ldr	r3, [pc, #100]	; (80003e4 <SystemInit+0x10c>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <SystemInit+0x10c>)
 8000386:	4a1b      	ldr	r2, [pc, #108]	; (80003f4 <SystemInit+0x11c>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b16      	ldr	r3, [pc, #88]	; (80003e4 <SystemInit+0x10c>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <SystemInit+0x10c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a13      	ldr	r2, [pc, #76]	; (80003e4 <SystemInit+0x10c>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <SystemInit+0x10c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <SystemInit+0x120>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a14      	ldr	r2, [pc, #80]	; (80003f8 <SystemInit+0x120>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b13      	ldr	r3, [pc, #76]	; (80003fc <SystemInit+0x124>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b13      	ldr	r3, [pc, #76]	; (8000400 <SystemInit+0x128>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b11      	ldr	r3, [pc, #68]	; (8000404 <SystemInit+0x12c>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <SystemInit+0x130>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80003ca:	4b04      	ldr	r3, [pc, #16]	; (80003dc <SystemInit+0x104>)
 80003cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003d0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80003d2:	bf00      	nop
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr
 80003dc:	e000ed00 	.word	0xe000ed00
 80003e0:	52002000 	.word	0x52002000
 80003e4:	58024400 	.word	0x58024400
 80003e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80003ec:	02020200 	.word	0x02020200
 80003f0:	01ff0000 	.word	0x01ff0000
 80003f4:	01010280 	.word	0x01010280
 80003f8:	580000c0 	.word	0x580000c0
 80003fc:	5c001000 	.word	0x5c001000
 8000400:	ffff0000 	.word	0xffff0000
 8000404:	51008108 	.word	0x51008108
 8000408:	52004000 	.word	0x52004000

0800040c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b084      	sub	sp, #16
 8000410:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000412:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000416:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000418:	bf00      	nop
 800041a:	4b30      	ldr	r3, [pc, #192]	; (80004dc <main+0xd0>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000422:	2b00      	cmp	r3, #0
 8000424:	d004      	beq.n	8000430 <main+0x24>
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	1e5a      	subs	r2, r3, #1
 800042a:	60fa      	str	r2, [r7, #12]
 800042c:	2b00      	cmp	r3, #0
 800042e:	dcf4      	bgt.n	800041a <main+0xe>
  if ( timeout < 0 )
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	2b00      	cmp	r3, #0
 8000434:	da01      	bge.n	800043a <main+0x2e>
  {
  Error_Handler();
 8000436:	f000 f9a9 	bl	800078c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800043a:	f000 fac7 	bl	80009cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800043e:	f000 f853 	bl	80004e8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000442:	4b26      	ldr	r3, [pc, #152]	; (80004dc <main+0xd0>)
 8000444:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000448:	4a24      	ldr	r2, [pc, #144]	; (80004dc <main+0xd0>)
 800044a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800044e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000452:	4b22      	ldr	r3, [pc, #136]	; (80004dc <main+0xd0>)
 8000454:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800045c:	607b      	str	r3, [r7, #4]
 800045e:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000460:	2000      	movs	r0, #0
 8000462:	f004 f915 	bl	8004690 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000466:	2100      	movs	r1, #0
 8000468:	2000      	movs	r0, #0
 800046a:	f004 f92b 	bl	80046c4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800046e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000472:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000474:	bf00      	nop
 8000476:	4b19      	ldr	r3, [pc, #100]	; (80004dc <main+0xd0>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800047e:	2b00      	cmp	r3, #0
 8000480:	d104      	bne.n	800048c <main+0x80>
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	1e5a      	subs	r2, r3, #1
 8000486:	60fa      	str	r2, [r7, #12]
 8000488:	2b00      	cmp	r3, #0
 800048a:	dcf4      	bgt.n	8000476 <main+0x6a>
if ( timeout < 0 )
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	2b00      	cmp	r3, #0
 8000490:	da01      	bge.n	8000496 <main+0x8a>
{
Error_Handler();
 8000492:	f000 f97b 	bl	800078c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000496:	f000 f933 	bl	8000700 <MX_GPIO_Init>
  MX_DMA_Init();
 800049a:	f000 f911 	bl	80006c0 <MX_DMA_Init>
  MX_ADC1_Init();
 800049e:	f000 f895 	bl	80005cc <MX_ADC1_Init>

    /* USER CODE BEGIN 3 */



	  HAL_ADC_Start(&hadc1);
 80004a2:	480f      	ldr	r0, [pc, #60]	; (80004e0 <main+0xd4>)
 80004a4:	f000 ff00 	bl	80012a8 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80004a8:	f04f 31ff 	mov.w	r1, #4294967295
 80004ac:	480c      	ldr	r0, [pc, #48]	; (80004e0 <main+0xd4>)
 80004ae:	f000 ffc5 	bl	800143c <HAL_ADC_PollForConversion>
	  value=HAL_ADC_GetValue(&hadc1);
 80004b2:	480b      	ldr	r0, [pc, #44]	; (80004e0 <main+0xd4>)
 80004b4:	f001 f8b6 	bl	8001624 <HAL_ADC_GetValue>
 80004b8:	4603      	mov	r3, r0
 80004ba:	817b      	strh	r3, [r7, #10]
	  if(value>=2000)
 80004bc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80004c0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80004c4:	dbed      	blt.n	80004a2 <main+0x96>
	  {
		  HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_13);
 80004c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ca:	4806      	ldr	r0, [pc, #24]	; (80004e4 <main+0xd8>)
 80004cc:	f004 f8c5 	bl	800465a <HAL_GPIO_TogglePin>
		  HAL_Delay(500);
 80004d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004d4:	f000 fb0c 	bl	8000af0 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 80004d8:	e7e3      	b.n	80004a2 <main+0x96>
 80004da:	bf00      	nop
 80004dc:	58024400 	.word	0x58024400
 80004e0:	2400002c 	.word	0x2400002c
 80004e4:	58022000 	.word	0x58022000

080004e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b09c      	sub	sp, #112	; 0x70
 80004ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004f2:	224c      	movs	r2, #76	; 0x4c
 80004f4:	2100      	movs	r1, #0
 80004f6:	4618      	mov	r0, r3
 80004f8:	f007 fa9c 	bl	8007a34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fc:	1d3b      	adds	r3, r7, #4
 80004fe:	2220      	movs	r2, #32
 8000500:	2100      	movs	r1, #0
 8000502:	4618      	mov	r0, r3
 8000504:	f007 fa96 	bl	8007a34 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000508:	2004      	movs	r0, #4
 800050a:	f004 f8ef 	bl	80046ec <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800050e:	2300      	movs	r3, #0
 8000510:	603b      	str	r3, [r7, #0]
 8000512:	4b2b      	ldr	r3, [pc, #172]	; (80005c0 <SystemClock_Config+0xd8>)
 8000514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000516:	4a2a      	ldr	r2, [pc, #168]	; (80005c0 <SystemClock_Config+0xd8>)
 8000518:	f023 0301 	bic.w	r3, r3, #1
 800051c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800051e:	4b28      	ldr	r3, [pc, #160]	; (80005c0 <SystemClock_Config+0xd8>)
 8000520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000522:	f003 0301 	and.w	r3, r3, #1
 8000526:	603b      	str	r3, [r7, #0]
 8000528:	4b26      	ldr	r3, [pc, #152]	; (80005c4 <SystemClock_Config+0xdc>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	4a25      	ldr	r2, [pc, #148]	; (80005c4 <SystemClock_Config+0xdc>)
 800052e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000532:	6193      	str	r3, [r2, #24]
 8000534:	4b23      	ldr	r3, [pc, #140]	; (80005c4 <SystemClock_Config+0xdc>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800053c:	603b      	str	r3, [r7, #0]
 800053e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000540:	bf00      	nop
 8000542:	4b20      	ldr	r3, [pc, #128]	; (80005c4 <SystemClock_Config+0xdc>)
 8000544:	699b      	ldr	r3, [r3, #24]
 8000546:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800054a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800054e:	d1f8      	bne.n	8000542 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000550:	4b1d      	ldr	r3, [pc, #116]	; (80005c8 <SystemClock_Config+0xe0>)
 8000552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000554:	4a1c      	ldr	r2, [pc, #112]	; (80005c8 <SystemClock_Config+0xe0>)
 8000556:	f023 0303 	bic.w	r3, r3, #3
 800055a:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800055c:	2302      	movs	r3, #2
 800055e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000560:	2301      	movs	r3, #1
 8000562:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000564:	2340      	movs	r3, #64	; 0x40
 8000566:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000568:	2300      	movs	r3, #0
 800056a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800056c:	2300      	movs	r3, #0
 800056e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000570:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000574:	4618      	mov	r0, r3
 8000576:	f004 f913 	bl	80047a0 <HAL_RCC_OscConfig>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000580:	f000 f904 	bl	800078c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000584:	233f      	movs	r3, #63	; 0x3f
 8000586:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000588:	2300      	movs	r3, #0
 800058a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800058c:	2300      	movs	r3, #0
 800058e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000598:	2300      	movs	r3, #0
 800059a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	2100      	movs	r1, #0
 80005a8:	4618      	mov	r0, r3
 80005aa:	f004 fd09 	bl	8004fc0 <HAL_RCC_ClockConfig>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80005b4:	f000 f8ea 	bl	800078c <Error_Handler>
  }
}
 80005b8:	bf00      	nop
 80005ba:	3770      	adds	r7, #112	; 0x70
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	58000400 	.word	0x58000400
 80005c4:	58024800 	.word	0x58024800
 80005c8:	58024400 	.word	0x58024400

080005cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b08a      	sub	sp, #40	; 0x28
 80005d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005d2:	f107 031c 	add.w	r3, r7, #28
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
 80005da:	605a      	str	r2, [r3, #4]
 80005dc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005de:	463b      	mov	r3, r7
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]
 80005ec:	615a      	str	r2, [r3, #20]
 80005ee:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80005f0:	4b30      	ldr	r3, [pc, #192]	; (80006b4 <MX_ADC1_Init+0xe8>)
 80005f2:	4a31      	ldr	r2, [pc, #196]	; (80006b8 <MX_ADC1_Init+0xec>)
 80005f4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 80005f6:	4b2f      	ldr	r3, [pc, #188]	; (80006b4 <MX_ADC1_Init+0xe8>)
 80005f8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80005fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80005fe:	4b2d      	ldr	r3, [pc, #180]	; (80006b4 <MX_ADC1_Init+0xe8>)
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000604:	4b2b      	ldr	r3, [pc, #172]	; (80006b4 <MX_ADC1_Init+0xe8>)
 8000606:	2200      	movs	r2, #0
 8000608:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800060a:	4b2a      	ldr	r3, [pc, #168]	; (80006b4 <MX_ADC1_Init+0xe8>)
 800060c:	2204      	movs	r2, #4
 800060e:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000610:	4b28      	ldr	r3, [pc, #160]	; (80006b4 <MX_ADC1_Init+0xe8>)
 8000612:	2200      	movs	r2, #0
 8000614:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000616:	4b27      	ldr	r3, [pc, #156]	; (80006b4 <MX_ADC1_Init+0xe8>)
 8000618:	2200      	movs	r2, #0
 800061a:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 800061c:	4b25      	ldr	r3, [pc, #148]	; (80006b4 <MX_ADC1_Init+0xe8>)
 800061e:	2201      	movs	r2, #1
 8000620:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000622:	4b24      	ldr	r3, [pc, #144]	; (80006b4 <MX_ADC1_Init+0xe8>)
 8000624:	2200      	movs	r2, #0
 8000626:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000628:	4b22      	ldr	r3, [pc, #136]	; (80006b4 <MX_ADC1_Init+0xe8>)
 800062a:	2200      	movs	r2, #0
 800062c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800062e:	4b21      	ldr	r3, [pc, #132]	; (80006b4 <MX_ADC1_Init+0xe8>)
 8000630:	2200      	movs	r2, #0
 8000632:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000634:	4b1f      	ldr	r3, [pc, #124]	; (80006b4 <MX_ADC1_Init+0xe8>)
 8000636:	2200      	movs	r2, #0
 8000638:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800063a:	4b1e      	ldr	r3, [pc, #120]	; (80006b4 <MX_ADC1_Init+0xe8>)
 800063c:	2200      	movs	r2, #0
 800063e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000640:	4b1c      	ldr	r3, [pc, #112]	; (80006b4 <MX_ADC1_Init+0xe8>)
 8000642:	2200      	movs	r2, #0
 8000644:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000646:	4b1b      	ldr	r3, [pc, #108]	; (80006b4 <MX_ADC1_Init+0xe8>)
 8000648:	2200      	movs	r2, #0
 800064a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800064e:	4819      	ldr	r0, [pc, #100]	; (80006b4 <MX_ADC1_Init+0xe8>)
 8000650:	f000 fc8a 	bl	8000f68 <HAL_ADC_Init>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800065a:	f000 f897 	bl	800078c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800065e:	2300      	movs	r3, #0
 8000660:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000662:	f107 031c 	add.w	r3, r7, #28
 8000666:	4619      	mov	r1, r3
 8000668:	4812      	ldr	r0, [pc, #72]	; (80006b4 <MX_ADC1_Init+0xe8>)
 800066a:	f001 ff7d 	bl	8002568 <HAL_ADCEx_MultiModeConfigChannel>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000674:	f000 f88a 	bl	800078c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000678:	4b10      	ldr	r3, [pc, #64]	; (80006bc <MX_ADC1_Init+0xf0>)
 800067a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800067c:	2306      	movs	r3, #6
 800067e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000684:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000688:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800068a:	2304      	movs	r3, #4
 800068c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000692:	2300      	movs	r3, #0
 8000694:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000696:	463b      	mov	r3, r7
 8000698:	4619      	mov	r1, r3
 800069a:	4806      	ldr	r0, [pc, #24]	; (80006b4 <MX_ADC1_Init+0xe8>)
 800069c:	f001 fa28 	bl	8001af0 <HAL_ADC_ConfigChannel>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006a6:	f000 f871 	bl	800078c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	3728      	adds	r7, #40	; 0x28
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	2400002c 	.word	0x2400002c
 80006b8:	40022000 	.word	0x40022000
 80006bc:	04300002 	.word	0x04300002

080006c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006c6:	4b0d      	ldr	r3, [pc, #52]	; (80006fc <MX_DMA_Init+0x3c>)
 80006c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006cc:	4a0b      	ldr	r2, [pc, #44]	; (80006fc <MX_DMA_Init+0x3c>)
 80006ce:	f043 0301 	orr.w	r3, r3, #1
 80006d2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80006d6:	4b09      	ldr	r3, [pc, #36]	; (80006fc <MX_DMA_Init+0x3c>)
 80006d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006dc:	f003 0301 	and.w	r3, r3, #1
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2100      	movs	r1, #0
 80006e8:	200b      	movs	r0, #11
 80006ea:	f002 f8f6 	bl	80028da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80006ee:	200b      	movs	r0, #11
 80006f0:	f002 f90d 	bl	800290e <HAL_NVIC_EnableIRQ>

}
 80006f4:	bf00      	nop
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	58024400 	.word	0x58024400

08000700 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b088      	sub	sp, #32
 8000704:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000706:	f107 030c 	add.w	r3, r7, #12
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000716:	4b1b      	ldr	r3, [pc, #108]	; (8000784 <MX_GPIO_Init+0x84>)
 8000718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800071c:	4a19      	ldr	r2, [pc, #100]	; (8000784 <MX_GPIO_Init+0x84>)
 800071e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000722:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000726:	4b17      	ldr	r3, [pc, #92]	; (8000784 <MX_GPIO_Init+0x84>)
 8000728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800072c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000734:	4b13      	ldr	r3, [pc, #76]	; (8000784 <MX_GPIO_Init+0x84>)
 8000736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800073a:	4a12      	ldr	r2, [pc, #72]	; (8000784 <MX_GPIO_Init+0x84>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000744:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <MX_GPIO_Init+0x84>)
 8000746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_13, GPIO_PIN_RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000758:	480b      	ldr	r0, [pc, #44]	; (8000788 <MX_GPIO_Init+0x88>)
 800075a:	f003 ff65 	bl	8004628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800075e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000762:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000764:	2301      	movs	r3, #1
 8000766:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076c:	2300      	movs	r3, #0
 800076e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	4619      	mov	r1, r3
 8000776:	4804      	ldr	r0, [pc, #16]	; (8000788 <MX_GPIO_Init+0x88>)
 8000778:	f003 fda6 	bl	80042c8 <HAL_GPIO_Init>

}
 800077c:	bf00      	nop
 800077e:	3720      	adds	r7, #32
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	58024400 	.word	0x58024400
 8000788:	58022000 	.word	0x58022000

0800078c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000790:	b672      	cpsid	i
}
 8000792:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000794:	e7fe      	b.n	8000794 <Error_Handler+0x8>
	...

08000798 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800079e:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <HAL_MspInit+0x30>)
 80007a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007a4:	4a08      	ldr	r2, [pc, #32]	; (80007c8 <HAL_MspInit+0x30>)
 80007a6:	f043 0302 	orr.w	r3, r3, #2
 80007aa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80007ae:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <HAL_MspInit+0x30>)
 80007b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80007b4:	f003 0302 	and.w	r3, r3, #2
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007bc:	bf00      	nop
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c6:	4770      	bx	lr
 80007c8:	58024400 	.word	0x58024400

080007cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b0b4      	sub	sp, #208	; 0xd0
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007d4:	f107 0310 	add.w	r3, r7, #16
 80007d8:	22c0      	movs	r2, #192	; 0xc0
 80007da:	2100      	movs	r1, #0
 80007dc:	4618      	mov	r0, r3
 80007de:	f007 f929 	bl	8007a34 <memset>
  if(hadc->Instance==ADC1)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a41      	ldr	r2, [pc, #260]	; (80008ec <HAL_ADC_MspInit+0x120>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d17b      	bne.n	80008e4 <HAL_ADC_MspInit+0x118>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80007ec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80007f0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 80007f2:	2304      	movs	r3, #4
 80007f4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 9;
 80007f6:	2309      	movs	r3, #9
 80007f8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80007fa:	2302      	movs	r3, #2
 80007fc:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80007fe:	2302      	movs	r3, #2
 8000800:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000802:	2302      	movs	r3, #2
 8000804:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000806:	23c0      	movs	r3, #192	; 0xc0
 8000808:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800080a:	2320      	movs	r3, #32
 800080c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 800080e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000812:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000814:	2300      	movs	r3, #0
 8000816:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800081a:	f107 0310 	add.w	r3, r7, #16
 800081e:	4618      	mov	r0, r3
 8000820:	f004 ff2e 	bl	8005680 <HAL_RCCEx_PeriphCLKConfig>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <HAL_ADC_MspInit+0x62>
    {
      Error_Handler();
 800082a:	f7ff ffaf 	bl	800078c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800082e:	4b30      	ldr	r3, [pc, #192]	; (80008f0 <HAL_ADC_MspInit+0x124>)
 8000830:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000834:	4a2e      	ldr	r2, [pc, #184]	; (80008f0 <HAL_ADC_MspInit+0x124>)
 8000836:	f043 0320 	orr.w	r3, r3, #32
 800083a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800083e:	4b2c      	ldr	r3, [pc, #176]	; (80008f0 <HAL_ADC_MspInit+0x124>)
 8000840:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000844:	f003 0320 	and.w	r3, r3, #32
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800084c:	4b28      	ldr	r3, [pc, #160]	; (80008f0 <HAL_ADC_MspInit+0x124>)
 800084e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000852:	4a27      	ldr	r2, [pc, #156]	; (80008f0 <HAL_ADC_MspInit+0x124>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800085c:	4b24      	ldr	r3, [pc, #144]	; (80008f0 <HAL_ADC_MspInit+0x124>)
 800085e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1_C     ------> ADC1_INP1
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 800086a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800086e:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8000872:	f000 f96d 	bl	8000b50 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000876:	4b1f      	ldr	r3, [pc, #124]	; (80008f4 <HAL_ADC_MspInit+0x128>)
 8000878:	4a1f      	ldr	r2, [pc, #124]	; (80008f8 <HAL_ADC_MspInit+0x12c>)
 800087a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800087c:	4b1d      	ldr	r3, [pc, #116]	; (80008f4 <HAL_ADC_MspInit+0x128>)
 800087e:	2209      	movs	r2, #9
 8000880:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000882:	4b1c      	ldr	r3, [pc, #112]	; (80008f4 <HAL_ADC_MspInit+0x128>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000888:	4b1a      	ldr	r3, [pc, #104]	; (80008f4 <HAL_ADC_MspInit+0x128>)
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800088e:	4b19      	ldr	r3, [pc, #100]	; (80008f4 <HAL_ADC_MspInit+0x128>)
 8000890:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000894:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000896:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <HAL_ADC_MspInit+0x128>)
 8000898:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800089c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800089e:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <HAL_ADC_MspInit+0x128>)
 80008a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008a4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80008a6:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <HAL_ADC_MspInit+0x128>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80008ac:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <HAL_ADC_MspInit+0x128>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80008b2:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <HAL_ADC_MspInit+0x128>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80008b8:	480e      	ldr	r0, [pc, #56]	; (80008f4 <HAL_ADC_MspInit+0x128>)
 80008ba:	f002 f843 	bl	8002944 <HAL_DMA_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 80008c4:	f7ff ff62 	bl	800078c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	4a0a      	ldr	r2, [pc, #40]	; (80008f4 <HAL_ADC_MspInit+0x128>)
 80008cc:	64da      	str	r2, [r3, #76]	; 0x4c
 80008ce:	4a09      	ldr	r2, [pc, #36]	; (80008f4 <HAL_ADC_MspInit+0x128>)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80008d4:	2200      	movs	r2, #0
 80008d6:	2100      	movs	r1, #0
 80008d8:	2012      	movs	r0, #18
 80008da:	f001 fffe 	bl	80028da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80008de:	2012      	movs	r0, #18
 80008e0:	f002 f815 	bl	800290e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008e4:	bf00      	nop
 80008e6:	37d0      	adds	r7, #208	; 0xd0
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	40022000 	.word	0x40022000
 80008f0:	58024400 	.word	0x58024400
 80008f4:	24000090 	.word	0x24000090
 80008f8:	40020010 	.word	0x40020010

080008fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <NMI_Handler+0x4>

08000902 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000906:	e7fe      	b.n	8000906 <HardFault_Handler+0x4>

08000908 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800090c:	e7fe      	b.n	800090c <MemManage_Handler+0x4>

0800090e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000912:	e7fe      	b.n	8000912 <BusFault_Handler+0x4>

08000914 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <UsageFault_Handler+0x4>

0800091a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr

08000936 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000948:	f000 f8b2 	bl	8000ab0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}

08000950 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000954:	4802      	ldr	r0, [pc, #8]	; (8000960 <DMA1_Stream0_IRQHandler+0x10>)
 8000956:	f002 fb51 	bl	8002ffc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	24000090 	.word	0x24000090

08000964 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000968:	4802      	ldr	r0, [pc, #8]	; (8000974 <ADC_IRQHandler+0x10>)
 800096a:	f000 fe69 	bl	8001640 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	2400002c 	.word	0x2400002c

08000978 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000978:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800097c:	f7ff fcac 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000980:	480c      	ldr	r0, [pc, #48]	; (80009b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000982:	490d      	ldr	r1, [pc, #52]	; (80009b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000984:	4a0d      	ldr	r2, [pc, #52]	; (80009bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000988:	e002      	b.n	8000990 <LoopCopyDataInit>

0800098a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800098a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800098c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800098e:	3304      	adds	r3, #4

08000990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000994:	d3f9      	bcc.n	800098a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000996:	4a0a      	ldr	r2, [pc, #40]	; (80009c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000998:	4c0a      	ldr	r4, [pc, #40]	; (80009c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800099a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800099c:	e001      	b.n	80009a2 <LoopFillZerobss>

0800099e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800099e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a0:	3204      	adds	r2, #4

080009a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a4:	d3fb      	bcc.n	800099e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009a6:	f007 f821 	bl	80079ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009aa:	f7ff fd2f 	bl	800040c <main>
  bx  lr
 80009ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009b0:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 80009b4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80009b8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80009bc:	08007a7c 	.word	0x08007a7c
  ldr r2, =_sbss
 80009c0:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80009c4:	2400010c 	.word	0x2400010c

080009c8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009c8:	e7fe      	b.n	80009c8 <ADC3_IRQHandler>
	...

080009cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d2:	2003      	movs	r0, #3
 80009d4:	f001 ff76 	bl	80028c4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80009d8:	f004 fca8 	bl	800532c <HAL_RCC_GetSysClockFreq>
 80009dc:	4602      	mov	r2, r0
 80009de:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <HAL_Init+0x68>)
 80009e0:	699b      	ldr	r3, [r3, #24]
 80009e2:	0a1b      	lsrs	r3, r3, #8
 80009e4:	f003 030f 	and.w	r3, r3, #15
 80009e8:	4913      	ldr	r1, [pc, #76]	; (8000a38 <HAL_Init+0x6c>)
 80009ea:	5ccb      	ldrb	r3, [r1, r3]
 80009ec:	f003 031f 	and.w	r3, r3, #31
 80009f0:	fa22 f303 	lsr.w	r3, r2, r3
 80009f4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80009f6:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <HAL_Init+0x68>)
 80009f8:	699b      	ldr	r3, [r3, #24]
 80009fa:	f003 030f 	and.w	r3, r3, #15
 80009fe:	4a0e      	ldr	r2, [pc, #56]	; (8000a38 <HAL_Init+0x6c>)
 8000a00:	5cd3      	ldrb	r3, [r2, r3]
 8000a02:	f003 031f 	and.w	r3, r3, #31
 8000a06:	687a      	ldr	r2, [r7, #4]
 8000a08:	fa22 f303 	lsr.w	r3, r2, r3
 8000a0c:	4a0b      	ldr	r2, [pc, #44]	; (8000a3c <HAL_Init+0x70>)
 8000a0e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000a10:	4a0b      	ldr	r2, [pc, #44]	; (8000a40 <HAL_Init+0x74>)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a16:	2000      	movs	r0, #0
 8000a18:	f000 f814 	bl	8000a44 <HAL_InitTick>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000a22:	2301      	movs	r3, #1
 8000a24:	e002      	b.n	8000a2c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000a26:	f7ff feb7 	bl	8000798 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a2a:	2300      	movs	r3, #0
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	58024400 	.word	0x58024400
 8000a38:	08007a5c 	.word	0x08007a5c
 8000a3c:	24000004 	.word	0x24000004
 8000a40:	24000000 	.word	0x24000000

08000a44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000a4c:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <HAL_InitTick+0x60>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d101      	bne.n	8000a58 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000a54:	2301      	movs	r3, #1
 8000a56:	e021      	b.n	8000a9c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000a58:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <HAL_InitTick+0x64>)
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <HAL_InitTick+0x60>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	4619      	mov	r1, r3
 8000a62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f001 ff5b 	bl	800292a <HAL_SYSTICK_Config>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	e00e      	b.n	8000a9c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2b0f      	cmp	r3, #15
 8000a82:	d80a      	bhi.n	8000a9a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a84:	2200      	movs	r2, #0
 8000a86:	6879      	ldr	r1, [r7, #4]
 8000a88:	f04f 30ff 	mov.w	r0, #4294967295
 8000a8c:	f001 ff25 	bl	80028da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a90:	4a06      	ldr	r2, [pc, #24]	; (8000aac <HAL_InitTick+0x68>)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a96:	2300      	movs	r3, #0
 8000a98:	e000      	b.n	8000a9c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	2400000c 	.word	0x2400000c
 8000aa8:	24000000 	.word	0x24000000
 8000aac:	24000008 	.word	0x24000008

08000ab0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <HAL_IncTick+0x20>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <HAL_IncTick+0x24>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4413      	add	r3, r2
 8000ac0:	4a04      	ldr	r2, [pc, #16]	; (8000ad4 <HAL_IncTick+0x24>)
 8000ac2:	6013      	str	r3, [r2, #0]
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	2400000c 	.word	0x2400000c
 8000ad4:	24000108 	.word	0x24000108

08000ad8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  return uwTick;
 8000adc:	4b03      	ldr	r3, [pc, #12]	; (8000aec <HAL_GetTick+0x14>)
 8000ade:	681b      	ldr	r3, [r3, #0]
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	24000108 	.word	0x24000108

08000af0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000af8:	f7ff ffee 	bl	8000ad8 <HAL_GetTick>
 8000afc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b08:	d005      	beq.n	8000b16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b0a:	4b0a      	ldr	r3, [pc, #40]	; (8000b34 <HAL_Delay+0x44>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	461a      	mov	r2, r3
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	4413      	add	r3, r2
 8000b14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b16:	bf00      	nop
 8000b18:	f7ff ffde 	bl	8000ad8 <HAL_GetTick>
 8000b1c:	4602      	mov	r2, r0
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	68fa      	ldr	r2, [r7, #12]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d8f7      	bhi.n	8000b18 <HAL_Delay+0x28>
  {
  }
}
 8000b28:	bf00      	nop
 8000b2a:	bf00      	nop
 8000b2c:	3710      	adds	r7, #16
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	2400000c 	.word	0x2400000c

08000b38 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000b3c:	4b03      	ldr	r3, [pc, #12]	; (8000b4c <HAL_GetREVID+0x14>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	0c1b      	lsrs	r3, r3, #16
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	5c001000 	.word	0x5c001000

08000b50 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8000b5a:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8000b5c:	685a      	ldr	r2, [r3, #4]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	43db      	mvns	r3, r3
 8000b62:	401a      	ands	r2, r3
 8000b64:	4904      	ldr	r1, [pc, #16]	; (8000b78 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	604b      	str	r3, [r1, #4]
}
 8000b6c:	bf00      	nop
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	58000400 	.word	0x58000400

08000b7c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	689b      	ldr	r3, [r3, #8]
 8000b8a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	431a      	orrs	r2, r3
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	609a      	str	r2, [r3, #8]
}
 8000b96:	bf00      	nop
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	b083      	sub	sp, #12
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
 8000baa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	689b      	ldr	r3, [r3, #8]
 8000bb0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	431a      	orrs	r2, r3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	609a      	str	r2, [r3, #8]
}
 8000bbc:	bf00      	nop
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	689b      	ldr	r3, [r3, #8]
 8000bd4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b087      	sub	sp, #28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	60f8      	str	r0, [r7, #12]
 8000bec:	60b9      	str	r1, [r7, #8]
 8000bee:	607a      	str	r2, [r7, #4]
 8000bf0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	3360      	adds	r3, #96	; 0x60
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	4413      	add	r3, r2
 8000bfe:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	430b      	orrs	r3, r1
 8000c12:	431a      	orrs	r2, r3
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8000c18:	bf00      	nop
 8000c1a:	371c      	adds	r7, #28
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	691b      	ldr	r3, [r3, #16]
 8000c34:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	f003 031f 	and.w	r3, r3, #31
 8000c3e:	6879      	ldr	r1, [r7, #4]
 8000c40:	fa01 f303 	lsl.w	r3, r1, r3
 8000c44:	431a      	orrs	r2, r3
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	611a      	str	r2, [r3, #16]
}
 8000c4a:	bf00      	nop
 8000c4c:	3714      	adds	r7, #20
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8000c56:	b480      	push	{r7}
 8000c58:	b087      	sub	sp, #28
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	60f8      	str	r0, [r7, #12]
 8000c5e:	60b9      	str	r1, [r7, #8]
 8000c60:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	3360      	adds	r3, #96	; 0x60
 8000c66:	461a      	mov	r2, r3
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	4413      	add	r3, r2
 8000c6e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	431a      	orrs	r2, r3
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	601a      	str	r2, [r3, #0]
  }
}
 8000c80:	bf00      	nop
 8000c82:	371c      	adds	r7, #28
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d101      	bne.n	8000ca4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	e000      	b.n	8000ca6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000ca4:	2300      	movs	r3, #0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	b087      	sub	sp, #28
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	60f8      	str	r0, [r7, #12]
 8000cba:	60b9      	str	r1, [r7, #8]
 8000cbc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	3330      	adds	r3, #48	; 0x30
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	0a1b      	lsrs	r3, r3, #8
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	f003 030c 	and.w	r3, r3, #12
 8000cce:	4413      	add	r3, r2
 8000cd0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	f003 031f 	and.w	r3, r3, #31
 8000cdc:	211f      	movs	r1, #31
 8000cde:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce2:	43db      	mvns	r3, r3
 8000ce4:	401a      	ands	r2, r3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	0e9b      	lsrs	r3, r3, #26
 8000cea:	f003 011f 	and.w	r1, r3, #31
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	f003 031f 	and.w	r3, r3, #31
 8000cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf8:	431a      	orrs	r2, r3
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000cfe:	bf00      	nop
 8000d00:	371c      	adds	r7, #28
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	b083      	sub	sp, #12
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d16:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d101      	bne.n	8000d22 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e000      	b.n	8000d24 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8000d22:	2300      	movs	r3, #0
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b087      	sub	sp, #28
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	3314      	adds	r3, #20
 8000d40:	461a      	mov	r2, r3
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	0e5b      	lsrs	r3, r3, #25
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	f003 0304 	and.w	r3, r3, #4
 8000d4c:	4413      	add	r3, r2
 8000d4e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	0d1b      	lsrs	r3, r3, #20
 8000d58:	f003 031f 	and.w	r3, r3, #31
 8000d5c:	2107      	movs	r1, #7
 8000d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d62:	43db      	mvns	r3, r3
 8000d64:	401a      	ands	r2, r3
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	0d1b      	lsrs	r3, r3, #20
 8000d6a:	f003 031f 	and.w	r3, r3, #31
 8000d6e:	6879      	ldr	r1, [r7, #4]
 8000d70:	fa01 f303 	lsl.w	r3, r1, r3
 8000d74:	431a      	orrs	r2, r3
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000d7a:	bf00      	nop
 8000d7c:	371c      	adds	r7, #28
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
	...

08000d88 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000da0:	43db      	mvns	r3, r3
 8000da2:	401a      	ands	r2, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f003 0318 	and.w	r3, r3, #24
 8000daa:	4908      	ldr	r1, [pc, #32]	; (8000dcc <LL_ADC_SetChannelSingleDiff+0x44>)
 8000dac:	40d9      	lsrs	r1, r3
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	400b      	ands	r3, r1
 8000db2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000db6:	431a      	orrs	r2, r3
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8000dbe:	bf00      	nop
 8000dc0:	3714      	adds	r7, #20
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	000fffff 	.word	0x000fffff

08000dd0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	f003 031f 	and.w	r3, r3, #31
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	689a      	ldr	r2, [r3, #8]
 8000e14:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <LL_ADC_DisableDeepPowerDown+0x20>)
 8000e16:	4013      	ands	r3, r2
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	6093      	str	r3, [r2, #8]
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	5fffffc0 	.word	0x5fffffc0

08000e2c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000e3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000e40:	d101      	bne.n	8000e46 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000e42:	2301      	movs	r3, #1
 8000e44:	e000      	b.n	8000e48 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000e46:	2300      	movs	r3, #0
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	689a      	ldr	r2, [r3, #8]
 8000e60:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <LL_ADC_EnableInternalRegulator+0x24>)
 8000e62:	4013      	ands	r3, r2
 8000e64:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000e6c:	bf00      	nop
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	6fffffc0 	.word	0x6fffffc0

08000e7c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	689b      	ldr	r3, [r3, #8]
 8000e88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000e90:	d101      	bne.n	8000e96 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000e92:	2301      	movs	r3, #1
 8000e94:	e000      	b.n	8000e98 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000e96:	2300      	movs	r3, #0
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	689a      	ldr	r2, [r3, #8]
 8000eb0:	4b05      	ldr	r3, [pc, #20]	; (8000ec8 <LL_ADC_Enable+0x24>)
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	f043 0201 	orr.w	r2, r3, #1
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	7fffffc0 	.word	0x7fffffc0

08000ecc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	f003 0301 	and.w	r3, r3, #1
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d101      	bne.n	8000ee4 <LL_ADC_IsEnabled+0x18>
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	e000      	b.n	8000ee6 <LL_ADC_IsEnabled+0x1a>
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
	...

08000ef4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	689a      	ldr	r2, [r3, #8]
 8000f00:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <LL_ADC_REG_StartConversion+0x24>)
 8000f02:	4013      	ands	r3, r2
 8000f04:	f043 0204 	orr.w	r2, r3, #4
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	7fffffc0 	.word	0x7fffffc0

08000f1c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	f003 0304 	and.w	r3, r3, #4
 8000f2c:	2b04      	cmp	r3, #4
 8000f2e:	d101      	bne.n	8000f34 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000f30:	2301      	movs	r3, #1
 8000f32:	e000      	b.n	8000f36 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000f42:	b480      	push	{r7}
 8000f44:	b083      	sub	sp, #12
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	f003 0308 	and.w	r3, r3, #8
 8000f52:	2b08      	cmp	r3, #8
 8000f54:	d101      	bne.n	8000f5a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000f56:	2301      	movs	r3, #1
 8000f58:	e000      	b.n	8000f5c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000f5a:	2300      	movs	r3, #0
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f68:	b590      	push	{r4, r7, lr}
 8000f6a:	b089      	sub	sp, #36	; 0x24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f70:	2300      	movs	r3, #0
 8000f72:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d101      	bne.n	8000f82 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e18e      	b.n	80012a0 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d109      	bne.n	8000fa4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f7ff fc1b 	bl	80007cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff ff3f 	bl	8000e2c <LL_ADC_IsDeepPowerDownEnabled>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d004      	beq.n	8000fbe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff ff25 	bl	8000e08 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff ff5a 	bl	8000e7c <LL_ADC_IsInternalRegulatorEnabled>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d114      	bne.n	8000ff8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff ff3e 	bl	8000e54 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000fd8:	4b9a      	ldr	r3, [pc, #616]	; (8001244 <HAL_ADC_Init+0x2dc>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	099b      	lsrs	r3, r3, #6
 8000fde:	4a9a      	ldr	r2, [pc, #616]	; (8001248 <HAL_ADC_Init+0x2e0>)
 8000fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe4:	099b      	lsrs	r3, r3, #6
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000fea:	e002      	b.n	8000ff2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d1f9      	bne.n	8000fec <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff ff3d 	bl	8000e7c <LL_ADC_IsInternalRegulatorEnabled>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d10d      	bne.n	8001024 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800100c:	f043 0210 	orr.w	r2, r3, #16
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001018:	f043 0201 	orr.w	r2, r3, #1
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff ff77 	bl	8000f1c <LL_ADC_REG_IsConversionOngoing>
 800102e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001034:	f003 0310 	and.w	r3, r3, #16
 8001038:	2b00      	cmp	r3, #0
 800103a:	f040 8128 	bne.w	800128e <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	2b00      	cmp	r3, #0
 8001042:	f040 8124 	bne.w	800128e <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800104a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800104e:	f043 0202 	orr.w	r2, r3, #2
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff ff36 	bl	8000ecc <LL_ADC_IsEnabled>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d136      	bne.n	80010d4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a78      	ldr	r2, [pc, #480]	; (800124c <HAL_ADC_Init+0x2e4>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d004      	beq.n	800107a <HAL_ADC_Init+0x112>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a76      	ldr	r2, [pc, #472]	; (8001250 <HAL_ADC_Init+0x2e8>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d10e      	bne.n	8001098 <HAL_ADC_Init+0x130>
 800107a:	4874      	ldr	r0, [pc, #464]	; (800124c <HAL_ADC_Init+0x2e4>)
 800107c:	f7ff ff26 	bl	8000ecc <LL_ADC_IsEnabled>
 8001080:	4604      	mov	r4, r0
 8001082:	4873      	ldr	r0, [pc, #460]	; (8001250 <HAL_ADC_Init+0x2e8>)
 8001084:	f7ff ff22 	bl	8000ecc <LL_ADC_IsEnabled>
 8001088:	4603      	mov	r3, r0
 800108a:	4323      	orrs	r3, r4
 800108c:	2b00      	cmp	r3, #0
 800108e:	bf0c      	ite	eq
 8001090:	2301      	moveq	r3, #1
 8001092:	2300      	movne	r3, #0
 8001094:	b2db      	uxtb	r3, r3
 8001096:	e008      	b.n	80010aa <HAL_ADC_Init+0x142>
 8001098:	486e      	ldr	r0, [pc, #440]	; (8001254 <HAL_ADC_Init+0x2ec>)
 800109a:	f7ff ff17 	bl	8000ecc <LL_ADC_IsEnabled>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	bf0c      	ite	eq
 80010a4:	2301      	moveq	r3, #1
 80010a6:	2300      	movne	r3, #0
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d012      	beq.n	80010d4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a66      	ldr	r2, [pc, #408]	; (800124c <HAL_ADC_Init+0x2e4>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d004      	beq.n	80010c2 <HAL_ADC_Init+0x15a>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a64      	ldr	r2, [pc, #400]	; (8001250 <HAL_ADC_Init+0x2e8>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d101      	bne.n	80010c6 <HAL_ADC_Init+0x15e>
 80010c2:	4a65      	ldr	r2, [pc, #404]	; (8001258 <HAL_ADC_Init+0x2f0>)
 80010c4:	e000      	b.n	80010c8 <HAL_ADC_Init+0x160>
 80010c6:	4a65      	ldr	r2, [pc, #404]	; (800125c <HAL_ADC_Init+0x2f4>)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	4619      	mov	r1, r3
 80010ce:	4610      	mov	r0, r2
 80010d0:	f7ff fd54 	bl	8000b7c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80010d4:	f7ff fd30 	bl	8000b38 <HAL_GetREVID>
 80010d8:	4603      	mov	r3, r0
 80010da:	f241 0203 	movw	r2, #4099	; 0x1003
 80010de:	4293      	cmp	r3, r2
 80010e0:	d914      	bls.n	800110c <HAL_ADC_Init+0x1a4>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	2b10      	cmp	r3, #16
 80010e8:	d110      	bne.n	800110c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	7d5b      	ldrb	r3, [r3, #21]
 80010ee:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80010f4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80010fa:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	7f1b      	ldrb	r3, [r3, #28]
 8001100:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001102:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001104:	f043 030c 	orr.w	r3, r3, #12
 8001108:	61bb      	str	r3, [r7, #24]
 800110a:	e00d      	b.n	8001128 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	7d5b      	ldrb	r3, [r3, #21]
 8001110:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001116:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800111c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	7f1b      	ldrb	r3, [r3, #28]
 8001122:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001124:	4313      	orrs	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	7f1b      	ldrb	r3, [r3, #28]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d106      	bne.n	800113e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6a1b      	ldr	r3, [r3, #32]
 8001134:	3b01      	subs	r3, #1
 8001136:	045b      	lsls	r3, r3, #17
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001142:	2b00      	cmp	r3, #0
 8001144:	d009      	beq.n	800115a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001152:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4313      	orrs	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	68da      	ldr	r2, [r3, #12]
 8001160:	4b3f      	ldr	r3, [pc, #252]	; (8001260 <HAL_ADC_Init+0x2f8>)
 8001162:	4013      	ands	r3, r2
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	6812      	ldr	r2, [r2, #0]
 8001168:	69b9      	ldr	r1, [r7, #24]
 800116a:	430b      	orrs	r3, r1
 800116c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff fed2 	bl	8000f1c <LL_ADC_REG_IsConversionOngoing>
 8001178:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff fedf 	bl	8000f42 <LL_ADC_INJ_IsConversionOngoing>
 8001184:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d14a      	bne.n	8001222 <HAL_ADC_Init+0x2ba>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d147      	bne.n	8001222 <HAL_ADC_Init+0x2ba>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	7d1b      	ldrb	r3, [r3, #20]
 8001196:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800119c:	4313      	orrs	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	68da      	ldr	r2, [r3, #12]
 80011a6:	4b2f      	ldr	r3, [pc, #188]	; (8001264 <HAL_ADC_Init+0x2fc>)
 80011a8:	4013      	ands	r3, r2
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	6812      	ldr	r2, [r2, #0]
 80011ae:	69b9      	ldr	r1, [r7, #24]
 80011b0:	430b      	orrs	r3, r1
 80011b2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d11b      	bne.n	80011f6 <HAL_ADC_Init+0x28e>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	691a      	ldr	r2, [r3, #16]
 80011ca:	4b27      	ldr	r3, [pc, #156]	; (8001268 <HAL_ADC_Init+0x300>)
 80011cc:	4013      	ands	r3, r2
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80011d2:	3a01      	subs	r2, #1
 80011d4:	0411      	lsls	r1, r2, #16
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80011da:	4311      	orrs	r1, r2
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80011e0:	4311      	orrs	r1, r2
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80011e6:	430a      	orrs	r2, r1
 80011e8:	431a      	orrs	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f042 0201 	orr.w	r2, r2, #1
 80011f2:	611a      	str	r2, [r3, #16]
 80011f4:	e007      	b.n	8001206 <HAL_ADC_Init+0x29e>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	691a      	ldr	r2, [r3, #16]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f022 0201 	bic.w	r2, r2, #1
 8001204:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	691b      	ldr	r3, [r3, #16]
 800120c:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	430a      	orrs	r2, r1
 800121a:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f001 f841 	bl	80022a4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	68db      	ldr	r3, [r3, #12]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d120      	bne.n	800126c <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001230:	f023 010f 	bic.w	r1, r3, #15
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	699b      	ldr	r3, [r3, #24]
 8001238:	1e5a      	subs	r2, r3, #1
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	430a      	orrs	r2, r1
 8001240:	631a      	str	r2, [r3, #48]	; 0x30
 8001242:	e01b      	b.n	800127c <HAL_ADC_Init+0x314>
 8001244:	24000000 	.word	0x24000000
 8001248:	053e2d63 	.word	0x053e2d63
 800124c:	40022000 	.word	0x40022000
 8001250:	40022100 	.word	0x40022100
 8001254:	58026000 	.word	0x58026000
 8001258:	40022300 	.word	0x40022300
 800125c:	58026300 	.word	0x58026300
 8001260:	fff0c003 	.word	0xfff0c003
 8001264:	ffffbffc 	.word	0xffffbffc
 8001268:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f022 020f 	bic.w	r2, r2, #15
 800127a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001280:	f023 0303 	bic.w	r3, r3, #3
 8001284:	f043 0201 	orr.w	r2, r3, #1
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	655a      	str	r2, [r3, #84]	; 0x54
 800128c:	e007      	b.n	800129e <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001292:	f043 0210 	orr.w	r2, r3, #16
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800129e:	7ffb      	ldrb	r3, [r7, #31]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3724      	adds	r7, #36	; 0x24
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd90      	pop	{r4, r7, pc}

080012a8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a5c      	ldr	r2, [pc, #368]	; (8001428 <HAL_ADC_Start+0x180>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d004      	beq.n	80012c4 <HAL_ADC_Start+0x1c>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a5b      	ldr	r2, [pc, #364]	; (800142c <HAL_ADC_Start+0x184>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d101      	bne.n	80012c8 <HAL_ADC_Start+0x20>
 80012c4:	4b5a      	ldr	r3, [pc, #360]	; (8001430 <HAL_ADC_Start+0x188>)
 80012c6:	e000      	b.n	80012ca <HAL_ADC_Start+0x22>
 80012c8:	4b5a      	ldr	r3, [pc, #360]	; (8001434 <HAL_ADC_Start+0x18c>)
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff fd80 	bl	8000dd0 <LL_ADC_GetMultimode>
 80012d0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff fe20 	bl	8000f1c <LL_ADC_REG_IsConversionOngoing>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	f040 809a 	bne.w	8001418 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d101      	bne.n	80012f2 <HAL_ADC_Start+0x4a>
 80012ee:	2302      	movs	r3, #2
 80012f0:	e095      	b.n	800141e <HAL_ADC_Start+0x176>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2201      	movs	r2, #1
 80012f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f000 ff48 	bl	8002190 <ADC_Enable>
 8001300:	4603      	mov	r3, r0
 8001302:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001304:	7dfb      	ldrb	r3, [r7, #23]
 8001306:	2b00      	cmp	r3, #0
 8001308:	f040 8081 	bne.w	800140e <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001310:	4b49      	ldr	r3, [pc, #292]	; (8001438 <HAL_ADC_Start+0x190>)
 8001312:	4013      	ands	r3, r2
 8001314:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a42      	ldr	r2, [pc, #264]	; (800142c <HAL_ADC_Start+0x184>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d002      	beq.n	800132c <HAL_ADC_Start+0x84>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	e000      	b.n	800132e <HAL_ADC_Start+0x86>
 800132c:	4b3e      	ldr	r3, [pc, #248]	; (8001428 <HAL_ADC_Start+0x180>)
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	6812      	ldr	r2, [r2, #0]
 8001332:	4293      	cmp	r3, r2
 8001334:	d002      	beq.n	800133c <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d105      	bne.n	8001348 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001340:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800134c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001354:	d106      	bne.n	8001364 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800135a:	f023 0206 	bic.w	r2, r3, #6
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	659a      	str	r2, [r3, #88]	; 0x58
 8001362:	e002      	b.n	800136a <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	221c      	movs	r2, #28
 8001370:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a2b      	ldr	r2, [pc, #172]	; (800142c <HAL_ADC_Start+0x184>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d002      	beq.n	800138a <HAL_ADC_Start+0xe2>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	e000      	b.n	800138c <HAL_ADC_Start+0xe4>
 800138a:	4b27      	ldr	r3, [pc, #156]	; (8001428 <HAL_ADC_Start+0x180>)
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	6812      	ldr	r2, [r2, #0]
 8001390:	4293      	cmp	r3, r2
 8001392:	d008      	beq.n	80013a6 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d005      	beq.n	80013a6 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	2b05      	cmp	r3, #5
 800139e:	d002      	beq.n	80013a6 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	2b09      	cmp	r3, #9
 80013a4:	d114      	bne.n	80013d0 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d007      	beq.n	80013c4 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013b8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013bc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff fd93 	bl	8000ef4 <LL_ADC_REG_StartConversion>
 80013ce:	e025      	b.n	800141c <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013d4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a12      	ldr	r2, [pc, #72]	; (800142c <HAL_ADC_Start+0x184>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d002      	beq.n	80013ec <HAL_ADC_Start+0x144>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	e000      	b.n	80013ee <HAL_ADC_Start+0x146>
 80013ec:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <HAL_ADC_Start+0x180>)
 80013ee:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d00f      	beq.n	800141c <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001400:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001404:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	655a      	str	r2, [r3, #84]	; 0x54
 800140c:	e006      	b.n	800141c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2200      	movs	r2, #0
 8001412:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001416:	e001      	b.n	800141c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001418:	2302      	movs	r3, #2
 800141a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800141c:	7dfb      	ldrb	r3, [r7, #23]
}
 800141e:	4618      	mov	r0, r3
 8001420:	3718      	adds	r7, #24
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40022000 	.word	0x40022000
 800142c:	40022100 	.word	0x40022100
 8001430:	40022300 	.word	0x40022300
 8001434:	58026300 	.word	0x58026300
 8001438:	fffff0fe 	.word	0xfffff0fe

0800143c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b088      	sub	sp, #32
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a72      	ldr	r2, [pc, #456]	; (8001614 <HAL_ADC_PollForConversion+0x1d8>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d004      	beq.n	800145a <HAL_ADC_PollForConversion+0x1e>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a70      	ldr	r2, [pc, #448]	; (8001618 <HAL_ADC_PollForConversion+0x1dc>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d101      	bne.n	800145e <HAL_ADC_PollForConversion+0x22>
 800145a:	4b70      	ldr	r3, [pc, #448]	; (800161c <HAL_ADC_PollForConversion+0x1e0>)
 800145c:	e000      	b.n	8001460 <HAL_ADC_PollForConversion+0x24>
 800145e:	4b70      	ldr	r3, [pc, #448]	; (8001620 <HAL_ADC_PollForConversion+0x1e4>)
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff fcb5 	bl	8000dd0 <LL_ADC_GetMultimode>
 8001466:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	691b      	ldr	r3, [r3, #16]
 800146c:	2b08      	cmp	r3, #8
 800146e:	d102      	bne.n	8001476 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001470:	2308      	movs	r3, #8
 8001472:	61fb      	str	r3, [r7, #28]
 8001474:	e037      	b.n	80014e6 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d005      	beq.n	8001488 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	2b05      	cmp	r3, #5
 8001480:	d002      	beq.n	8001488 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	2b09      	cmp	r3, #9
 8001486:	d111      	bne.n	80014ac <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	2b00      	cmp	r3, #0
 8001494:	d007      	beq.n	80014a6 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800149a:	f043 0220 	orr.w	r2, r3, #32
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e0b1      	b.n	800160a <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80014a6:	2304      	movs	r3, #4
 80014a8:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80014aa:	e01c      	b.n	80014e6 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a58      	ldr	r2, [pc, #352]	; (8001614 <HAL_ADC_PollForConversion+0x1d8>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d004      	beq.n	80014c0 <HAL_ADC_PollForConversion+0x84>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a57      	ldr	r2, [pc, #348]	; (8001618 <HAL_ADC_PollForConversion+0x1dc>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d101      	bne.n	80014c4 <HAL_ADC_PollForConversion+0x88>
 80014c0:	4b56      	ldr	r3, [pc, #344]	; (800161c <HAL_ADC_PollForConversion+0x1e0>)
 80014c2:	e000      	b.n	80014c6 <HAL_ADC_PollForConversion+0x8a>
 80014c4:	4b56      	ldr	r3, [pc, #344]	; (8001620 <HAL_ADC_PollForConversion+0x1e4>)
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff fc90 	bl	8000dec <LL_ADC_GetMultiDMATransfer>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d007      	beq.n	80014e2 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014d6:	f043 0220 	orr.w	r2, r3, #32
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e093      	b.n	800160a <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80014e2:	2304      	movs	r3, #4
 80014e4:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80014e6:	f7ff faf7 	bl	8000ad8 <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80014ec:	e021      	b.n	8001532 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014f4:	d01d      	beq.n	8001532 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80014f6:	f7ff faef 	bl	8000ad8 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	429a      	cmp	r2, r3
 8001504:	d302      	bcc.n	800150c <HAL_ADC_PollForConversion+0xd0>
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d112      	bne.n	8001532 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	4013      	ands	r3, r2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d10b      	bne.n	8001532 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800151e:	f043 0204 	orr.w	r2, r3, #4
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e06b      	b.n	800160a <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	4013      	ands	r3, r2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d0d6      	beq.n	80014ee <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001544:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff fb9b 	bl	8000c8c <LL_ADC_REG_IsTriggerSourceSWStart>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d01c      	beq.n	8001596 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	7d5b      	ldrb	r3, [r3, #21]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d118      	bne.n	8001596 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0308 	and.w	r3, r3, #8
 800156e:	2b08      	cmp	r3, #8
 8001570:	d111      	bne.n	8001596 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001576:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001582:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d105      	bne.n	8001596 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800158e:	f043 0201 	orr.w	r2, r3, #1
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a1f      	ldr	r2, [pc, #124]	; (8001618 <HAL_ADC_PollForConversion+0x1dc>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d002      	beq.n	80015a6 <HAL_ADC_PollForConversion+0x16a>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	e000      	b.n	80015a8 <HAL_ADC_PollForConversion+0x16c>
 80015a6:	4b1b      	ldr	r3, [pc, #108]	; (8001614 <HAL_ADC_PollForConversion+0x1d8>)
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	6812      	ldr	r2, [r2, #0]
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d008      	beq.n	80015c2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d005      	beq.n	80015c2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	2b05      	cmp	r3, #5
 80015ba:	d002      	beq.n	80015c2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	2b09      	cmp	r3, #9
 80015c0:	d104      	bne.n	80015cc <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	61bb      	str	r3, [r7, #24]
 80015ca:	e00c      	b.n	80015e6 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a11      	ldr	r2, [pc, #68]	; (8001618 <HAL_ADC_PollForConversion+0x1dc>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d002      	beq.n	80015dc <HAL_ADC_PollForConversion+0x1a0>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	e000      	b.n	80015de <HAL_ADC_PollForConversion+0x1a2>
 80015dc:	4b0d      	ldr	r3, [pc, #52]	; (8001614 <HAL_ADC_PollForConversion+0x1d8>)
 80015de:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	2b08      	cmp	r3, #8
 80015ea:	d104      	bne.n	80015f6 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2208      	movs	r2, #8
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	e008      	b.n	8001608 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d103      	bne.n	8001608 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	220c      	movs	r2, #12
 8001606:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3720      	adds	r7, #32
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40022000 	.word	0x40022000
 8001618:	40022100 	.word	0x40022100
 800161c:	40022300 	.word	0x40022300
 8001620:	58026300 	.word	0x58026300

08001624 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001632:	4618      	mov	r0, r3
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
	...

08001640 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08a      	sub	sp, #40	; 0x28
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001648:	2300      	movs	r3, #0
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a87      	ldr	r2, [pc, #540]	; (8001880 <HAL_ADC_IRQHandler+0x240>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d004      	beq.n	8001670 <HAL_ADC_IRQHandler+0x30>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a86      	ldr	r2, [pc, #536]	; (8001884 <HAL_ADC_IRQHandler+0x244>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d101      	bne.n	8001674 <HAL_ADC_IRQHandler+0x34>
 8001670:	4b85      	ldr	r3, [pc, #532]	; (8001888 <HAL_ADC_IRQHandler+0x248>)
 8001672:	e000      	b.n	8001676 <HAL_ADC_IRQHandler+0x36>
 8001674:	4b85      	ldr	r3, [pc, #532]	; (800188c <HAL_ADC_IRQHandler+0x24c>)
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff fbaa 	bl	8000dd0 <LL_ADC_GetMultimode>
 800167c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d017      	beq.n	80016b8 <HAL_ADC_IRQHandler+0x78>
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d012      	beq.n	80016b8 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001696:	f003 0310 	and.w	r3, r3, #16
 800169a:	2b00      	cmp	r3, #0
 800169c:	d105      	bne.n	80016aa <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016a2:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f000 ff52 	bl	8002554 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2202      	movs	r2, #2
 80016b6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	f003 0304 	and.w	r3, r3, #4
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d004      	beq.n	80016cc <HAL_ADC_IRQHandler+0x8c>
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	f003 0304 	and.w	r3, r3, #4
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d10a      	bne.n	80016e2 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f000 8083 	beq.w	80017de <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	f003 0308 	and.w	r3, r3, #8
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d07d      	beq.n	80017de <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016e6:	f003 0310 	and.w	r3, r3, #16
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d105      	bne.n	80016fa <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016f2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff fac4 	bl	8000c8c <LL_ADC_REG_IsTriggerSourceSWStart>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d062      	beq.n	80017d0 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a5d      	ldr	r2, [pc, #372]	; (8001884 <HAL_ADC_IRQHandler+0x244>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d002      	beq.n	800171a <HAL_ADC_IRQHandler+0xda>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	e000      	b.n	800171c <HAL_ADC_IRQHandler+0xdc>
 800171a:	4b59      	ldr	r3, [pc, #356]	; (8001880 <HAL_ADC_IRQHandler+0x240>)
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	6812      	ldr	r2, [r2, #0]
 8001720:	4293      	cmp	r3, r2
 8001722:	d008      	beq.n	8001736 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d005      	beq.n	8001736 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	2b05      	cmp	r3, #5
 800172e:	d002      	beq.n	8001736 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	2b09      	cmp	r3, #9
 8001734:	d104      	bne.n	8001740 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	623b      	str	r3, [r7, #32]
 800173e:	e00c      	b.n	800175a <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a4f      	ldr	r2, [pc, #316]	; (8001884 <HAL_ADC_IRQHandler+0x244>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d002      	beq.n	8001750 <HAL_ADC_IRQHandler+0x110>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	e000      	b.n	8001752 <HAL_ADC_IRQHandler+0x112>
 8001750:	4b4b      	ldr	r3, [pc, #300]	; (8001880 <HAL_ADC_IRQHandler+0x240>)
 8001752:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800175a:	6a3b      	ldr	r3, [r7, #32]
 800175c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d135      	bne.n	80017d0 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0308 	and.w	r3, r3, #8
 800176e:	2b08      	cmp	r3, #8
 8001770:	d12e      	bne.n	80017d0 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff fbd0 	bl	8000f1c <LL_ADC_REG_IsConversionOngoing>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d11a      	bne.n	80017b8 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	685a      	ldr	r2, [r3, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f022 020c 	bic.w	r2, r2, #12
 8001790:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001796:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d112      	bne.n	80017d0 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ae:	f043 0201 	orr.w	r2, r3, #1
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	655a      	str	r2, [r3, #84]	; 0x54
 80017b6:	e00b      	b.n	80017d0 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017bc:	f043 0210 	orr.w	r2, r3, #16
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c8:	f043 0201 	orr.w	r2, r3, #1
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f000 f96f 	bl	8001ab4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	220c      	movs	r2, #12
 80017dc:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	f003 0320 	and.w	r3, r3, #32
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d004      	beq.n	80017f2 <HAL_ADC_IRQHandler+0x1b2>
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	f003 0320 	and.w	r3, r3, #32
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d10b      	bne.n	800180a <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	f000 80a0 	beq.w	800193e <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001804:	2b00      	cmp	r3, #0
 8001806:	f000 809a 	beq.w	800193e <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800180e:	f003 0310 	and.w	r3, r3, #16
 8001812:	2b00      	cmp	r3, #0
 8001814:	d105      	bne.n	8001822 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800181a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff fa6f 	bl	8000d0a <LL_ADC_INJ_IsTriggerSourceSWStart>
 800182c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff fa2a 	bl	8000c8c <LL_ADC_REG_IsTriggerSourceSWStart>
 8001838:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a11      	ldr	r2, [pc, #68]	; (8001884 <HAL_ADC_IRQHandler+0x244>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d002      	beq.n	800184a <HAL_ADC_IRQHandler+0x20a>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	e000      	b.n	800184c <HAL_ADC_IRQHandler+0x20c>
 800184a:	4b0d      	ldr	r3, [pc, #52]	; (8001880 <HAL_ADC_IRQHandler+0x240>)
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	6812      	ldr	r2, [r2, #0]
 8001850:	4293      	cmp	r3, r2
 8001852:	d008      	beq.n	8001866 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d005      	beq.n	8001866 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	2b06      	cmp	r3, #6
 800185e:	d002      	beq.n	8001866 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	2b07      	cmp	r3, #7
 8001864:	d104      	bne.n	8001870 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	623b      	str	r3, [r7, #32]
 800186e:	e014      	b.n	800189a <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a03      	ldr	r2, [pc, #12]	; (8001884 <HAL_ADC_IRQHandler+0x244>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d00a      	beq.n	8001890 <HAL_ADC_IRQHandler+0x250>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	e008      	b.n	8001892 <HAL_ADC_IRQHandler+0x252>
 8001880:	40022000 	.word	0x40022000
 8001884:	40022100 	.word	0x40022100
 8001888:	40022300 	.word	0x40022300
 800188c:	58026300 	.word	0x58026300
 8001890:	4b84      	ldr	r3, [pc, #528]	; (8001aa4 <HAL_ADC_IRQHandler+0x464>)
 8001892:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d10c      	bne.n	80018ba <HAL_ADC_IRQHandler+0x27a>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 80018a0:	6a3b      	ldr	r3, [r7, #32]
 80018a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d142      	bne.n	8001930 <HAL_ADC_IRQHandler+0x2f0>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 80018aa:	68bb      	ldr	r3, [r7, #8]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d03f      	beq.n	8001930 <HAL_ADC_IRQHandler+0x2f0>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 80018b0:	6a3b      	ldr	r3, [r7, #32]
 80018b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d13a      	bne.n	8001930 <HAL_ADC_IRQHandler+0x2f0>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018c4:	2b40      	cmp	r3, #64	; 0x40
 80018c6:	d133      	bne.n	8001930 <HAL_ADC_IRQHandler+0x2f0>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80018c8:	6a3b      	ldr	r3, [r7, #32]
 80018ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d12e      	bne.n	8001930 <HAL_ADC_IRQHandler+0x2f0>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff fb33 	bl	8000f42 <LL_ADC_INJ_IsConversionOngoing>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d11a      	bne.n	8001918 <HAL_ADC_IRQHandler+0x2d8>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	685a      	ldr	r2, [r3, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80018f0:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001906:	2b00      	cmp	r3, #0
 8001908:	d112      	bne.n	8001930 <HAL_ADC_IRQHandler+0x2f0>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800190e:	f043 0201 	orr.w	r2, r3, #1
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	655a      	str	r2, [r3, #84]	; 0x54
 8001916:	e00b      	b.n	8001930 <HAL_ADC_IRQHandler+0x2f0>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800191c:	f043 0210 	orr.w	r2, r3, #16
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001928:	f043 0201 	orr.w	r2, r3, #1
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f000 fde7 	bl	8002504 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2260      	movs	r2, #96	; 0x60
 800193c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001944:	2b00      	cmp	r3, #0
 8001946:	d011      	beq.n	800196c <HAL_ADC_IRQHandler+0x32c>
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800194e:	2b00      	cmp	r3, #0
 8001950:	d00c      	beq.n	800196c <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001956:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f000 f8b2 	bl	8001ac8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2280      	movs	r2, #128	; 0x80
 800196a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001972:	2b00      	cmp	r3, #0
 8001974:	d012      	beq.n	800199c <HAL_ADC_IRQHandler+0x35c>
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800197c:	2b00      	cmp	r3, #0
 800197e:	d00d      	beq.n	800199c <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001984:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f000 fdcd 	bl	800252c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f44f 7280 	mov.w	r2, #256	; 0x100
 800199a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d012      	beq.n	80019cc <HAL_ADC_IRQHandler+0x38c>
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d00d      	beq.n	80019cc <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019b4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f000 fdbf 	bl	8002540 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019ca:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	f003 0310 	and.w	r3, r3, #16
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d043      	beq.n	8001a5e <HAL_ADC_IRQHandler+0x41e>
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	f003 0310 	and.w	r3, r3, #16
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d03e      	beq.n	8001a5e <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d102      	bne.n	80019ee <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 80019e8:	2301      	movs	r3, #1
 80019ea:	627b      	str	r3, [r7, #36]	; 0x24
 80019ec:	e021      	b.n	8001a32 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d015      	beq.n	8001a20 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a2a      	ldr	r2, [pc, #168]	; (8001aa4 <HAL_ADC_IRQHandler+0x464>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d004      	beq.n	8001a08 <HAL_ADC_IRQHandler+0x3c8>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a29      	ldr	r2, [pc, #164]	; (8001aa8 <HAL_ADC_IRQHandler+0x468>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d101      	bne.n	8001a0c <HAL_ADC_IRQHandler+0x3cc>
 8001a08:	4b28      	ldr	r3, [pc, #160]	; (8001aac <HAL_ADC_IRQHandler+0x46c>)
 8001a0a:	e000      	b.n	8001a0e <HAL_ADC_IRQHandler+0x3ce>
 8001a0c:	4b28      	ldr	r3, [pc, #160]	; (8001ab0 <HAL_ADC_IRQHandler+0x470>)
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff f9ec 	bl	8000dec <LL_ADC_GetMultiDMATransfer>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d00b      	beq.n	8001a32 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a1e:	e008      	b.n	8001a32 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	f003 0303 	and.w	r3, r3, #3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d10e      	bne.n	8001a56 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a3c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a48:	f043 0202 	orr.w	r2, r3, #2
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f000 f843 	bl	8001adc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2210      	movs	r2, #16
 8001a5c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d018      	beq.n	8001a9a <HAL_ADC_IRQHandler+0x45a>
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d013      	beq.n	8001a9a <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a76:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a82:	f043 0208 	orr.w	r2, r3, #8
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a92:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f000 fd3f 	bl	8002518 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001a9a:	bf00      	nop
 8001a9c:	3728      	adds	r7, #40	; 0x28
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40022000 	.word	0x40022000
 8001aa8:	40022100 	.word	0x40022100
 8001aac:	40022300 	.word	0x40022300
 8001ab0:	58026300 	.word	0x58026300

08001ab4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001af0:	b590      	push	{r4, r7, lr}
 8001af2:	b0a1      	sub	sp, #132	; 0x84
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001afa:	2300      	movs	r3, #0
 8001afc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001b00:	2300      	movs	r3, #0
 8001b02:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	4a9d      	ldr	r2, [pc, #628]	; (8001d80 <HAL_ADC_ConfigChannel+0x290>)
 8001b0a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d101      	bne.n	8001b1a <HAL_ADC_ConfigChannel+0x2a>
 8001b16:	2302      	movs	r3, #2
 8001b18:	e321      	b.n	800215e <HAL_ADC_ConfigChannel+0x66e>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff f9f8 	bl	8000f1c <LL_ADC_REG_IsConversionOngoing>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f040 8306 	bne.w	8002140 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d108      	bne.n	8001b52 <HAL_ADC_ConfigChannel+0x62>
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	0e9b      	lsrs	r3, r3, #26
 8001b46:	f003 031f 	and.w	r3, r3, #31
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	e016      	b.n	8001b80 <HAL_ADC_ConfigChannel+0x90>
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b5a:	fa93 f3a3 	rbit	r3, r3
 8001b5e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001b62:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001b64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8001b6a:	2320      	movs	r3, #32
 8001b6c:	e003      	b.n	8001b76 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8001b6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001b70:	fab3 f383 	clz	r3, r3
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	f003 031f 	and.w	r3, r3, #31
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	6812      	ldr	r2, [r2, #0]
 8001b84:	69d1      	ldr	r1, [r2, #28]
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	6812      	ldr	r2, [r2, #0]
 8001b8a:	430b      	orrs	r3, r1
 8001b8c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6818      	ldr	r0, [r3, #0]
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	6859      	ldr	r1, [r3, #4]
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	f7ff f889 	bl	8000cb2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff f9b9 	bl	8000f1c <LL_ADC_REG_IsConversionOngoing>
 8001baa:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff f9c6 	bl	8000f42 <LL_ADC_INJ_IsConversionOngoing>
 8001bb6:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f040 80b3 	bne.w	8001d26 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001bc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f040 80af 	bne.w	8001d26 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6818      	ldr	r0, [r3, #0]
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	6819      	ldr	r1, [r3, #0]
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	f7ff f8ab 	bl	8000d30 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001bda:	4b6a      	ldr	r3, [pc, #424]	; (8001d84 <HAL_ADC_ConfigChannel+0x294>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001be2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001be6:	d10b      	bne.n	8001c00 <HAL_ADC_ConfigChannel+0x110>
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	695a      	ldr	r2, [r3, #20]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	68db      	ldr	r3, [r3, #12]
 8001bf2:	089b      	lsrs	r3, r3, #2
 8001bf4:	f003 0307 	and.w	r3, r3, #7
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	e01d      	b.n	8001c3c <HAL_ADC_ConfigChannel+0x14c>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	f003 0310 	and.w	r3, r3, #16
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d10b      	bne.n	8001c26 <HAL_ADC_ConfigChannel+0x136>
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	695a      	ldr	r2, [r3, #20]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	089b      	lsrs	r3, r3, #2
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	e00a      	b.n	8001c3c <HAL_ADC_ConfigChannel+0x14c>
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	695a      	ldr	r2, [r3, #20]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	089b      	lsrs	r3, r3, #2
 8001c32:	f003 0304 	and.w	r3, r3, #4
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	2b04      	cmp	r3, #4
 8001c44:	d027      	beq.n	8001c96 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6818      	ldr	r0, [r3, #0]
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	6919      	ldr	r1, [r3, #16]
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c54:	f7fe ffc6 	bl	8000be4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6818      	ldr	r0, [r3, #0]
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	6919      	ldr	r1, [r3, #16]
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	7e5b      	ldrb	r3, [r3, #25]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d102      	bne.n	8001c6e <HAL_ADC_ConfigChannel+0x17e>
 8001c68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001c6c:	e000      	b.n	8001c70 <HAL_ADC_ConfigChannel+0x180>
 8001c6e:	2300      	movs	r3, #0
 8001c70:	461a      	mov	r2, r3
 8001c72:	f7fe fff0 	bl	8000c56 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6818      	ldr	r0, [r3, #0]
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	6919      	ldr	r1, [r3, #16]
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	7e1b      	ldrb	r3, [r3, #24]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d102      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x19c>
 8001c86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c8a:	e000      	b.n	8001c8e <HAL_ADC_ConfigChannel+0x19e>
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	461a      	mov	r2, r3
 8001c90:	f7fe ffc8 	bl	8000c24 <LL_ADC_SetDataRightShift>
 8001c94:	e047      	b.n	8001d26 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c9c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	069b      	lsls	r3, r3, #26
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d107      	bne.n	8001cba <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001cb8:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001cc0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	069b      	lsls	r3, r3, #26
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d107      	bne.n	8001cde <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001cdc:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ce4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	069b      	lsls	r3, r3, #26
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d107      	bne.n	8001d02 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d00:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d08:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	069b      	lsls	r3, r3, #26
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d107      	bne.n	8001d26 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001d24:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff f8ce 	bl	8000ecc <LL_ADC_IsEnabled>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f040 820d 	bne.w	8002152 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6818      	ldr	r0, [r3, #0]
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	6819      	ldr	r1, [r3, #0]
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	461a      	mov	r2, r3
 8001d46:	f7ff f81f 	bl	8000d88 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	4a0c      	ldr	r2, [pc, #48]	; (8001d80 <HAL_ADC_ConfigChannel+0x290>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	f040 8133 	bne.w	8001fbc <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d110      	bne.n	8001d88 <HAL_ADC_ConfigChannel+0x298>
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	0e9b      	lsrs	r3, r3, #26
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	f003 031f 	and.w	r3, r3, #31
 8001d72:	2b09      	cmp	r3, #9
 8001d74:	bf94      	ite	ls
 8001d76:	2301      	movls	r3, #1
 8001d78:	2300      	movhi	r3, #0
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	e01e      	b.n	8001dbc <HAL_ADC_ConfigChannel+0x2cc>
 8001d7e:	bf00      	nop
 8001d80:	47ff0000 	.word	0x47ff0000
 8001d84:	5c001000 	.word	0x5c001000
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d90:	fa93 f3a3 	rbit	r3, r3
 8001d94:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001d96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d98:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001d9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d101      	bne.n	8001da4 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8001da0:	2320      	movs	r3, #32
 8001da2:	e003      	b.n	8001dac <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8001da4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001da6:	fab3 f383 	clz	r3, r3
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	3301      	adds	r3, #1
 8001dae:	f003 031f 	and.w	r3, r3, #31
 8001db2:	2b09      	cmp	r3, #9
 8001db4:	bf94      	ite	ls
 8001db6:	2301      	movls	r3, #1
 8001db8:	2300      	movhi	r3, #0
 8001dba:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d079      	beq.n	8001eb4 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d107      	bne.n	8001ddc <HAL_ADC_ConfigChannel+0x2ec>
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	0e9b      	lsrs	r3, r3, #26
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	069b      	lsls	r3, r3, #26
 8001dd6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dda:	e015      	b.n	8001e08 <HAL_ADC_ConfigChannel+0x318>
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001de4:	fa93 f3a3 	rbit	r3, r3
 8001de8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001dea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dec:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001dee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d101      	bne.n	8001df8 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8001df4:	2320      	movs	r3, #32
 8001df6:	e003      	b.n	8001e00 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001df8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dfa:	fab3 f383 	clz	r3, r3
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	3301      	adds	r3, #1
 8001e02:	069b      	lsls	r3, r3, #26
 8001e04:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d109      	bne.n	8001e28 <HAL_ADC_ConfigChannel+0x338>
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	0e9b      	lsrs	r3, r3, #26
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	f003 031f 	and.w	r3, r3, #31
 8001e20:	2101      	movs	r1, #1
 8001e22:	fa01 f303 	lsl.w	r3, r1, r3
 8001e26:	e017      	b.n	8001e58 <HAL_ADC_ConfigChannel+0x368>
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e30:	fa93 f3a3 	rbit	r3, r3
 8001e34:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001e36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e38:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001e3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d101      	bne.n	8001e44 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8001e40:	2320      	movs	r3, #32
 8001e42:	e003      	b.n	8001e4c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8001e44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e46:	fab3 f383 	clz	r3, r3
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	f003 031f 	and.w	r3, r3, #31
 8001e52:	2101      	movs	r1, #1
 8001e54:	fa01 f303 	lsl.w	r3, r1, r3
 8001e58:	ea42 0103 	orr.w	r1, r2, r3
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d10a      	bne.n	8001e7e <HAL_ADC_ConfigChannel+0x38e>
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	0e9b      	lsrs	r3, r3, #26
 8001e6e:	3301      	adds	r3, #1
 8001e70:	f003 021f 	and.w	r2, r3, #31
 8001e74:	4613      	mov	r3, r2
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	4413      	add	r3, r2
 8001e7a:	051b      	lsls	r3, r3, #20
 8001e7c:	e018      	b.n	8001eb0 <HAL_ADC_ConfigChannel+0x3c0>
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e86:	fa93 f3a3 	rbit	r3, r3
 8001e8a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e8e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8001e96:	2320      	movs	r3, #32
 8001e98:	e003      	b.n	8001ea2 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8001e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e9c:	fab3 f383 	clz	r3, r3
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	f003 021f 	and.w	r2, r3, #31
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	4413      	add	r3, r2
 8001eae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001eb0:	430b      	orrs	r3, r1
 8001eb2:	e07e      	b.n	8001fb2 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d107      	bne.n	8001ed0 <HAL_ADC_ConfigChannel+0x3e0>
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	0e9b      	lsrs	r3, r3, #26
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	069b      	lsls	r3, r3, #26
 8001eca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ece:	e015      	b.n	8001efc <HAL_ADC_ConfigChannel+0x40c>
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed8:	fa93 f3a3 	rbit	r3, r3
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d101      	bne.n	8001eec <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001ee8:	2320      	movs	r3, #32
 8001eea:	e003      	b.n	8001ef4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eee:	fab3 f383 	clz	r3, r3
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	069b      	lsls	r3, r3, #26
 8001ef8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d109      	bne.n	8001f1c <HAL_ADC_ConfigChannel+0x42c>
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	0e9b      	lsrs	r3, r3, #26
 8001f0e:	3301      	adds	r3, #1
 8001f10:	f003 031f 	and.w	r3, r3, #31
 8001f14:	2101      	movs	r1, #1
 8001f16:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1a:	e017      	b.n	8001f4c <HAL_ADC_ConfigChannel+0x45c>
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	fa93 f3a3 	rbit	r3, r3
 8001f28:	61bb      	str	r3, [r7, #24]
  return result;
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001f2e:	6a3b      	ldr	r3, [r7, #32]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d101      	bne.n	8001f38 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8001f34:	2320      	movs	r3, #32
 8001f36:	e003      	b.n	8001f40 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8001f38:	6a3b      	ldr	r3, [r7, #32]
 8001f3a:	fab3 f383 	clz	r3, r3
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	3301      	adds	r3, #1
 8001f42:	f003 031f 	and.w	r3, r3, #31
 8001f46:	2101      	movs	r1, #1
 8001f48:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4c:	ea42 0103 	orr.w	r1, r2, r3
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d10d      	bne.n	8001f78 <HAL_ADC_ConfigChannel+0x488>
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	0e9b      	lsrs	r3, r3, #26
 8001f62:	3301      	adds	r3, #1
 8001f64:	f003 021f 	and.w	r2, r3, #31
 8001f68:	4613      	mov	r3, r2
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	4413      	add	r3, r2
 8001f6e:	3b1e      	subs	r3, #30
 8001f70:	051b      	lsls	r3, r3, #20
 8001f72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f76:	e01b      	b.n	8001fb0 <HAL_ADC_ConfigChannel+0x4c0>
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	fa93 f3a3 	rbit	r3, r3
 8001f84:	60fb      	str	r3, [r7, #12]
  return result;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8001f90:	2320      	movs	r3, #32
 8001f92:	e003      	b.n	8001f9c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	fab3 f383 	clz	r3, r3
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	f003 021f 	and.w	r2, r3, #31
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	4413      	add	r3, r2
 8001fa8:	3b1e      	subs	r3, #30
 8001faa:	051b      	lsls	r3, r3, #20
 8001fac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fb0:	430b      	orrs	r3, r1
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	6892      	ldr	r2, [r2, #8]
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	f7fe feba 	bl	8000d30 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	f280 80c6 	bge.w	8002152 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a67      	ldr	r2, [pc, #412]	; (8002168 <HAL_ADC_ConfigChannel+0x678>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d004      	beq.n	8001fda <HAL_ADC_ConfigChannel+0x4ea>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a65      	ldr	r2, [pc, #404]	; (800216c <HAL_ADC_ConfigChannel+0x67c>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d101      	bne.n	8001fde <HAL_ADC_ConfigChannel+0x4ee>
 8001fda:	4b65      	ldr	r3, [pc, #404]	; (8002170 <HAL_ADC_ConfigChannel+0x680>)
 8001fdc:	e000      	b.n	8001fe0 <HAL_ADC_ConfigChannel+0x4f0>
 8001fde:	4b65      	ldr	r3, [pc, #404]	; (8002174 <HAL_ADC_ConfigChannel+0x684>)
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7fe fdf1 	bl	8000bc8 <LL_ADC_GetCommonPathInternalCh>
 8001fe6:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a5e      	ldr	r2, [pc, #376]	; (8002168 <HAL_ADC_ConfigChannel+0x678>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d004      	beq.n	8001ffc <HAL_ADC_ConfigChannel+0x50c>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a5d      	ldr	r2, [pc, #372]	; (800216c <HAL_ADC_ConfigChannel+0x67c>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d10e      	bne.n	800201a <HAL_ADC_ConfigChannel+0x52a>
 8001ffc:	485a      	ldr	r0, [pc, #360]	; (8002168 <HAL_ADC_ConfigChannel+0x678>)
 8001ffe:	f7fe ff65 	bl	8000ecc <LL_ADC_IsEnabled>
 8002002:	4604      	mov	r4, r0
 8002004:	4859      	ldr	r0, [pc, #356]	; (800216c <HAL_ADC_ConfigChannel+0x67c>)
 8002006:	f7fe ff61 	bl	8000ecc <LL_ADC_IsEnabled>
 800200a:	4603      	mov	r3, r0
 800200c:	4323      	orrs	r3, r4
 800200e:	2b00      	cmp	r3, #0
 8002010:	bf0c      	ite	eq
 8002012:	2301      	moveq	r3, #1
 8002014:	2300      	movne	r3, #0
 8002016:	b2db      	uxtb	r3, r3
 8002018:	e008      	b.n	800202c <HAL_ADC_ConfigChannel+0x53c>
 800201a:	4857      	ldr	r0, [pc, #348]	; (8002178 <HAL_ADC_ConfigChannel+0x688>)
 800201c:	f7fe ff56 	bl	8000ecc <LL_ADC_IsEnabled>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	bf0c      	ite	eq
 8002026:	2301      	moveq	r3, #1
 8002028:	2300      	movne	r3, #0
 800202a:	b2db      	uxtb	r3, r3
 800202c:	2b00      	cmp	r3, #0
 800202e:	d07d      	beq.n	800212c <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a51      	ldr	r2, [pc, #324]	; (800217c <HAL_ADC_ConfigChannel+0x68c>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d130      	bne.n	800209c <HAL_ADC_ConfigChannel+0x5ac>
 800203a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800203c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d12b      	bne.n	800209c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a4b      	ldr	r2, [pc, #300]	; (8002178 <HAL_ADC_ConfigChannel+0x688>)
 800204a:	4293      	cmp	r3, r2
 800204c:	f040 8081 	bne.w	8002152 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a44      	ldr	r2, [pc, #272]	; (8002168 <HAL_ADC_ConfigChannel+0x678>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d004      	beq.n	8002064 <HAL_ADC_ConfigChannel+0x574>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a43      	ldr	r2, [pc, #268]	; (800216c <HAL_ADC_ConfigChannel+0x67c>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d101      	bne.n	8002068 <HAL_ADC_ConfigChannel+0x578>
 8002064:	4a42      	ldr	r2, [pc, #264]	; (8002170 <HAL_ADC_ConfigChannel+0x680>)
 8002066:	e000      	b.n	800206a <HAL_ADC_ConfigChannel+0x57a>
 8002068:	4a42      	ldr	r2, [pc, #264]	; (8002174 <HAL_ADC_ConfigChannel+0x684>)
 800206a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800206c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002070:	4619      	mov	r1, r3
 8002072:	4610      	mov	r0, r2
 8002074:	f7fe fd95 	bl	8000ba2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002078:	4b41      	ldr	r3, [pc, #260]	; (8002180 <HAL_ADC_ConfigChannel+0x690>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	099b      	lsrs	r3, r3, #6
 800207e:	4a41      	ldr	r2, [pc, #260]	; (8002184 <HAL_ADC_ConfigChannel+0x694>)
 8002080:	fba2 2303 	umull	r2, r3, r2, r3
 8002084:	099b      	lsrs	r3, r3, #6
 8002086:	3301      	adds	r3, #1
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800208c:	e002      	b.n	8002094 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	3b01      	subs	r3, #1
 8002092:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1f9      	bne.n	800208e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800209a:	e05a      	b.n	8002152 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a39      	ldr	r2, [pc, #228]	; (8002188 <HAL_ADC_ConfigChannel+0x698>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d11e      	bne.n	80020e4 <HAL_ADC_ConfigChannel+0x5f4>
 80020a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d119      	bne.n	80020e4 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a30      	ldr	r2, [pc, #192]	; (8002178 <HAL_ADC_ConfigChannel+0x688>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d14b      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a2a      	ldr	r2, [pc, #168]	; (8002168 <HAL_ADC_ConfigChannel+0x678>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d004      	beq.n	80020ce <HAL_ADC_ConfigChannel+0x5de>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a28      	ldr	r2, [pc, #160]	; (800216c <HAL_ADC_ConfigChannel+0x67c>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d101      	bne.n	80020d2 <HAL_ADC_ConfigChannel+0x5e2>
 80020ce:	4a28      	ldr	r2, [pc, #160]	; (8002170 <HAL_ADC_ConfigChannel+0x680>)
 80020d0:	e000      	b.n	80020d4 <HAL_ADC_ConfigChannel+0x5e4>
 80020d2:	4a28      	ldr	r2, [pc, #160]	; (8002174 <HAL_ADC_ConfigChannel+0x684>)
 80020d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020da:	4619      	mov	r1, r3
 80020dc:	4610      	mov	r0, r2
 80020de:	f7fe fd60 	bl	8000ba2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80020e2:	e036      	b.n	8002152 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a28      	ldr	r2, [pc, #160]	; (800218c <HAL_ADC_ConfigChannel+0x69c>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d131      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x662>
 80020ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d12c      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a1e      	ldr	r2, [pc, #120]	; (8002178 <HAL_ADC_ConfigChannel+0x688>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d127      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a18      	ldr	r2, [pc, #96]	; (8002168 <HAL_ADC_ConfigChannel+0x678>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d004      	beq.n	8002116 <HAL_ADC_ConfigChannel+0x626>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a16      	ldr	r2, [pc, #88]	; (800216c <HAL_ADC_ConfigChannel+0x67c>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d101      	bne.n	800211a <HAL_ADC_ConfigChannel+0x62a>
 8002116:	4a16      	ldr	r2, [pc, #88]	; (8002170 <HAL_ADC_ConfigChannel+0x680>)
 8002118:	e000      	b.n	800211c <HAL_ADC_ConfigChannel+0x62c>
 800211a:	4a16      	ldr	r2, [pc, #88]	; (8002174 <HAL_ADC_ConfigChannel+0x684>)
 800211c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800211e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002122:	4619      	mov	r1, r3
 8002124:	4610      	mov	r0, r2
 8002126:	f7fe fd3c 	bl	8000ba2 <LL_ADC_SetCommonPathInternalCh>
 800212a:	e012      	b.n	8002152 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002130:	f043 0220 	orr.w	r2, r3, #32
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800213e:	e008      	b.n	8002152 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002144:	f043 0220 	orr.w	r2, r3, #32
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800215a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800215e:	4618      	mov	r0, r3
 8002160:	3784      	adds	r7, #132	; 0x84
 8002162:	46bd      	mov	sp, r7
 8002164:	bd90      	pop	{r4, r7, pc}
 8002166:	bf00      	nop
 8002168:	40022000 	.word	0x40022000
 800216c:	40022100 	.word	0x40022100
 8002170:	40022300 	.word	0x40022300
 8002174:	58026300 	.word	0x58026300
 8002178:	58026000 	.word	0x58026000
 800217c:	cb840000 	.word	0xcb840000
 8002180:	24000000 	.word	0x24000000
 8002184:	053e2d63 	.word	0x053e2d63
 8002188:	c7520000 	.word	0xc7520000
 800218c:	cfb80000 	.word	0xcfb80000

08002190 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4618      	mov	r0, r3
 800219e:	f7fe fe95 	bl	8000ecc <LL_ADC_IsEnabled>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d16e      	bne.n	8002286 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	689a      	ldr	r2, [r3, #8]
 80021ae:	4b38      	ldr	r3, [pc, #224]	; (8002290 <ADC_Enable+0x100>)
 80021b0:	4013      	ands	r3, r2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00d      	beq.n	80021d2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ba:	f043 0210 	orr.w	r2, r3, #16
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c6:	f043 0201 	orr.w	r2, r3, #1
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e05a      	b.n	8002288 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7fe fe64 	bl	8000ea4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80021dc:	f7fe fc7c 	bl	8000ad8 <HAL_GetTick>
 80021e0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a2b      	ldr	r2, [pc, #172]	; (8002294 <ADC_Enable+0x104>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d004      	beq.n	80021f6 <ADC_Enable+0x66>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a29      	ldr	r2, [pc, #164]	; (8002298 <ADC_Enable+0x108>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d101      	bne.n	80021fa <ADC_Enable+0x6a>
 80021f6:	4b29      	ldr	r3, [pc, #164]	; (800229c <ADC_Enable+0x10c>)
 80021f8:	e000      	b.n	80021fc <ADC_Enable+0x6c>
 80021fa:	4b29      	ldr	r3, [pc, #164]	; (80022a0 <ADC_Enable+0x110>)
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7fe fde7 	bl	8000dd0 <LL_ADC_GetMultimode>
 8002202:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a23      	ldr	r2, [pc, #140]	; (8002298 <ADC_Enable+0x108>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d002      	beq.n	8002214 <ADC_Enable+0x84>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	e000      	b.n	8002216 <ADC_Enable+0x86>
 8002214:	4b1f      	ldr	r3, [pc, #124]	; (8002294 <ADC_Enable+0x104>)
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	6812      	ldr	r2, [r2, #0]
 800221a:	4293      	cmp	r3, r2
 800221c:	d02c      	beq.n	8002278 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d130      	bne.n	8002286 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002224:	e028      	b.n	8002278 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f7fe fe4e 	bl	8000ecc <LL_ADC_IsEnabled>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d104      	bne.n	8002240 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4618      	mov	r0, r3
 800223c:	f7fe fe32 	bl	8000ea4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002240:	f7fe fc4a 	bl	8000ad8 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d914      	bls.n	8002278 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0301 	and.w	r3, r3, #1
 8002258:	2b01      	cmp	r3, #1
 800225a:	d00d      	beq.n	8002278 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002260:	f043 0210 	orr.w	r2, r3, #16
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226c:	f043 0201 	orr.w	r2, r3, #1
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e007      	b.n	8002288 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b01      	cmp	r3, #1
 8002284:	d1cf      	bne.n	8002226 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3710      	adds	r7, #16
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	8000003f 	.word	0x8000003f
 8002294:	40022000 	.word	0x40022000
 8002298:	40022100 	.word	0x40022100
 800229c:	40022300 	.word	0x40022300
 80022a0:	58026300 	.word	0x58026300

080022a4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a79      	ldr	r2, [pc, #484]	; (8002498 <ADC_ConfigureBoostMode+0x1f4>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d004      	beq.n	80022c0 <ADC_ConfigureBoostMode+0x1c>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a78      	ldr	r2, [pc, #480]	; (800249c <ADC_ConfigureBoostMode+0x1f8>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d109      	bne.n	80022d4 <ADC_ConfigureBoostMode+0x30>
 80022c0:	4b77      	ldr	r3, [pc, #476]	; (80024a0 <ADC_ConfigureBoostMode+0x1fc>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	bf14      	ite	ne
 80022cc:	2301      	movne	r3, #1
 80022ce:	2300      	moveq	r3, #0
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	e008      	b.n	80022e6 <ADC_ConfigureBoostMode+0x42>
 80022d4:	4b73      	ldr	r3, [pc, #460]	; (80024a4 <ADC_ConfigureBoostMode+0x200>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	bf14      	ite	ne
 80022e0:	2301      	movne	r3, #1
 80022e2:	2300      	moveq	r3, #0
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d01c      	beq.n	8002324 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80022ea:	f003 f999 	bl	8005620 <HAL_RCC_GetHCLKFreq>
 80022ee:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80022f8:	d010      	beq.n	800231c <ADC_ConfigureBoostMode+0x78>
 80022fa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80022fe:	d871      	bhi.n	80023e4 <ADC_ConfigureBoostMode+0x140>
 8002300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002304:	d002      	beq.n	800230c <ADC_ConfigureBoostMode+0x68>
 8002306:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800230a:	d16b      	bne.n	80023e4 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	0c1b      	lsrs	r3, r3, #16
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	fbb2 f3f3 	udiv	r3, r2, r3
 8002318:	60fb      	str	r3, [r7, #12]
        break;
 800231a:	e066      	b.n	80023ea <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	089b      	lsrs	r3, r3, #2
 8002320:	60fb      	str	r3, [r7, #12]
        break;
 8002322:	e062      	b.n	80023ea <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002324:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002328:	f004 f91a 	bl	8006560 <HAL_RCCEx_GetPeriphCLKFreq>
 800232c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002336:	d051      	beq.n	80023dc <ADC_ConfigureBoostMode+0x138>
 8002338:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800233c:	d854      	bhi.n	80023e8 <ADC_ConfigureBoostMode+0x144>
 800233e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002342:	d047      	beq.n	80023d4 <ADC_ConfigureBoostMode+0x130>
 8002344:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002348:	d84e      	bhi.n	80023e8 <ADC_ConfigureBoostMode+0x144>
 800234a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800234e:	d03d      	beq.n	80023cc <ADC_ConfigureBoostMode+0x128>
 8002350:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002354:	d848      	bhi.n	80023e8 <ADC_ConfigureBoostMode+0x144>
 8002356:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800235a:	d033      	beq.n	80023c4 <ADC_ConfigureBoostMode+0x120>
 800235c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002360:	d842      	bhi.n	80023e8 <ADC_ConfigureBoostMode+0x144>
 8002362:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002366:	d029      	beq.n	80023bc <ADC_ConfigureBoostMode+0x118>
 8002368:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800236c:	d83c      	bhi.n	80023e8 <ADC_ConfigureBoostMode+0x144>
 800236e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002372:	d01a      	beq.n	80023aa <ADC_ConfigureBoostMode+0x106>
 8002374:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002378:	d836      	bhi.n	80023e8 <ADC_ConfigureBoostMode+0x144>
 800237a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800237e:	d014      	beq.n	80023aa <ADC_ConfigureBoostMode+0x106>
 8002380:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002384:	d830      	bhi.n	80023e8 <ADC_ConfigureBoostMode+0x144>
 8002386:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800238a:	d00e      	beq.n	80023aa <ADC_ConfigureBoostMode+0x106>
 800238c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002390:	d82a      	bhi.n	80023e8 <ADC_ConfigureBoostMode+0x144>
 8002392:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002396:	d008      	beq.n	80023aa <ADC_ConfigureBoostMode+0x106>
 8002398:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800239c:	d824      	bhi.n	80023e8 <ADC_ConfigureBoostMode+0x144>
 800239e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80023a2:	d002      	beq.n	80023aa <ADC_ConfigureBoostMode+0x106>
 80023a4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80023a8:	d11e      	bne.n	80023e8 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	0c9b      	lsrs	r3, r3, #18
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b8:	60fb      	str	r3, [r7, #12]
        break;
 80023ba:	e016      	b.n	80023ea <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	091b      	lsrs	r3, r3, #4
 80023c0:	60fb      	str	r3, [r7, #12]
        break;
 80023c2:	e012      	b.n	80023ea <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	095b      	lsrs	r3, r3, #5
 80023c8:	60fb      	str	r3, [r7, #12]
        break;
 80023ca:	e00e      	b.n	80023ea <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	099b      	lsrs	r3, r3, #6
 80023d0:	60fb      	str	r3, [r7, #12]
        break;
 80023d2:	e00a      	b.n	80023ea <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	09db      	lsrs	r3, r3, #7
 80023d8:	60fb      	str	r3, [r7, #12]
        break;
 80023da:	e006      	b.n	80023ea <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	0a1b      	lsrs	r3, r3, #8
 80023e0:	60fb      	str	r3, [r7, #12]
        break;
 80023e2:	e002      	b.n	80023ea <ADC_ConfigureBoostMode+0x146>
        break;
 80023e4:	bf00      	nop
 80023e6:	e000      	b.n	80023ea <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80023e8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80023ea:	f7fe fba5 	bl	8000b38 <HAL_GetREVID>
 80023ee:	4603      	mov	r3, r0
 80023f0:	f241 0203 	movw	r2, #4099	; 0x1003
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d815      	bhi.n	8002424 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	4a2b      	ldr	r2, [pc, #172]	; (80024a8 <ADC_ConfigureBoostMode+0x204>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d908      	bls.n	8002412 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	689a      	ldr	r2, [r3, #8]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800240e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002410:	e03e      	b.n	8002490 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002420:	609a      	str	r2, [r3, #8]
}
 8002422:	e035      	b.n	8002490 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	085b      	lsrs	r3, r3, #1
 8002428:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	4a1f      	ldr	r2, [pc, #124]	; (80024ac <ADC_ConfigureBoostMode+0x208>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d808      	bhi.n	8002444 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	689a      	ldr	r2, [r3, #8]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002440:	609a      	str	r2, [r3, #8]
}
 8002442:	e025      	b.n	8002490 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	4a1a      	ldr	r2, [pc, #104]	; (80024b0 <ADC_ConfigureBoostMode+0x20c>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d80a      	bhi.n	8002462 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800245e:	609a      	str	r2, [r3, #8]
}
 8002460:	e016      	b.n	8002490 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	4a13      	ldr	r2, [pc, #76]	; (80024b4 <ADC_ConfigureBoostMode+0x210>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d80a      	bhi.n	8002480 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800247c:	609a      	str	r2, [r3, #8]
}
 800247e:	e007      	b.n	8002490 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	689a      	ldr	r2, [r3, #8]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800248e:	609a      	str	r2, [r3, #8]
}
 8002490:	bf00      	nop
 8002492:	3710      	adds	r7, #16
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40022000 	.word	0x40022000
 800249c:	40022100 	.word	0x40022100
 80024a0:	40022300 	.word	0x40022300
 80024a4:	58026300 	.word	0x58026300
 80024a8:	01312d00 	.word	0x01312d00
 80024ac:	005f5e10 	.word	0x005f5e10
 80024b0:	00bebc20 	.word	0x00bebc20
 80024b4:	017d7840 	.word	0x017d7840

080024b8 <LL_ADC_IsEnabled>:
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d101      	bne.n	80024d0 <LL_ADC_IsEnabled+0x18>
 80024cc:	2301      	movs	r3, #1
 80024ce:	e000      	b.n	80024d2 <LL_ADC_IsEnabled+0x1a>
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <LL_ADC_REG_IsConversionOngoing>:
{
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 0304 	and.w	r3, r3, #4
 80024ee:	2b04      	cmp	r3, #4
 80024f0:	d101      	bne.n	80024f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80024f2:	2301      	movs	r3, #1
 80024f4:	e000      	b.n	80024f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002568:	b590      	push	{r4, r7, lr}
 800256a:	b09f      	sub	sp, #124	; 0x7c
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002572:	2300      	movs	r3, #0
 8002574:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800257e:	2b01      	cmp	r3, #1
 8002580:	d101      	bne.n	8002586 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002582:	2302      	movs	r3, #2
 8002584:	e0be      	b.n	8002704 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2201      	movs	r2, #1
 800258a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800258e:	2300      	movs	r3, #0
 8002590:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002592:	2300      	movs	r3, #0
 8002594:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a5c      	ldr	r2, [pc, #368]	; (800270c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d102      	bne.n	80025a6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80025a0:	4b5b      	ldr	r3, [pc, #364]	; (8002710 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80025a2:	60bb      	str	r3, [r7, #8]
 80025a4:	e001      	b.n	80025aa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80025a6:	2300      	movs	r3, #0
 80025a8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d10b      	bne.n	80025c8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b4:	f043 0220 	orr.w	r2, r3, #32
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e09d      	b.n	8002704 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff ff87 	bl	80024de <LL_ADC_REG_IsConversionOngoing>
 80025d0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7ff ff81 	bl	80024de <LL_ADC_REG_IsConversionOngoing>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d17f      	bne.n	80026e2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80025e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d17c      	bne.n	80026e2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a47      	ldr	r2, [pc, #284]	; (800270c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d004      	beq.n	80025fc <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a46      	ldr	r2, [pc, #280]	; (8002710 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d101      	bne.n	8002600 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80025fc:	4b45      	ldr	r3, [pc, #276]	; (8002714 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80025fe:	e000      	b.n	8002602 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002600:	4b45      	ldr	r3, [pc, #276]	; (8002718 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002602:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d039      	beq.n	8002680 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800260c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	431a      	orrs	r2, r3
 800261a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800261c:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a3a      	ldr	r2, [pc, #232]	; (800270c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d004      	beq.n	8002632 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a38      	ldr	r2, [pc, #224]	; (8002710 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d10e      	bne.n	8002650 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002632:	4836      	ldr	r0, [pc, #216]	; (800270c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002634:	f7ff ff40 	bl	80024b8 <LL_ADC_IsEnabled>
 8002638:	4604      	mov	r4, r0
 800263a:	4835      	ldr	r0, [pc, #212]	; (8002710 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800263c:	f7ff ff3c 	bl	80024b8 <LL_ADC_IsEnabled>
 8002640:	4603      	mov	r3, r0
 8002642:	4323      	orrs	r3, r4
 8002644:	2b00      	cmp	r3, #0
 8002646:	bf0c      	ite	eq
 8002648:	2301      	moveq	r3, #1
 800264a:	2300      	movne	r3, #0
 800264c:	b2db      	uxtb	r3, r3
 800264e:	e008      	b.n	8002662 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002650:	4832      	ldr	r0, [pc, #200]	; (800271c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002652:	f7ff ff31 	bl	80024b8 <LL_ADC_IsEnabled>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	bf0c      	ite	eq
 800265c:	2301      	moveq	r3, #1
 800265e:	2300      	movne	r3, #0
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d047      	beq.n	80026f6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002668:	689a      	ldr	r2, [r3, #8]
 800266a:	4b2d      	ldr	r3, [pc, #180]	; (8002720 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800266c:	4013      	ands	r3, r2
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	6811      	ldr	r1, [r2, #0]
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	6892      	ldr	r2, [r2, #8]
 8002676:	430a      	orrs	r2, r1
 8002678:	431a      	orrs	r2, r3
 800267a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800267c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800267e:	e03a      	b.n	80026f6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002680:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002688:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800268a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a1e      	ldr	r2, [pc, #120]	; (800270c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d004      	beq.n	80026a0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a1d      	ldr	r2, [pc, #116]	; (8002710 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d10e      	bne.n	80026be <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80026a0:	481a      	ldr	r0, [pc, #104]	; (800270c <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80026a2:	f7ff ff09 	bl	80024b8 <LL_ADC_IsEnabled>
 80026a6:	4604      	mov	r4, r0
 80026a8:	4819      	ldr	r0, [pc, #100]	; (8002710 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80026aa:	f7ff ff05 	bl	80024b8 <LL_ADC_IsEnabled>
 80026ae:	4603      	mov	r3, r0
 80026b0:	4323      	orrs	r3, r4
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	bf0c      	ite	eq
 80026b6:	2301      	moveq	r3, #1
 80026b8:	2300      	movne	r3, #0
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	e008      	b.n	80026d0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80026be:	4817      	ldr	r0, [pc, #92]	; (800271c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80026c0:	f7ff fefa 	bl	80024b8 <LL_ADC_IsEnabled>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	bf0c      	ite	eq
 80026ca:	2301      	moveq	r3, #1
 80026cc:	2300      	movne	r3, #0
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d010      	beq.n	80026f6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80026d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	4b11      	ldr	r3, [pc, #68]	; (8002720 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80026da:	4013      	ands	r3, r2
 80026dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80026de:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80026e0:	e009      	b.n	80026f6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e6:	f043 0220 	orr.w	r2, r3, #32
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80026f4:	e000      	b.n	80026f8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80026f6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002700:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002704:	4618      	mov	r0, r3
 8002706:	377c      	adds	r7, #124	; 0x7c
 8002708:	46bd      	mov	sp, r7
 800270a:	bd90      	pop	{r4, r7, pc}
 800270c:	40022000 	.word	0x40022000
 8002710:	40022100 	.word	0x40022100
 8002714:	40022300 	.word	0x40022300
 8002718:	58026300 	.word	0x58026300
 800271c:	58026000 	.word	0x58026000
 8002720:	fffff0e0 	.word	0xfffff0e0

08002724 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f003 0307 	and.w	r3, r3, #7
 8002732:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002734:	4b0b      	ldr	r3, [pc, #44]	; (8002764 <__NVIC_SetPriorityGrouping+0x40>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002740:	4013      	ands	r3, r2
 8002742:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800274c:	4b06      	ldr	r3, [pc, #24]	; (8002768 <__NVIC_SetPriorityGrouping+0x44>)
 800274e:	4313      	orrs	r3, r2
 8002750:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002752:	4a04      	ldr	r2, [pc, #16]	; (8002764 <__NVIC_SetPriorityGrouping+0x40>)
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	60d3      	str	r3, [r2, #12]
}
 8002758:	bf00      	nop
 800275a:	3714      	adds	r7, #20
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	e000ed00 	.word	0xe000ed00
 8002768:	05fa0000 	.word	0x05fa0000

0800276c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002770:	4b04      	ldr	r3, [pc, #16]	; (8002784 <__NVIC_GetPriorityGrouping+0x18>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	0a1b      	lsrs	r3, r3, #8
 8002776:	f003 0307 	and.w	r3, r3, #7
}
 800277a:	4618      	mov	r0, r3
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr
 8002784:	e000ed00 	.word	0xe000ed00

08002788 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	4603      	mov	r3, r0
 8002790:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002792:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002796:	2b00      	cmp	r3, #0
 8002798:	db0b      	blt.n	80027b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800279a:	88fb      	ldrh	r3, [r7, #6]
 800279c:	f003 021f 	and.w	r2, r3, #31
 80027a0:	4907      	ldr	r1, [pc, #28]	; (80027c0 <__NVIC_EnableIRQ+0x38>)
 80027a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027a6:	095b      	lsrs	r3, r3, #5
 80027a8:	2001      	movs	r0, #1
 80027aa:	fa00 f202 	lsl.w	r2, r0, r2
 80027ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027b2:	bf00      	nop
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	e000e100 	.word	0xe000e100

080027c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	6039      	str	r1, [r7, #0]
 80027ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80027d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	db0a      	blt.n	80027ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	b2da      	uxtb	r2, r3
 80027dc:	490c      	ldr	r1, [pc, #48]	; (8002810 <__NVIC_SetPriority+0x4c>)
 80027de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027e2:	0112      	lsls	r2, r2, #4
 80027e4:	b2d2      	uxtb	r2, r2
 80027e6:	440b      	add	r3, r1
 80027e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027ec:	e00a      	b.n	8002804 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	b2da      	uxtb	r2, r3
 80027f2:	4908      	ldr	r1, [pc, #32]	; (8002814 <__NVIC_SetPriority+0x50>)
 80027f4:	88fb      	ldrh	r3, [r7, #6]
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	3b04      	subs	r3, #4
 80027fc:	0112      	lsls	r2, r2, #4
 80027fe:	b2d2      	uxtb	r2, r2
 8002800:	440b      	add	r3, r1
 8002802:	761a      	strb	r2, [r3, #24]
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	e000e100 	.word	0xe000e100
 8002814:	e000ed00 	.word	0xe000ed00

08002818 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002818:	b480      	push	{r7}
 800281a:	b089      	sub	sp, #36	; 0x24
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f003 0307 	and.w	r3, r3, #7
 800282a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	f1c3 0307 	rsb	r3, r3, #7
 8002832:	2b04      	cmp	r3, #4
 8002834:	bf28      	it	cs
 8002836:	2304      	movcs	r3, #4
 8002838:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	3304      	adds	r3, #4
 800283e:	2b06      	cmp	r3, #6
 8002840:	d902      	bls.n	8002848 <NVIC_EncodePriority+0x30>
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	3b03      	subs	r3, #3
 8002846:	e000      	b.n	800284a <NVIC_EncodePriority+0x32>
 8002848:	2300      	movs	r3, #0
 800284a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800284c:	f04f 32ff 	mov.w	r2, #4294967295
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	43da      	mvns	r2, r3
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	401a      	ands	r2, r3
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002860:	f04f 31ff 	mov.w	r1, #4294967295
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	fa01 f303 	lsl.w	r3, r1, r3
 800286a:	43d9      	mvns	r1, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002870:	4313      	orrs	r3, r2
         );
}
 8002872:	4618      	mov	r0, r3
 8002874:	3724      	adds	r7, #36	; 0x24
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
	...

08002880 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	3b01      	subs	r3, #1
 800288c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002890:	d301      	bcc.n	8002896 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002892:	2301      	movs	r3, #1
 8002894:	e00f      	b.n	80028b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002896:	4a0a      	ldr	r2, [pc, #40]	; (80028c0 <SysTick_Config+0x40>)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3b01      	subs	r3, #1
 800289c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800289e:	210f      	movs	r1, #15
 80028a0:	f04f 30ff 	mov.w	r0, #4294967295
 80028a4:	f7ff ff8e 	bl	80027c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028a8:	4b05      	ldr	r3, [pc, #20]	; (80028c0 <SysTick_Config+0x40>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ae:	4b04      	ldr	r3, [pc, #16]	; (80028c0 <SysTick_Config+0x40>)
 80028b0:	2207      	movs	r2, #7
 80028b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	e000e010 	.word	0xe000e010

080028c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f7ff ff29 	bl	8002724 <__NVIC_SetPriorityGrouping>
}
 80028d2:	bf00      	nop
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b086      	sub	sp, #24
 80028de:	af00      	add	r7, sp, #0
 80028e0:	4603      	mov	r3, r0
 80028e2:	60b9      	str	r1, [r7, #8]
 80028e4:	607a      	str	r2, [r7, #4]
 80028e6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80028e8:	f7ff ff40 	bl	800276c <__NVIC_GetPriorityGrouping>
 80028ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	68b9      	ldr	r1, [r7, #8]
 80028f2:	6978      	ldr	r0, [r7, #20]
 80028f4:	f7ff ff90 	bl	8002818 <NVIC_EncodePriority>
 80028f8:	4602      	mov	r2, r0
 80028fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80028fe:	4611      	mov	r1, r2
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff ff5f 	bl	80027c4 <__NVIC_SetPriority>
}
 8002906:	bf00      	nop
 8002908:	3718      	adds	r7, #24
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b082      	sub	sp, #8
 8002912:	af00      	add	r7, sp, #0
 8002914:	4603      	mov	r3, r0
 8002916:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002918:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff ff33 	bl	8002788 <__NVIC_EnableIRQ>
}
 8002922:	bf00      	nop
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b082      	sub	sp, #8
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f7ff ffa4 	bl	8002880 <SysTick_Config>
 8002938:	4603      	mov	r3, r0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
	...

08002944 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800294c:	f7fe f8c4 	bl	8000ad8 <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d101      	bne.n	800295c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e316      	b.n	8002f8a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a66      	ldr	r2, [pc, #408]	; (8002afc <HAL_DMA_Init+0x1b8>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d04a      	beq.n	80029fc <HAL_DMA_Init+0xb8>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a65      	ldr	r2, [pc, #404]	; (8002b00 <HAL_DMA_Init+0x1bc>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d045      	beq.n	80029fc <HAL_DMA_Init+0xb8>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a63      	ldr	r2, [pc, #396]	; (8002b04 <HAL_DMA_Init+0x1c0>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d040      	beq.n	80029fc <HAL_DMA_Init+0xb8>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a62      	ldr	r2, [pc, #392]	; (8002b08 <HAL_DMA_Init+0x1c4>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d03b      	beq.n	80029fc <HAL_DMA_Init+0xb8>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a60      	ldr	r2, [pc, #384]	; (8002b0c <HAL_DMA_Init+0x1c8>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d036      	beq.n	80029fc <HAL_DMA_Init+0xb8>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a5f      	ldr	r2, [pc, #380]	; (8002b10 <HAL_DMA_Init+0x1cc>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d031      	beq.n	80029fc <HAL_DMA_Init+0xb8>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a5d      	ldr	r2, [pc, #372]	; (8002b14 <HAL_DMA_Init+0x1d0>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d02c      	beq.n	80029fc <HAL_DMA_Init+0xb8>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a5c      	ldr	r2, [pc, #368]	; (8002b18 <HAL_DMA_Init+0x1d4>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d027      	beq.n	80029fc <HAL_DMA_Init+0xb8>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a5a      	ldr	r2, [pc, #360]	; (8002b1c <HAL_DMA_Init+0x1d8>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d022      	beq.n	80029fc <HAL_DMA_Init+0xb8>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a59      	ldr	r2, [pc, #356]	; (8002b20 <HAL_DMA_Init+0x1dc>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d01d      	beq.n	80029fc <HAL_DMA_Init+0xb8>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a57      	ldr	r2, [pc, #348]	; (8002b24 <HAL_DMA_Init+0x1e0>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d018      	beq.n	80029fc <HAL_DMA_Init+0xb8>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a56      	ldr	r2, [pc, #344]	; (8002b28 <HAL_DMA_Init+0x1e4>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d013      	beq.n	80029fc <HAL_DMA_Init+0xb8>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a54      	ldr	r2, [pc, #336]	; (8002b2c <HAL_DMA_Init+0x1e8>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d00e      	beq.n	80029fc <HAL_DMA_Init+0xb8>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a53      	ldr	r2, [pc, #332]	; (8002b30 <HAL_DMA_Init+0x1ec>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d009      	beq.n	80029fc <HAL_DMA_Init+0xb8>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a51      	ldr	r2, [pc, #324]	; (8002b34 <HAL_DMA_Init+0x1f0>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d004      	beq.n	80029fc <HAL_DMA_Init+0xb8>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a50      	ldr	r2, [pc, #320]	; (8002b38 <HAL_DMA_Init+0x1f4>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d101      	bne.n	8002a00 <HAL_DMA_Init+0xbc>
 80029fc:	2301      	movs	r3, #1
 80029fe:	e000      	b.n	8002a02 <HAL_DMA_Init+0xbe>
 8002a00:	2300      	movs	r3, #0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	f000 813b 	beq.w	8002c7e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2202      	movs	r2, #2
 8002a14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a37      	ldr	r2, [pc, #220]	; (8002afc <HAL_DMA_Init+0x1b8>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d04a      	beq.n	8002ab8 <HAL_DMA_Init+0x174>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a36      	ldr	r2, [pc, #216]	; (8002b00 <HAL_DMA_Init+0x1bc>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d045      	beq.n	8002ab8 <HAL_DMA_Init+0x174>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a34      	ldr	r2, [pc, #208]	; (8002b04 <HAL_DMA_Init+0x1c0>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d040      	beq.n	8002ab8 <HAL_DMA_Init+0x174>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a33      	ldr	r2, [pc, #204]	; (8002b08 <HAL_DMA_Init+0x1c4>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d03b      	beq.n	8002ab8 <HAL_DMA_Init+0x174>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a31      	ldr	r2, [pc, #196]	; (8002b0c <HAL_DMA_Init+0x1c8>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d036      	beq.n	8002ab8 <HAL_DMA_Init+0x174>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a30      	ldr	r2, [pc, #192]	; (8002b10 <HAL_DMA_Init+0x1cc>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d031      	beq.n	8002ab8 <HAL_DMA_Init+0x174>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a2e      	ldr	r2, [pc, #184]	; (8002b14 <HAL_DMA_Init+0x1d0>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d02c      	beq.n	8002ab8 <HAL_DMA_Init+0x174>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a2d      	ldr	r2, [pc, #180]	; (8002b18 <HAL_DMA_Init+0x1d4>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d027      	beq.n	8002ab8 <HAL_DMA_Init+0x174>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a2b      	ldr	r2, [pc, #172]	; (8002b1c <HAL_DMA_Init+0x1d8>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d022      	beq.n	8002ab8 <HAL_DMA_Init+0x174>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a2a      	ldr	r2, [pc, #168]	; (8002b20 <HAL_DMA_Init+0x1dc>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d01d      	beq.n	8002ab8 <HAL_DMA_Init+0x174>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a28      	ldr	r2, [pc, #160]	; (8002b24 <HAL_DMA_Init+0x1e0>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d018      	beq.n	8002ab8 <HAL_DMA_Init+0x174>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a27      	ldr	r2, [pc, #156]	; (8002b28 <HAL_DMA_Init+0x1e4>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d013      	beq.n	8002ab8 <HAL_DMA_Init+0x174>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a25      	ldr	r2, [pc, #148]	; (8002b2c <HAL_DMA_Init+0x1e8>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d00e      	beq.n	8002ab8 <HAL_DMA_Init+0x174>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a24      	ldr	r2, [pc, #144]	; (8002b30 <HAL_DMA_Init+0x1ec>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d009      	beq.n	8002ab8 <HAL_DMA_Init+0x174>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a22      	ldr	r2, [pc, #136]	; (8002b34 <HAL_DMA_Init+0x1f0>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d004      	beq.n	8002ab8 <HAL_DMA_Init+0x174>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a21      	ldr	r2, [pc, #132]	; (8002b38 <HAL_DMA_Init+0x1f4>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d108      	bne.n	8002aca <HAL_DMA_Init+0x186>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f022 0201 	bic.w	r2, r2, #1
 8002ac6:	601a      	str	r2, [r3, #0]
 8002ac8:	e007      	b.n	8002ada <HAL_DMA_Init+0x196>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f022 0201 	bic.w	r2, r2, #1
 8002ad8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002ada:	e02f      	b.n	8002b3c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002adc:	f7fd fffc 	bl	8000ad8 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b05      	cmp	r3, #5
 8002ae8:	d928      	bls.n	8002b3c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2220      	movs	r2, #32
 8002aee:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2203      	movs	r2, #3
 8002af4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e246      	b.n	8002f8a <HAL_DMA_Init+0x646>
 8002afc:	40020010 	.word	0x40020010
 8002b00:	40020028 	.word	0x40020028
 8002b04:	40020040 	.word	0x40020040
 8002b08:	40020058 	.word	0x40020058
 8002b0c:	40020070 	.word	0x40020070
 8002b10:	40020088 	.word	0x40020088
 8002b14:	400200a0 	.word	0x400200a0
 8002b18:	400200b8 	.word	0x400200b8
 8002b1c:	40020410 	.word	0x40020410
 8002b20:	40020428 	.word	0x40020428
 8002b24:	40020440 	.word	0x40020440
 8002b28:	40020458 	.word	0x40020458
 8002b2c:	40020470 	.word	0x40020470
 8002b30:	40020488 	.word	0x40020488
 8002b34:	400204a0 	.word	0x400204a0
 8002b38:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1c8      	bne.n	8002adc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b52:	697a      	ldr	r2, [r7, #20]
 8002b54:	4b83      	ldr	r3, [pc, #524]	; (8002d64 <HAL_DMA_Init+0x420>)
 8002b56:	4013      	ands	r3, r2
 8002b58:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002b62:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b6e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b7a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8c:	2b04      	cmp	r3, #4
 8002b8e:	d107      	bne.n	8002ba0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002ba0:	4b71      	ldr	r3, [pc, #452]	; (8002d68 <HAL_DMA_Init+0x424>)
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	4b71      	ldr	r3, [pc, #452]	; (8002d6c <HAL_DMA_Init+0x428>)
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bac:	d328      	bcc.n	8002c00 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b28      	cmp	r3, #40	; 0x28
 8002bb4:	d903      	bls.n	8002bbe <HAL_DMA_Init+0x27a>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2b2e      	cmp	r3, #46	; 0x2e
 8002bbc:	d917      	bls.n	8002bee <HAL_DMA_Init+0x2aa>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	2b3e      	cmp	r3, #62	; 0x3e
 8002bc4:	d903      	bls.n	8002bce <HAL_DMA_Init+0x28a>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2b42      	cmp	r3, #66	; 0x42
 8002bcc:	d90f      	bls.n	8002bee <HAL_DMA_Init+0x2aa>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	2b46      	cmp	r3, #70	; 0x46
 8002bd4:	d903      	bls.n	8002bde <HAL_DMA_Init+0x29a>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2b48      	cmp	r3, #72	; 0x48
 8002bdc:	d907      	bls.n	8002bee <HAL_DMA_Init+0x2aa>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	2b4e      	cmp	r3, #78	; 0x4e
 8002be4:	d905      	bls.n	8002bf2 <HAL_DMA_Init+0x2ae>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2b52      	cmp	r3, #82	; 0x52
 8002bec:	d801      	bhi.n	8002bf2 <HAL_DMA_Init+0x2ae>
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e000      	b.n	8002bf4 <HAL_DMA_Init+0x2b0>
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d003      	beq.n	8002c00 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bfe:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	697a      	ldr	r2, [r7, #20]
 8002c06:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	f023 0307 	bic.w	r3, r3, #7
 8002c16:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1c:	697a      	ldr	r2, [r7, #20]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	d117      	bne.n	8002c5a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00e      	beq.n	8002c5a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f001 f9b9 	bl	8003fb4 <DMA_CheckFifoParam>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d008      	beq.n	8002c5a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2240      	movs	r2, #64	; 0x40
 8002c4c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e197      	b.n	8002f8a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f001 f8f4 	bl	8003e50 <DMA_CalcBaseAndBitshift>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c70:	f003 031f 	and.w	r3, r3, #31
 8002c74:	223f      	movs	r2, #63	; 0x3f
 8002c76:	409a      	lsls	r2, r3
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	609a      	str	r2, [r3, #8]
 8002c7c:	e0cd      	b.n	8002e1a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a3b      	ldr	r2, [pc, #236]	; (8002d70 <HAL_DMA_Init+0x42c>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d022      	beq.n	8002cce <HAL_DMA_Init+0x38a>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a39      	ldr	r2, [pc, #228]	; (8002d74 <HAL_DMA_Init+0x430>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d01d      	beq.n	8002cce <HAL_DMA_Init+0x38a>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a38      	ldr	r2, [pc, #224]	; (8002d78 <HAL_DMA_Init+0x434>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d018      	beq.n	8002cce <HAL_DMA_Init+0x38a>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a36      	ldr	r2, [pc, #216]	; (8002d7c <HAL_DMA_Init+0x438>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d013      	beq.n	8002cce <HAL_DMA_Init+0x38a>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a35      	ldr	r2, [pc, #212]	; (8002d80 <HAL_DMA_Init+0x43c>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d00e      	beq.n	8002cce <HAL_DMA_Init+0x38a>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a33      	ldr	r2, [pc, #204]	; (8002d84 <HAL_DMA_Init+0x440>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d009      	beq.n	8002cce <HAL_DMA_Init+0x38a>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a32      	ldr	r2, [pc, #200]	; (8002d88 <HAL_DMA_Init+0x444>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d004      	beq.n	8002cce <HAL_DMA_Init+0x38a>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a30      	ldr	r2, [pc, #192]	; (8002d8c <HAL_DMA_Init+0x448>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d101      	bne.n	8002cd2 <HAL_DMA_Init+0x38e>
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e000      	b.n	8002cd4 <HAL_DMA_Init+0x390>
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f000 8097 	beq.w	8002e08 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a24      	ldr	r2, [pc, #144]	; (8002d70 <HAL_DMA_Init+0x42c>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d021      	beq.n	8002d28 <HAL_DMA_Init+0x3e4>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a22      	ldr	r2, [pc, #136]	; (8002d74 <HAL_DMA_Init+0x430>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d01c      	beq.n	8002d28 <HAL_DMA_Init+0x3e4>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a21      	ldr	r2, [pc, #132]	; (8002d78 <HAL_DMA_Init+0x434>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d017      	beq.n	8002d28 <HAL_DMA_Init+0x3e4>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a1f      	ldr	r2, [pc, #124]	; (8002d7c <HAL_DMA_Init+0x438>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d012      	beq.n	8002d28 <HAL_DMA_Init+0x3e4>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a1e      	ldr	r2, [pc, #120]	; (8002d80 <HAL_DMA_Init+0x43c>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d00d      	beq.n	8002d28 <HAL_DMA_Init+0x3e4>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a1c      	ldr	r2, [pc, #112]	; (8002d84 <HAL_DMA_Init+0x440>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d008      	beq.n	8002d28 <HAL_DMA_Init+0x3e4>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a1b      	ldr	r2, [pc, #108]	; (8002d88 <HAL_DMA_Init+0x444>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d003      	beq.n	8002d28 <HAL_DMA_Init+0x3e4>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a19      	ldr	r2, [pc, #100]	; (8002d8c <HAL_DMA_Init+0x448>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2202      	movs	r2, #2
 8002d36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	4b12      	ldr	r3, [pc, #72]	; (8002d90 <HAL_DMA_Init+0x44c>)
 8002d46:	4013      	ands	r3, r2
 8002d48:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	2b40      	cmp	r3, #64	; 0x40
 8002d50:	d020      	beq.n	8002d94 <HAL_DMA_Init+0x450>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	2b80      	cmp	r3, #128	; 0x80
 8002d58:	d102      	bne.n	8002d60 <HAL_DMA_Init+0x41c>
 8002d5a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d5e:	e01a      	b.n	8002d96 <HAL_DMA_Init+0x452>
 8002d60:	2300      	movs	r3, #0
 8002d62:	e018      	b.n	8002d96 <HAL_DMA_Init+0x452>
 8002d64:	fe10803f 	.word	0xfe10803f
 8002d68:	5c001000 	.word	0x5c001000
 8002d6c:	ffff0000 	.word	0xffff0000
 8002d70:	58025408 	.word	0x58025408
 8002d74:	5802541c 	.word	0x5802541c
 8002d78:	58025430 	.word	0x58025430
 8002d7c:	58025444 	.word	0x58025444
 8002d80:	58025458 	.word	0x58025458
 8002d84:	5802546c 	.word	0x5802546c
 8002d88:	58025480 	.word	0x58025480
 8002d8c:	58025494 	.word	0x58025494
 8002d90:	fffe000f 	.word	0xfffe000f
 8002d94:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	68d2      	ldr	r2, [r2, #12]
 8002d9a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002d9c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002da4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002dac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002db4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69db      	ldr	r3, [r3, #28]
 8002dba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002dbc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002dc4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	697a      	ldr	r2, [r7, #20]
 8002dd2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	461a      	mov	r2, r3
 8002dda:	4b6e      	ldr	r3, [pc, #440]	; (8002f94 <HAL_DMA_Init+0x650>)
 8002ddc:	4413      	add	r3, r2
 8002dde:	4a6e      	ldr	r2, [pc, #440]	; (8002f98 <HAL_DMA_Init+0x654>)
 8002de0:	fba2 2303 	umull	r2, r3, r2, r3
 8002de4:	091b      	lsrs	r3, r3, #4
 8002de6:	009a      	lsls	r2, r3, #2
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f001 f82f 	bl	8003e50 <DMA_CalcBaseAndBitshift>
 8002df2:	4603      	mov	r3, r0
 8002df4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dfa:	f003 031f 	and.w	r3, r3, #31
 8002dfe:	2201      	movs	r2, #1
 8002e00:	409a      	lsls	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	605a      	str	r2, [r3, #4]
 8002e06:	e008      	b.n	8002e1a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2240      	movs	r2, #64	; 0x40
 8002e0c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2203      	movs	r2, #3
 8002e12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e0b7      	b.n	8002f8a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a5f      	ldr	r2, [pc, #380]	; (8002f9c <HAL_DMA_Init+0x658>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d072      	beq.n	8002f0a <HAL_DMA_Init+0x5c6>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a5d      	ldr	r2, [pc, #372]	; (8002fa0 <HAL_DMA_Init+0x65c>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d06d      	beq.n	8002f0a <HAL_DMA_Init+0x5c6>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a5c      	ldr	r2, [pc, #368]	; (8002fa4 <HAL_DMA_Init+0x660>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d068      	beq.n	8002f0a <HAL_DMA_Init+0x5c6>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a5a      	ldr	r2, [pc, #360]	; (8002fa8 <HAL_DMA_Init+0x664>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d063      	beq.n	8002f0a <HAL_DMA_Init+0x5c6>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a59      	ldr	r2, [pc, #356]	; (8002fac <HAL_DMA_Init+0x668>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d05e      	beq.n	8002f0a <HAL_DMA_Init+0x5c6>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a57      	ldr	r2, [pc, #348]	; (8002fb0 <HAL_DMA_Init+0x66c>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d059      	beq.n	8002f0a <HAL_DMA_Init+0x5c6>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a56      	ldr	r2, [pc, #344]	; (8002fb4 <HAL_DMA_Init+0x670>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d054      	beq.n	8002f0a <HAL_DMA_Init+0x5c6>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a54      	ldr	r2, [pc, #336]	; (8002fb8 <HAL_DMA_Init+0x674>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d04f      	beq.n	8002f0a <HAL_DMA_Init+0x5c6>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a53      	ldr	r2, [pc, #332]	; (8002fbc <HAL_DMA_Init+0x678>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d04a      	beq.n	8002f0a <HAL_DMA_Init+0x5c6>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a51      	ldr	r2, [pc, #324]	; (8002fc0 <HAL_DMA_Init+0x67c>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d045      	beq.n	8002f0a <HAL_DMA_Init+0x5c6>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a50      	ldr	r2, [pc, #320]	; (8002fc4 <HAL_DMA_Init+0x680>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d040      	beq.n	8002f0a <HAL_DMA_Init+0x5c6>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a4e      	ldr	r2, [pc, #312]	; (8002fc8 <HAL_DMA_Init+0x684>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d03b      	beq.n	8002f0a <HAL_DMA_Init+0x5c6>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a4d      	ldr	r2, [pc, #308]	; (8002fcc <HAL_DMA_Init+0x688>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d036      	beq.n	8002f0a <HAL_DMA_Init+0x5c6>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a4b      	ldr	r2, [pc, #300]	; (8002fd0 <HAL_DMA_Init+0x68c>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d031      	beq.n	8002f0a <HAL_DMA_Init+0x5c6>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a4a      	ldr	r2, [pc, #296]	; (8002fd4 <HAL_DMA_Init+0x690>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d02c      	beq.n	8002f0a <HAL_DMA_Init+0x5c6>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a48      	ldr	r2, [pc, #288]	; (8002fd8 <HAL_DMA_Init+0x694>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d027      	beq.n	8002f0a <HAL_DMA_Init+0x5c6>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a47      	ldr	r2, [pc, #284]	; (8002fdc <HAL_DMA_Init+0x698>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d022      	beq.n	8002f0a <HAL_DMA_Init+0x5c6>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a45      	ldr	r2, [pc, #276]	; (8002fe0 <HAL_DMA_Init+0x69c>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d01d      	beq.n	8002f0a <HAL_DMA_Init+0x5c6>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a44      	ldr	r2, [pc, #272]	; (8002fe4 <HAL_DMA_Init+0x6a0>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d018      	beq.n	8002f0a <HAL_DMA_Init+0x5c6>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a42      	ldr	r2, [pc, #264]	; (8002fe8 <HAL_DMA_Init+0x6a4>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d013      	beq.n	8002f0a <HAL_DMA_Init+0x5c6>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a41      	ldr	r2, [pc, #260]	; (8002fec <HAL_DMA_Init+0x6a8>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d00e      	beq.n	8002f0a <HAL_DMA_Init+0x5c6>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a3f      	ldr	r2, [pc, #252]	; (8002ff0 <HAL_DMA_Init+0x6ac>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d009      	beq.n	8002f0a <HAL_DMA_Init+0x5c6>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a3e      	ldr	r2, [pc, #248]	; (8002ff4 <HAL_DMA_Init+0x6b0>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d004      	beq.n	8002f0a <HAL_DMA_Init+0x5c6>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a3c      	ldr	r2, [pc, #240]	; (8002ff8 <HAL_DMA_Init+0x6b4>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d101      	bne.n	8002f0e <HAL_DMA_Init+0x5ca>
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e000      	b.n	8002f10 <HAL_DMA_Init+0x5cc>
 8002f0e:	2300      	movs	r3, #0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d032      	beq.n	8002f7a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f001 f8c9 	bl	80040ac <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	2b80      	cmp	r3, #128	; 0x80
 8002f20:	d102      	bne.n	8002f28 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f30:	b2d2      	uxtb	r2, r2
 8002f32:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002f3c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d010      	beq.n	8002f68 <HAL_DMA_Init+0x624>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2b08      	cmp	r3, #8
 8002f4c:	d80c      	bhi.n	8002f68 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f001 f946 	bl	80041e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002f64:	605a      	str	r2, [r3, #4]
 8002f66:	e008      	b.n	8002f7a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3718      	adds	r7, #24
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	a7fdabf8 	.word	0xa7fdabf8
 8002f98:	cccccccd 	.word	0xcccccccd
 8002f9c:	40020010 	.word	0x40020010
 8002fa0:	40020028 	.word	0x40020028
 8002fa4:	40020040 	.word	0x40020040
 8002fa8:	40020058 	.word	0x40020058
 8002fac:	40020070 	.word	0x40020070
 8002fb0:	40020088 	.word	0x40020088
 8002fb4:	400200a0 	.word	0x400200a0
 8002fb8:	400200b8 	.word	0x400200b8
 8002fbc:	40020410 	.word	0x40020410
 8002fc0:	40020428 	.word	0x40020428
 8002fc4:	40020440 	.word	0x40020440
 8002fc8:	40020458 	.word	0x40020458
 8002fcc:	40020470 	.word	0x40020470
 8002fd0:	40020488 	.word	0x40020488
 8002fd4:	400204a0 	.word	0x400204a0
 8002fd8:	400204b8 	.word	0x400204b8
 8002fdc:	58025408 	.word	0x58025408
 8002fe0:	5802541c 	.word	0x5802541c
 8002fe4:	58025430 	.word	0x58025430
 8002fe8:	58025444 	.word	0x58025444
 8002fec:	58025458 	.word	0x58025458
 8002ff0:	5802546c 	.word	0x5802546c
 8002ff4:	58025480 	.word	0x58025480
 8002ff8:	58025494 	.word	0x58025494

08002ffc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b08a      	sub	sp, #40	; 0x28
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003004:	2300      	movs	r3, #0
 8003006:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003008:	4b67      	ldr	r3, [pc, #412]	; (80031a8 <HAL_DMA_IRQHandler+0x1ac>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a67      	ldr	r2, [pc, #412]	; (80031ac <HAL_DMA_IRQHandler+0x1b0>)
 800300e:	fba2 2303 	umull	r2, r3, r2, r3
 8003012:	0a9b      	lsrs	r3, r3, #10
 8003014:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003020:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003022:	6a3b      	ldr	r3, [r7, #32]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a5f      	ldr	r2, [pc, #380]	; (80031b0 <HAL_DMA_IRQHandler+0x1b4>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d04a      	beq.n	80030ce <HAL_DMA_IRQHandler+0xd2>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a5d      	ldr	r2, [pc, #372]	; (80031b4 <HAL_DMA_IRQHandler+0x1b8>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d045      	beq.n	80030ce <HAL_DMA_IRQHandler+0xd2>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a5c      	ldr	r2, [pc, #368]	; (80031b8 <HAL_DMA_IRQHandler+0x1bc>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d040      	beq.n	80030ce <HAL_DMA_IRQHandler+0xd2>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a5a      	ldr	r2, [pc, #360]	; (80031bc <HAL_DMA_IRQHandler+0x1c0>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d03b      	beq.n	80030ce <HAL_DMA_IRQHandler+0xd2>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a59      	ldr	r2, [pc, #356]	; (80031c0 <HAL_DMA_IRQHandler+0x1c4>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d036      	beq.n	80030ce <HAL_DMA_IRQHandler+0xd2>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a57      	ldr	r2, [pc, #348]	; (80031c4 <HAL_DMA_IRQHandler+0x1c8>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d031      	beq.n	80030ce <HAL_DMA_IRQHandler+0xd2>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a56      	ldr	r2, [pc, #344]	; (80031c8 <HAL_DMA_IRQHandler+0x1cc>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d02c      	beq.n	80030ce <HAL_DMA_IRQHandler+0xd2>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a54      	ldr	r2, [pc, #336]	; (80031cc <HAL_DMA_IRQHandler+0x1d0>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d027      	beq.n	80030ce <HAL_DMA_IRQHandler+0xd2>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a53      	ldr	r2, [pc, #332]	; (80031d0 <HAL_DMA_IRQHandler+0x1d4>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d022      	beq.n	80030ce <HAL_DMA_IRQHandler+0xd2>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a51      	ldr	r2, [pc, #324]	; (80031d4 <HAL_DMA_IRQHandler+0x1d8>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d01d      	beq.n	80030ce <HAL_DMA_IRQHandler+0xd2>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a50      	ldr	r2, [pc, #320]	; (80031d8 <HAL_DMA_IRQHandler+0x1dc>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d018      	beq.n	80030ce <HAL_DMA_IRQHandler+0xd2>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a4e      	ldr	r2, [pc, #312]	; (80031dc <HAL_DMA_IRQHandler+0x1e0>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d013      	beq.n	80030ce <HAL_DMA_IRQHandler+0xd2>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a4d      	ldr	r2, [pc, #308]	; (80031e0 <HAL_DMA_IRQHandler+0x1e4>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d00e      	beq.n	80030ce <HAL_DMA_IRQHandler+0xd2>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a4b      	ldr	r2, [pc, #300]	; (80031e4 <HAL_DMA_IRQHandler+0x1e8>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d009      	beq.n	80030ce <HAL_DMA_IRQHandler+0xd2>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a4a      	ldr	r2, [pc, #296]	; (80031e8 <HAL_DMA_IRQHandler+0x1ec>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d004      	beq.n	80030ce <HAL_DMA_IRQHandler+0xd2>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a48      	ldr	r2, [pc, #288]	; (80031ec <HAL_DMA_IRQHandler+0x1f0>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d101      	bne.n	80030d2 <HAL_DMA_IRQHandler+0xd6>
 80030ce:	2301      	movs	r3, #1
 80030d0:	e000      	b.n	80030d4 <HAL_DMA_IRQHandler+0xd8>
 80030d2:	2300      	movs	r3, #0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f000 842b 	beq.w	8003930 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030de:	f003 031f 	and.w	r3, r3, #31
 80030e2:	2208      	movs	r2, #8
 80030e4:	409a      	lsls	r2, r3
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	4013      	ands	r3, r2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	f000 80a2 	beq.w	8003234 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a2e      	ldr	r2, [pc, #184]	; (80031b0 <HAL_DMA_IRQHandler+0x1b4>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d04a      	beq.n	8003190 <HAL_DMA_IRQHandler+0x194>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a2d      	ldr	r2, [pc, #180]	; (80031b4 <HAL_DMA_IRQHandler+0x1b8>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d045      	beq.n	8003190 <HAL_DMA_IRQHandler+0x194>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a2b      	ldr	r2, [pc, #172]	; (80031b8 <HAL_DMA_IRQHandler+0x1bc>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d040      	beq.n	8003190 <HAL_DMA_IRQHandler+0x194>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a2a      	ldr	r2, [pc, #168]	; (80031bc <HAL_DMA_IRQHandler+0x1c0>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d03b      	beq.n	8003190 <HAL_DMA_IRQHandler+0x194>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a28      	ldr	r2, [pc, #160]	; (80031c0 <HAL_DMA_IRQHandler+0x1c4>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d036      	beq.n	8003190 <HAL_DMA_IRQHandler+0x194>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a27      	ldr	r2, [pc, #156]	; (80031c4 <HAL_DMA_IRQHandler+0x1c8>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d031      	beq.n	8003190 <HAL_DMA_IRQHandler+0x194>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a25      	ldr	r2, [pc, #148]	; (80031c8 <HAL_DMA_IRQHandler+0x1cc>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d02c      	beq.n	8003190 <HAL_DMA_IRQHandler+0x194>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a24      	ldr	r2, [pc, #144]	; (80031cc <HAL_DMA_IRQHandler+0x1d0>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d027      	beq.n	8003190 <HAL_DMA_IRQHandler+0x194>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a22      	ldr	r2, [pc, #136]	; (80031d0 <HAL_DMA_IRQHandler+0x1d4>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d022      	beq.n	8003190 <HAL_DMA_IRQHandler+0x194>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a21      	ldr	r2, [pc, #132]	; (80031d4 <HAL_DMA_IRQHandler+0x1d8>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d01d      	beq.n	8003190 <HAL_DMA_IRQHandler+0x194>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a1f      	ldr	r2, [pc, #124]	; (80031d8 <HAL_DMA_IRQHandler+0x1dc>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d018      	beq.n	8003190 <HAL_DMA_IRQHandler+0x194>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a1e      	ldr	r2, [pc, #120]	; (80031dc <HAL_DMA_IRQHandler+0x1e0>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d013      	beq.n	8003190 <HAL_DMA_IRQHandler+0x194>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a1c      	ldr	r2, [pc, #112]	; (80031e0 <HAL_DMA_IRQHandler+0x1e4>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d00e      	beq.n	8003190 <HAL_DMA_IRQHandler+0x194>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a1b      	ldr	r2, [pc, #108]	; (80031e4 <HAL_DMA_IRQHandler+0x1e8>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d009      	beq.n	8003190 <HAL_DMA_IRQHandler+0x194>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a19      	ldr	r2, [pc, #100]	; (80031e8 <HAL_DMA_IRQHandler+0x1ec>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d004      	beq.n	8003190 <HAL_DMA_IRQHandler+0x194>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a18      	ldr	r2, [pc, #96]	; (80031ec <HAL_DMA_IRQHandler+0x1f0>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d12f      	bne.n	80031f0 <HAL_DMA_IRQHandler+0x1f4>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0304 	and.w	r3, r3, #4
 800319a:	2b00      	cmp	r3, #0
 800319c:	bf14      	ite	ne
 800319e:	2301      	movne	r3, #1
 80031a0:	2300      	moveq	r3, #0
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	e02e      	b.n	8003204 <HAL_DMA_IRQHandler+0x208>
 80031a6:	bf00      	nop
 80031a8:	24000000 	.word	0x24000000
 80031ac:	1b4e81b5 	.word	0x1b4e81b5
 80031b0:	40020010 	.word	0x40020010
 80031b4:	40020028 	.word	0x40020028
 80031b8:	40020040 	.word	0x40020040
 80031bc:	40020058 	.word	0x40020058
 80031c0:	40020070 	.word	0x40020070
 80031c4:	40020088 	.word	0x40020088
 80031c8:	400200a0 	.word	0x400200a0
 80031cc:	400200b8 	.word	0x400200b8
 80031d0:	40020410 	.word	0x40020410
 80031d4:	40020428 	.word	0x40020428
 80031d8:	40020440 	.word	0x40020440
 80031dc:	40020458 	.word	0x40020458
 80031e0:	40020470 	.word	0x40020470
 80031e4:	40020488 	.word	0x40020488
 80031e8:	400204a0 	.word	0x400204a0
 80031ec:	400204b8 	.word	0x400204b8
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0308 	and.w	r3, r3, #8
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	bf14      	ite	ne
 80031fe:	2301      	movne	r3, #1
 8003200:	2300      	moveq	r3, #0
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b00      	cmp	r3, #0
 8003206:	d015      	beq.n	8003234 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 0204 	bic.w	r2, r2, #4
 8003216:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800321c:	f003 031f 	and.w	r3, r3, #31
 8003220:	2208      	movs	r2, #8
 8003222:	409a      	lsls	r2, r3
 8003224:	6a3b      	ldr	r3, [r7, #32]
 8003226:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800322c:	f043 0201 	orr.w	r2, r3, #1
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003238:	f003 031f 	and.w	r3, r3, #31
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	fa22 f303 	lsr.w	r3, r2, r3
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b00      	cmp	r3, #0
 8003248:	d06e      	beq.n	8003328 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a69      	ldr	r2, [pc, #420]	; (80033f4 <HAL_DMA_IRQHandler+0x3f8>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d04a      	beq.n	80032ea <HAL_DMA_IRQHandler+0x2ee>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a67      	ldr	r2, [pc, #412]	; (80033f8 <HAL_DMA_IRQHandler+0x3fc>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d045      	beq.n	80032ea <HAL_DMA_IRQHandler+0x2ee>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a66      	ldr	r2, [pc, #408]	; (80033fc <HAL_DMA_IRQHandler+0x400>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d040      	beq.n	80032ea <HAL_DMA_IRQHandler+0x2ee>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a64      	ldr	r2, [pc, #400]	; (8003400 <HAL_DMA_IRQHandler+0x404>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d03b      	beq.n	80032ea <HAL_DMA_IRQHandler+0x2ee>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a63      	ldr	r2, [pc, #396]	; (8003404 <HAL_DMA_IRQHandler+0x408>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d036      	beq.n	80032ea <HAL_DMA_IRQHandler+0x2ee>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a61      	ldr	r2, [pc, #388]	; (8003408 <HAL_DMA_IRQHandler+0x40c>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d031      	beq.n	80032ea <HAL_DMA_IRQHandler+0x2ee>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a60      	ldr	r2, [pc, #384]	; (800340c <HAL_DMA_IRQHandler+0x410>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d02c      	beq.n	80032ea <HAL_DMA_IRQHandler+0x2ee>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a5e      	ldr	r2, [pc, #376]	; (8003410 <HAL_DMA_IRQHandler+0x414>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d027      	beq.n	80032ea <HAL_DMA_IRQHandler+0x2ee>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a5d      	ldr	r2, [pc, #372]	; (8003414 <HAL_DMA_IRQHandler+0x418>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d022      	beq.n	80032ea <HAL_DMA_IRQHandler+0x2ee>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a5b      	ldr	r2, [pc, #364]	; (8003418 <HAL_DMA_IRQHandler+0x41c>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d01d      	beq.n	80032ea <HAL_DMA_IRQHandler+0x2ee>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a5a      	ldr	r2, [pc, #360]	; (800341c <HAL_DMA_IRQHandler+0x420>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d018      	beq.n	80032ea <HAL_DMA_IRQHandler+0x2ee>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a58      	ldr	r2, [pc, #352]	; (8003420 <HAL_DMA_IRQHandler+0x424>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d013      	beq.n	80032ea <HAL_DMA_IRQHandler+0x2ee>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a57      	ldr	r2, [pc, #348]	; (8003424 <HAL_DMA_IRQHandler+0x428>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d00e      	beq.n	80032ea <HAL_DMA_IRQHandler+0x2ee>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a55      	ldr	r2, [pc, #340]	; (8003428 <HAL_DMA_IRQHandler+0x42c>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d009      	beq.n	80032ea <HAL_DMA_IRQHandler+0x2ee>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a54      	ldr	r2, [pc, #336]	; (800342c <HAL_DMA_IRQHandler+0x430>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d004      	beq.n	80032ea <HAL_DMA_IRQHandler+0x2ee>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a52      	ldr	r2, [pc, #328]	; (8003430 <HAL_DMA_IRQHandler+0x434>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d10a      	bne.n	8003300 <HAL_DMA_IRQHandler+0x304>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	bf14      	ite	ne
 80032f8:	2301      	movne	r3, #1
 80032fa:	2300      	moveq	r3, #0
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	e003      	b.n	8003308 <HAL_DMA_IRQHandler+0x30c>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2300      	movs	r3, #0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00d      	beq.n	8003328 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003310:	f003 031f 	and.w	r3, r3, #31
 8003314:	2201      	movs	r2, #1
 8003316:	409a      	lsls	r2, r3
 8003318:	6a3b      	ldr	r3, [r7, #32]
 800331a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003320:	f043 0202 	orr.w	r2, r3, #2
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800332c:	f003 031f 	and.w	r3, r3, #31
 8003330:	2204      	movs	r2, #4
 8003332:	409a      	lsls	r2, r3
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	4013      	ands	r3, r2
 8003338:	2b00      	cmp	r3, #0
 800333a:	f000 808f 	beq.w	800345c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a2c      	ldr	r2, [pc, #176]	; (80033f4 <HAL_DMA_IRQHandler+0x3f8>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d04a      	beq.n	80033de <HAL_DMA_IRQHandler+0x3e2>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a2a      	ldr	r2, [pc, #168]	; (80033f8 <HAL_DMA_IRQHandler+0x3fc>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d045      	beq.n	80033de <HAL_DMA_IRQHandler+0x3e2>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a29      	ldr	r2, [pc, #164]	; (80033fc <HAL_DMA_IRQHandler+0x400>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d040      	beq.n	80033de <HAL_DMA_IRQHandler+0x3e2>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a27      	ldr	r2, [pc, #156]	; (8003400 <HAL_DMA_IRQHandler+0x404>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d03b      	beq.n	80033de <HAL_DMA_IRQHandler+0x3e2>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a26      	ldr	r2, [pc, #152]	; (8003404 <HAL_DMA_IRQHandler+0x408>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d036      	beq.n	80033de <HAL_DMA_IRQHandler+0x3e2>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a24      	ldr	r2, [pc, #144]	; (8003408 <HAL_DMA_IRQHandler+0x40c>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d031      	beq.n	80033de <HAL_DMA_IRQHandler+0x3e2>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a23      	ldr	r2, [pc, #140]	; (800340c <HAL_DMA_IRQHandler+0x410>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d02c      	beq.n	80033de <HAL_DMA_IRQHandler+0x3e2>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a21      	ldr	r2, [pc, #132]	; (8003410 <HAL_DMA_IRQHandler+0x414>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d027      	beq.n	80033de <HAL_DMA_IRQHandler+0x3e2>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a20      	ldr	r2, [pc, #128]	; (8003414 <HAL_DMA_IRQHandler+0x418>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d022      	beq.n	80033de <HAL_DMA_IRQHandler+0x3e2>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a1e      	ldr	r2, [pc, #120]	; (8003418 <HAL_DMA_IRQHandler+0x41c>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d01d      	beq.n	80033de <HAL_DMA_IRQHandler+0x3e2>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a1d      	ldr	r2, [pc, #116]	; (800341c <HAL_DMA_IRQHandler+0x420>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d018      	beq.n	80033de <HAL_DMA_IRQHandler+0x3e2>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a1b      	ldr	r2, [pc, #108]	; (8003420 <HAL_DMA_IRQHandler+0x424>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d013      	beq.n	80033de <HAL_DMA_IRQHandler+0x3e2>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a1a      	ldr	r2, [pc, #104]	; (8003424 <HAL_DMA_IRQHandler+0x428>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d00e      	beq.n	80033de <HAL_DMA_IRQHandler+0x3e2>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a18      	ldr	r2, [pc, #96]	; (8003428 <HAL_DMA_IRQHandler+0x42c>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d009      	beq.n	80033de <HAL_DMA_IRQHandler+0x3e2>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a17      	ldr	r2, [pc, #92]	; (800342c <HAL_DMA_IRQHandler+0x430>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d004      	beq.n	80033de <HAL_DMA_IRQHandler+0x3e2>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a15      	ldr	r2, [pc, #84]	; (8003430 <HAL_DMA_IRQHandler+0x434>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d12a      	bne.n	8003434 <HAL_DMA_IRQHandler+0x438>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0302 	and.w	r3, r3, #2
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	bf14      	ite	ne
 80033ec:	2301      	movne	r3, #1
 80033ee:	2300      	moveq	r3, #0
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	e023      	b.n	800343c <HAL_DMA_IRQHandler+0x440>
 80033f4:	40020010 	.word	0x40020010
 80033f8:	40020028 	.word	0x40020028
 80033fc:	40020040 	.word	0x40020040
 8003400:	40020058 	.word	0x40020058
 8003404:	40020070 	.word	0x40020070
 8003408:	40020088 	.word	0x40020088
 800340c:	400200a0 	.word	0x400200a0
 8003410:	400200b8 	.word	0x400200b8
 8003414:	40020410 	.word	0x40020410
 8003418:	40020428 	.word	0x40020428
 800341c:	40020440 	.word	0x40020440
 8003420:	40020458 	.word	0x40020458
 8003424:	40020470 	.word	0x40020470
 8003428:	40020488 	.word	0x40020488
 800342c:	400204a0 	.word	0x400204a0
 8003430:	400204b8 	.word	0x400204b8
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2300      	movs	r3, #0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00d      	beq.n	800345c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003444:	f003 031f 	and.w	r3, r3, #31
 8003448:	2204      	movs	r2, #4
 800344a:	409a      	lsls	r2, r3
 800344c:	6a3b      	ldr	r3, [r7, #32]
 800344e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003454:	f043 0204 	orr.w	r2, r3, #4
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003460:	f003 031f 	and.w	r3, r3, #31
 8003464:	2210      	movs	r2, #16
 8003466:	409a      	lsls	r2, r3
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	4013      	ands	r3, r2
 800346c:	2b00      	cmp	r3, #0
 800346e:	f000 80a6 	beq.w	80035be <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a85      	ldr	r2, [pc, #532]	; (800368c <HAL_DMA_IRQHandler+0x690>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d04a      	beq.n	8003512 <HAL_DMA_IRQHandler+0x516>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a83      	ldr	r2, [pc, #524]	; (8003690 <HAL_DMA_IRQHandler+0x694>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d045      	beq.n	8003512 <HAL_DMA_IRQHandler+0x516>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a82      	ldr	r2, [pc, #520]	; (8003694 <HAL_DMA_IRQHandler+0x698>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d040      	beq.n	8003512 <HAL_DMA_IRQHandler+0x516>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a80      	ldr	r2, [pc, #512]	; (8003698 <HAL_DMA_IRQHandler+0x69c>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d03b      	beq.n	8003512 <HAL_DMA_IRQHandler+0x516>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a7f      	ldr	r2, [pc, #508]	; (800369c <HAL_DMA_IRQHandler+0x6a0>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d036      	beq.n	8003512 <HAL_DMA_IRQHandler+0x516>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a7d      	ldr	r2, [pc, #500]	; (80036a0 <HAL_DMA_IRQHandler+0x6a4>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d031      	beq.n	8003512 <HAL_DMA_IRQHandler+0x516>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a7c      	ldr	r2, [pc, #496]	; (80036a4 <HAL_DMA_IRQHandler+0x6a8>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d02c      	beq.n	8003512 <HAL_DMA_IRQHandler+0x516>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a7a      	ldr	r2, [pc, #488]	; (80036a8 <HAL_DMA_IRQHandler+0x6ac>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d027      	beq.n	8003512 <HAL_DMA_IRQHandler+0x516>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a79      	ldr	r2, [pc, #484]	; (80036ac <HAL_DMA_IRQHandler+0x6b0>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d022      	beq.n	8003512 <HAL_DMA_IRQHandler+0x516>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a77      	ldr	r2, [pc, #476]	; (80036b0 <HAL_DMA_IRQHandler+0x6b4>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d01d      	beq.n	8003512 <HAL_DMA_IRQHandler+0x516>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a76      	ldr	r2, [pc, #472]	; (80036b4 <HAL_DMA_IRQHandler+0x6b8>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d018      	beq.n	8003512 <HAL_DMA_IRQHandler+0x516>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a74      	ldr	r2, [pc, #464]	; (80036b8 <HAL_DMA_IRQHandler+0x6bc>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d013      	beq.n	8003512 <HAL_DMA_IRQHandler+0x516>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a73      	ldr	r2, [pc, #460]	; (80036bc <HAL_DMA_IRQHandler+0x6c0>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d00e      	beq.n	8003512 <HAL_DMA_IRQHandler+0x516>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a71      	ldr	r2, [pc, #452]	; (80036c0 <HAL_DMA_IRQHandler+0x6c4>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d009      	beq.n	8003512 <HAL_DMA_IRQHandler+0x516>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a70      	ldr	r2, [pc, #448]	; (80036c4 <HAL_DMA_IRQHandler+0x6c8>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d004      	beq.n	8003512 <HAL_DMA_IRQHandler+0x516>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a6e      	ldr	r2, [pc, #440]	; (80036c8 <HAL_DMA_IRQHandler+0x6cc>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d10a      	bne.n	8003528 <HAL_DMA_IRQHandler+0x52c>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0308 	and.w	r3, r3, #8
 800351c:	2b00      	cmp	r3, #0
 800351e:	bf14      	ite	ne
 8003520:	2301      	movne	r3, #1
 8003522:	2300      	moveq	r3, #0
 8003524:	b2db      	uxtb	r3, r3
 8003526:	e009      	b.n	800353c <HAL_DMA_IRQHandler+0x540>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0304 	and.w	r3, r3, #4
 8003532:	2b00      	cmp	r3, #0
 8003534:	bf14      	ite	ne
 8003536:	2301      	movne	r3, #1
 8003538:	2300      	moveq	r3, #0
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b00      	cmp	r3, #0
 800353e:	d03e      	beq.n	80035be <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003544:	f003 031f 	and.w	r3, r3, #31
 8003548:	2210      	movs	r2, #16
 800354a:	409a      	lsls	r2, r3
 800354c:	6a3b      	ldr	r3, [r7, #32]
 800354e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d018      	beq.n	8003590 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d108      	bne.n	800357e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003570:	2b00      	cmp	r3, #0
 8003572:	d024      	beq.n	80035be <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	4798      	blx	r3
 800357c:	e01f      	b.n	80035be <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003582:	2b00      	cmp	r3, #0
 8003584:	d01b      	beq.n	80035be <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	4798      	blx	r3
 800358e:	e016      	b.n	80035be <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359a:	2b00      	cmp	r3, #0
 800359c:	d107      	bne.n	80035ae <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f022 0208 	bic.w	r2, r2, #8
 80035ac:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d003      	beq.n	80035be <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c2:	f003 031f 	and.w	r3, r3, #31
 80035c6:	2220      	movs	r2, #32
 80035c8:	409a      	lsls	r2, r3
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	4013      	ands	r3, r2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	f000 8110 	beq.w	80037f4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a2c      	ldr	r2, [pc, #176]	; (800368c <HAL_DMA_IRQHandler+0x690>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d04a      	beq.n	8003674 <HAL_DMA_IRQHandler+0x678>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a2b      	ldr	r2, [pc, #172]	; (8003690 <HAL_DMA_IRQHandler+0x694>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d045      	beq.n	8003674 <HAL_DMA_IRQHandler+0x678>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a29      	ldr	r2, [pc, #164]	; (8003694 <HAL_DMA_IRQHandler+0x698>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d040      	beq.n	8003674 <HAL_DMA_IRQHandler+0x678>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a28      	ldr	r2, [pc, #160]	; (8003698 <HAL_DMA_IRQHandler+0x69c>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d03b      	beq.n	8003674 <HAL_DMA_IRQHandler+0x678>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a26      	ldr	r2, [pc, #152]	; (800369c <HAL_DMA_IRQHandler+0x6a0>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d036      	beq.n	8003674 <HAL_DMA_IRQHandler+0x678>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a25      	ldr	r2, [pc, #148]	; (80036a0 <HAL_DMA_IRQHandler+0x6a4>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d031      	beq.n	8003674 <HAL_DMA_IRQHandler+0x678>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a23      	ldr	r2, [pc, #140]	; (80036a4 <HAL_DMA_IRQHandler+0x6a8>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d02c      	beq.n	8003674 <HAL_DMA_IRQHandler+0x678>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a22      	ldr	r2, [pc, #136]	; (80036a8 <HAL_DMA_IRQHandler+0x6ac>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d027      	beq.n	8003674 <HAL_DMA_IRQHandler+0x678>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a20      	ldr	r2, [pc, #128]	; (80036ac <HAL_DMA_IRQHandler+0x6b0>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d022      	beq.n	8003674 <HAL_DMA_IRQHandler+0x678>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a1f      	ldr	r2, [pc, #124]	; (80036b0 <HAL_DMA_IRQHandler+0x6b4>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d01d      	beq.n	8003674 <HAL_DMA_IRQHandler+0x678>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a1d      	ldr	r2, [pc, #116]	; (80036b4 <HAL_DMA_IRQHandler+0x6b8>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d018      	beq.n	8003674 <HAL_DMA_IRQHandler+0x678>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a1c      	ldr	r2, [pc, #112]	; (80036b8 <HAL_DMA_IRQHandler+0x6bc>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d013      	beq.n	8003674 <HAL_DMA_IRQHandler+0x678>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a1a      	ldr	r2, [pc, #104]	; (80036bc <HAL_DMA_IRQHandler+0x6c0>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d00e      	beq.n	8003674 <HAL_DMA_IRQHandler+0x678>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a19      	ldr	r2, [pc, #100]	; (80036c0 <HAL_DMA_IRQHandler+0x6c4>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d009      	beq.n	8003674 <HAL_DMA_IRQHandler+0x678>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a17      	ldr	r2, [pc, #92]	; (80036c4 <HAL_DMA_IRQHandler+0x6c8>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d004      	beq.n	8003674 <HAL_DMA_IRQHandler+0x678>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a16      	ldr	r2, [pc, #88]	; (80036c8 <HAL_DMA_IRQHandler+0x6cc>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d12b      	bne.n	80036cc <HAL_DMA_IRQHandler+0x6d0>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0310 	and.w	r3, r3, #16
 800367e:	2b00      	cmp	r3, #0
 8003680:	bf14      	ite	ne
 8003682:	2301      	movne	r3, #1
 8003684:	2300      	moveq	r3, #0
 8003686:	b2db      	uxtb	r3, r3
 8003688:	e02a      	b.n	80036e0 <HAL_DMA_IRQHandler+0x6e4>
 800368a:	bf00      	nop
 800368c:	40020010 	.word	0x40020010
 8003690:	40020028 	.word	0x40020028
 8003694:	40020040 	.word	0x40020040
 8003698:	40020058 	.word	0x40020058
 800369c:	40020070 	.word	0x40020070
 80036a0:	40020088 	.word	0x40020088
 80036a4:	400200a0 	.word	0x400200a0
 80036a8:	400200b8 	.word	0x400200b8
 80036ac:	40020410 	.word	0x40020410
 80036b0:	40020428 	.word	0x40020428
 80036b4:	40020440 	.word	0x40020440
 80036b8:	40020458 	.word	0x40020458
 80036bc:	40020470 	.word	0x40020470
 80036c0:	40020488 	.word	0x40020488
 80036c4:	400204a0 	.word	0x400204a0
 80036c8:	400204b8 	.word	0x400204b8
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	bf14      	ite	ne
 80036da:	2301      	movne	r3, #1
 80036dc:	2300      	moveq	r3, #0
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	f000 8087 	beq.w	80037f4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ea:	f003 031f 	and.w	r3, r3, #31
 80036ee:	2220      	movs	r2, #32
 80036f0:	409a      	lsls	r2, r3
 80036f2:	6a3b      	ldr	r3, [r7, #32]
 80036f4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b04      	cmp	r3, #4
 8003700:	d139      	bne.n	8003776 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 0216 	bic.w	r2, r2, #22
 8003710:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	695a      	ldr	r2, [r3, #20]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003720:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	2b00      	cmp	r3, #0
 8003728:	d103      	bne.n	8003732 <HAL_DMA_IRQHandler+0x736>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800372e:	2b00      	cmp	r3, #0
 8003730:	d007      	beq.n	8003742 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 0208 	bic.w	r2, r2, #8
 8003740:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003746:	f003 031f 	and.w	r3, r3, #31
 800374a:	223f      	movs	r2, #63	; 0x3f
 800374c:	409a      	lsls	r2, r3
 800374e:	6a3b      	ldr	r3, [r7, #32]
 8003750:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003766:	2b00      	cmp	r3, #0
 8003768:	f000 834a 	beq.w	8003e00 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	4798      	blx	r3
          }
          return;
 8003774:	e344      	b.n	8003e00 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d018      	beq.n	80037b6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d108      	bne.n	80037a4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003796:	2b00      	cmp	r3, #0
 8003798:	d02c      	beq.n	80037f4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	4798      	blx	r3
 80037a2:	e027      	b.n	80037f4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d023      	beq.n	80037f4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	4798      	blx	r3
 80037b4:	e01e      	b.n	80037f4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d10f      	bne.n	80037e4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 0210 	bic.w	r2, r2, #16
 80037d2:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d003      	beq.n	80037f4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	f000 8306 	beq.w	8003e0a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b00      	cmp	r3, #0
 8003808:	f000 8088 	beq.w	800391c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2204      	movs	r2, #4
 8003810:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a7a      	ldr	r2, [pc, #488]	; (8003a04 <HAL_DMA_IRQHandler+0xa08>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d04a      	beq.n	80038b4 <HAL_DMA_IRQHandler+0x8b8>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a79      	ldr	r2, [pc, #484]	; (8003a08 <HAL_DMA_IRQHandler+0xa0c>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d045      	beq.n	80038b4 <HAL_DMA_IRQHandler+0x8b8>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a77      	ldr	r2, [pc, #476]	; (8003a0c <HAL_DMA_IRQHandler+0xa10>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d040      	beq.n	80038b4 <HAL_DMA_IRQHandler+0x8b8>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a76      	ldr	r2, [pc, #472]	; (8003a10 <HAL_DMA_IRQHandler+0xa14>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d03b      	beq.n	80038b4 <HAL_DMA_IRQHandler+0x8b8>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a74      	ldr	r2, [pc, #464]	; (8003a14 <HAL_DMA_IRQHandler+0xa18>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d036      	beq.n	80038b4 <HAL_DMA_IRQHandler+0x8b8>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a73      	ldr	r2, [pc, #460]	; (8003a18 <HAL_DMA_IRQHandler+0xa1c>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d031      	beq.n	80038b4 <HAL_DMA_IRQHandler+0x8b8>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a71      	ldr	r2, [pc, #452]	; (8003a1c <HAL_DMA_IRQHandler+0xa20>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d02c      	beq.n	80038b4 <HAL_DMA_IRQHandler+0x8b8>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a70      	ldr	r2, [pc, #448]	; (8003a20 <HAL_DMA_IRQHandler+0xa24>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d027      	beq.n	80038b4 <HAL_DMA_IRQHandler+0x8b8>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a6e      	ldr	r2, [pc, #440]	; (8003a24 <HAL_DMA_IRQHandler+0xa28>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d022      	beq.n	80038b4 <HAL_DMA_IRQHandler+0x8b8>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a6d      	ldr	r2, [pc, #436]	; (8003a28 <HAL_DMA_IRQHandler+0xa2c>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d01d      	beq.n	80038b4 <HAL_DMA_IRQHandler+0x8b8>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a6b      	ldr	r2, [pc, #428]	; (8003a2c <HAL_DMA_IRQHandler+0xa30>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d018      	beq.n	80038b4 <HAL_DMA_IRQHandler+0x8b8>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a6a      	ldr	r2, [pc, #424]	; (8003a30 <HAL_DMA_IRQHandler+0xa34>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d013      	beq.n	80038b4 <HAL_DMA_IRQHandler+0x8b8>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a68      	ldr	r2, [pc, #416]	; (8003a34 <HAL_DMA_IRQHandler+0xa38>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d00e      	beq.n	80038b4 <HAL_DMA_IRQHandler+0x8b8>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a67      	ldr	r2, [pc, #412]	; (8003a38 <HAL_DMA_IRQHandler+0xa3c>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d009      	beq.n	80038b4 <HAL_DMA_IRQHandler+0x8b8>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a65      	ldr	r2, [pc, #404]	; (8003a3c <HAL_DMA_IRQHandler+0xa40>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d004      	beq.n	80038b4 <HAL_DMA_IRQHandler+0x8b8>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a64      	ldr	r2, [pc, #400]	; (8003a40 <HAL_DMA_IRQHandler+0xa44>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d108      	bne.n	80038c6 <HAL_DMA_IRQHandler+0x8ca>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 0201 	bic.w	r2, r2, #1
 80038c2:	601a      	str	r2, [r3, #0]
 80038c4:	e007      	b.n	80038d6 <HAL_DMA_IRQHandler+0x8da>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 0201 	bic.w	r2, r2, #1
 80038d4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	3301      	adds	r3, #1
 80038da:	60fb      	str	r3, [r7, #12]
 80038dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038de:	429a      	cmp	r2, r3
 80038e0:	d307      	bcc.n	80038f2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0301 	and.w	r3, r3, #1
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1f2      	bne.n	80038d6 <HAL_DMA_IRQHandler+0x8da>
 80038f0:	e000      	b.n	80038f4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80038f2:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	2b00      	cmp	r3, #0
 8003908:	d004      	beq.n	8003914 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2203      	movs	r2, #3
 800390e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003912:	e003      	b.n	800391c <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 8272 	beq.w	8003e0a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	4798      	blx	r3
 800392e:	e26c      	b.n	8003e0a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a43      	ldr	r2, [pc, #268]	; (8003a44 <HAL_DMA_IRQHandler+0xa48>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d022      	beq.n	8003980 <HAL_DMA_IRQHandler+0x984>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a42      	ldr	r2, [pc, #264]	; (8003a48 <HAL_DMA_IRQHandler+0xa4c>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d01d      	beq.n	8003980 <HAL_DMA_IRQHandler+0x984>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a40      	ldr	r2, [pc, #256]	; (8003a4c <HAL_DMA_IRQHandler+0xa50>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d018      	beq.n	8003980 <HAL_DMA_IRQHandler+0x984>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a3f      	ldr	r2, [pc, #252]	; (8003a50 <HAL_DMA_IRQHandler+0xa54>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d013      	beq.n	8003980 <HAL_DMA_IRQHandler+0x984>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a3d      	ldr	r2, [pc, #244]	; (8003a54 <HAL_DMA_IRQHandler+0xa58>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d00e      	beq.n	8003980 <HAL_DMA_IRQHandler+0x984>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a3c      	ldr	r2, [pc, #240]	; (8003a58 <HAL_DMA_IRQHandler+0xa5c>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d009      	beq.n	8003980 <HAL_DMA_IRQHandler+0x984>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a3a      	ldr	r2, [pc, #232]	; (8003a5c <HAL_DMA_IRQHandler+0xa60>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d004      	beq.n	8003980 <HAL_DMA_IRQHandler+0x984>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a39      	ldr	r2, [pc, #228]	; (8003a60 <HAL_DMA_IRQHandler+0xa64>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d101      	bne.n	8003984 <HAL_DMA_IRQHandler+0x988>
 8003980:	2301      	movs	r3, #1
 8003982:	e000      	b.n	8003986 <HAL_DMA_IRQHandler+0x98a>
 8003984:	2300      	movs	r3, #0
 8003986:	2b00      	cmp	r3, #0
 8003988:	f000 823f 	beq.w	8003e0a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003998:	f003 031f 	and.w	r3, r3, #31
 800399c:	2204      	movs	r2, #4
 800399e:	409a      	lsls	r2, r3
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	4013      	ands	r3, r2
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f000 80cd 	beq.w	8003b44 <HAL_DMA_IRQHandler+0xb48>
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	f003 0304 	and.w	r3, r3, #4
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f000 80c7 	beq.w	8003b44 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ba:	f003 031f 	and.w	r3, r3, #31
 80039be:	2204      	movs	r2, #4
 80039c0:	409a      	lsls	r2, r3
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d049      	beq.n	8003a64 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d109      	bne.n	80039ee <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f000 8210 	beq.w	8003e04 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039ec:	e20a      	b.n	8003e04 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	f000 8206 	beq.w	8003e04 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a00:	e200      	b.n	8003e04 <HAL_DMA_IRQHandler+0xe08>
 8003a02:	bf00      	nop
 8003a04:	40020010 	.word	0x40020010
 8003a08:	40020028 	.word	0x40020028
 8003a0c:	40020040 	.word	0x40020040
 8003a10:	40020058 	.word	0x40020058
 8003a14:	40020070 	.word	0x40020070
 8003a18:	40020088 	.word	0x40020088
 8003a1c:	400200a0 	.word	0x400200a0
 8003a20:	400200b8 	.word	0x400200b8
 8003a24:	40020410 	.word	0x40020410
 8003a28:	40020428 	.word	0x40020428
 8003a2c:	40020440 	.word	0x40020440
 8003a30:	40020458 	.word	0x40020458
 8003a34:	40020470 	.word	0x40020470
 8003a38:	40020488 	.word	0x40020488
 8003a3c:	400204a0 	.word	0x400204a0
 8003a40:	400204b8 	.word	0x400204b8
 8003a44:	58025408 	.word	0x58025408
 8003a48:	5802541c 	.word	0x5802541c
 8003a4c:	58025430 	.word	0x58025430
 8003a50:	58025444 	.word	0x58025444
 8003a54:	58025458 	.word	0x58025458
 8003a58:	5802546c 	.word	0x5802546c
 8003a5c:	58025480 	.word	0x58025480
 8003a60:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	f003 0320 	and.w	r3, r3, #32
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d160      	bne.n	8003b30 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a8c      	ldr	r2, [pc, #560]	; (8003ca4 <HAL_DMA_IRQHandler+0xca8>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d04a      	beq.n	8003b0e <HAL_DMA_IRQHandler+0xb12>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a8a      	ldr	r2, [pc, #552]	; (8003ca8 <HAL_DMA_IRQHandler+0xcac>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d045      	beq.n	8003b0e <HAL_DMA_IRQHandler+0xb12>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a89      	ldr	r2, [pc, #548]	; (8003cac <HAL_DMA_IRQHandler+0xcb0>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d040      	beq.n	8003b0e <HAL_DMA_IRQHandler+0xb12>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a87      	ldr	r2, [pc, #540]	; (8003cb0 <HAL_DMA_IRQHandler+0xcb4>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d03b      	beq.n	8003b0e <HAL_DMA_IRQHandler+0xb12>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a86      	ldr	r2, [pc, #536]	; (8003cb4 <HAL_DMA_IRQHandler+0xcb8>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d036      	beq.n	8003b0e <HAL_DMA_IRQHandler+0xb12>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a84      	ldr	r2, [pc, #528]	; (8003cb8 <HAL_DMA_IRQHandler+0xcbc>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d031      	beq.n	8003b0e <HAL_DMA_IRQHandler+0xb12>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a83      	ldr	r2, [pc, #524]	; (8003cbc <HAL_DMA_IRQHandler+0xcc0>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d02c      	beq.n	8003b0e <HAL_DMA_IRQHandler+0xb12>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a81      	ldr	r2, [pc, #516]	; (8003cc0 <HAL_DMA_IRQHandler+0xcc4>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d027      	beq.n	8003b0e <HAL_DMA_IRQHandler+0xb12>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a80      	ldr	r2, [pc, #512]	; (8003cc4 <HAL_DMA_IRQHandler+0xcc8>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d022      	beq.n	8003b0e <HAL_DMA_IRQHandler+0xb12>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a7e      	ldr	r2, [pc, #504]	; (8003cc8 <HAL_DMA_IRQHandler+0xccc>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d01d      	beq.n	8003b0e <HAL_DMA_IRQHandler+0xb12>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a7d      	ldr	r2, [pc, #500]	; (8003ccc <HAL_DMA_IRQHandler+0xcd0>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d018      	beq.n	8003b0e <HAL_DMA_IRQHandler+0xb12>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a7b      	ldr	r2, [pc, #492]	; (8003cd0 <HAL_DMA_IRQHandler+0xcd4>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d013      	beq.n	8003b0e <HAL_DMA_IRQHandler+0xb12>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a7a      	ldr	r2, [pc, #488]	; (8003cd4 <HAL_DMA_IRQHandler+0xcd8>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d00e      	beq.n	8003b0e <HAL_DMA_IRQHandler+0xb12>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a78      	ldr	r2, [pc, #480]	; (8003cd8 <HAL_DMA_IRQHandler+0xcdc>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d009      	beq.n	8003b0e <HAL_DMA_IRQHandler+0xb12>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a77      	ldr	r2, [pc, #476]	; (8003cdc <HAL_DMA_IRQHandler+0xce0>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d004      	beq.n	8003b0e <HAL_DMA_IRQHandler+0xb12>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a75      	ldr	r2, [pc, #468]	; (8003ce0 <HAL_DMA_IRQHandler+0xce4>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d108      	bne.n	8003b20 <HAL_DMA_IRQHandler+0xb24>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 0208 	bic.w	r2, r2, #8
 8003b1c:	601a      	str	r2, [r3, #0]
 8003b1e:	e007      	b.n	8003b30 <HAL_DMA_IRQHandler+0xb34>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f022 0204 	bic.w	r2, r2, #4
 8003b2e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f000 8165 	beq.w	8003e04 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b42:	e15f      	b.n	8003e04 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b48:	f003 031f 	and.w	r3, r3, #31
 8003b4c:	2202      	movs	r2, #2
 8003b4e:	409a      	lsls	r2, r3
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	4013      	ands	r3, r2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f000 80c5 	beq.w	8003ce4 <HAL_DMA_IRQHandler+0xce8>
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 80bf 	beq.w	8003ce4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b6a:	f003 031f 	and.w	r3, r3, #31
 8003b6e:	2202      	movs	r2, #2
 8003b70:	409a      	lsls	r2, r3
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d018      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d109      	bne.n	8003b9e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f000 813a 	beq.w	8003e08 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b9c:	e134      	b.n	8003e08 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f000 8130 	beq.w	8003e08 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bb0:	e12a      	b.n	8003e08 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	f003 0320 	and.w	r3, r3, #32
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d168      	bne.n	8003c8e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a38      	ldr	r2, [pc, #224]	; (8003ca4 <HAL_DMA_IRQHandler+0xca8>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d04a      	beq.n	8003c5c <HAL_DMA_IRQHandler+0xc60>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a37      	ldr	r2, [pc, #220]	; (8003ca8 <HAL_DMA_IRQHandler+0xcac>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d045      	beq.n	8003c5c <HAL_DMA_IRQHandler+0xc60>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a35      	ldr	r2, [pc, #212]	; (8003cac <HAL_DMA_IRQHandler+0xcb0>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d040      	beq.n	8003c5c <HAL_DMA_IRQHandler+0xc60>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a34      	ldr	r2, [pc, #208]	; (8003cb0 <HAL_DMA_IRQHandler+0xcb4>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d03b      	beq.n	8003c5c <HAL_DMA_IRQHandler+0xc60>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a32      	ldr	r2, [pc, #200]	; (8003cb4 <HAL_DMA_IRQHandler+0xcb8>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d036      	beq.n	8003c5c <HAL_DMA_IRQHandler+0xc60>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a31      	ldr	r2, [pc, #196]	; (8003cb8 <HAL_DMA_IRQHandler+0xcbc>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d031      	beq.n	8003c5c <HAL_DMA_IRQHandler+0xc60>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a2f      	ldr	r2, [pc, #188]	; (8003cbc <HAL_DMA_IRQHandler+0xcc0>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d02c      	beq.n	8003c5c <HAL_DMA_IRQHandler+0xc60>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a2e      	ldr	r2, [pc, #184]	; (8003cc0 <HAL_DMA_IRQHandler+0xcc4>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d027      	beq.n	8003c5c <HAL_DMA_IRQHandler+0xc60>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a2c      	ldr	r2, [pc, #176]	; (8003cc4 <HAL_DMA_IRQHandler+0xcc8>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d022      	beq.n	8003c5c <HAL_DMA_IRQHandler+0xc60>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a2b      	ldr	r2, [pc, #172]	; (8003cc8 <HAL_DMA_IRQHandler+0xccc>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d01d      	beq.n	8003c5c <HAL_DMA_IRQHandler+0xc60>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a29      	ldr	r2, [pc, #164]	; (8003ccc <HAL_DMA_IRQHandler+0xcd0>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d018      	beq.n	8003c5c <HAL_DMA_IRQHandler+0xc60>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a28      	ldr	r2, [pc, #160]	; (8003cd0 <HAL_DMA_IRQHandler+0xcd4>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d013      	beq.n	8003c5c <HAL_DMA_IRQHandler+0xc60>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a26      	ldr	r2, [pc, #152]	; (8003cd4 <HAL_DMA_IRQHandler+0xcd8>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d00e      	beq.n	8003c5c <HAL_DMA_IRQHandler+0xc60>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a25      	ldr	r2, [pc, #148]	; (8003cd8 <HAL_DMA_IRQHandler+0xcdc>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d009      	beq.n	8003c5c <HAL_DMA_IRQHandler+0xc60>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a23      	ldr	r2, [pc, #140]	; (8003cdc <HAL_DMA_IRQHandler+0xce0>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d004      	beq.n	8003c5c <HAL_DMA_IRQHandler+0xc60>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a22      	ldr	r2, [pc, #136]	; (8003ce0 <HAL_DMA_IRQHandler+0xce4>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d108      	bne.n	8003c6e <HAL_DMA_IRQHandler+0xc72>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f022 0214 	bic.w	r2, r2, #20
 8003c6a:	601a      	str	r2, [r3, #0]
 8003c6c:	e007      	b.n	8003c7e <HAL_DMA_IRQHandler+0xc82>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f022 020a 	bic.w	r2, r2, #10
 8003c7c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f000 80b8 	beq.w	8003e08 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ca0:	e0b2      	b.n	8003e08 <HAL_DMA_IRQHandler+0xe0c>
 8003ca2:	bf00      	nop
 8003ca4:	40020010 	.word	0x40020010
 8003ca8:	40020028 	.word	0x40020028
 8003cac:	40020040 	.word	0x40020040
 8003cb0:	40020058 	.word	0x40020058
 8003cb4:	40020070 	.word	0x40020070
 8003cb8:	40020088 	.word	0x40020088
 8003cbc:	400200a0 	.word	0x400200a0
 8003cc0:	400200b8 	.word	0x400200b8
 8003cc4:	40020410 	.word	0x40020410
 8003cc8:	40020428 	.word	0x40020428
 8003ccc:	40020440 	.word	0x40020440
 8003cd0:	40020458 	.word	0x40020458
 8003cd4:	40020470 	.word	0x40020470
 8003cd8:	40020488 	.word	0x40020488
 8003cdc:	400204a0 	.word	0x400204a0
 8003ce0:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ce8:	f003 031f 	and.w	r3, r3, #31
 8003cec:	2208      	movs	r2, #8
 8003cee:	409a      	lsls	r2, r3
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	f000 8088 	beq.w	8003e0a <HAL_DMA_IRQHandler+0xe0e>
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	f003 0308 	and.w	r3, r3, #8
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f000 8082 	beq.w	8003e0a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a41      	ldr	r2, [pc, #260]	; (8003e10 <HAL_DMA_IRQHandler+0xe14>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d04a      	beq.n	8003da6 <HAL_DMA_IRQHandler+0xdaa>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a3f      	ldr	r2, [pc, #252]	; (8003e14 <HAL_DMA_IRQHandler+0xe18>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d045      	beq.n	8003da6 <HAL_DMA_IRQHandler+0xdaa>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a3e      	ldr	r2, [pc, #248]	; (8003e18 <HAL_DMA_IRQHandler+0xe1c>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d040      	beq.n	8003da6 <HAL_DMA_IRQHandler+0xdaa>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a3c      	ldr	r2, [pc, #240]	; (8003e1c <HAL_DMA_IRQHandler+0xe20>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d03b      	beq.n	8003da6 <HAL_DMA_IRQHandler+0xdaa>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a3b      	ldr	r2, [pc, #236]	; (8003e20 <HAL_DMA_IRQHandler+0xe24>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d036      	beq.n	8003da6 <HAL_DMA_IRQHandler+0xdaa>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a39      	ldr	r2, [pc, #228]	; (8003e24 <HAL_DMA_IRQHandler+0xe28>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d031      	beq.n	8003da6 <HAL_DMA_IRQHandler+0xdaa>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a38      	ldr	r2, [pc, #224]	; (8003e28 <HAL_DMA_IRQHandler+0xe2c>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d02c      	beq.n	8003da6 <HAL_DMA_IRQHandler+0xdaa>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a36      	ldr	r2, [pc, #216]	; (8003e2c <HAL_DMA_IRQHandler+0xe30>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d027      	beq.n	8003da6 <HAL_DMA_IRQHandler+0xdaa>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a35      	ldr	r2, [pc, #212]	; (8003e30 <HAL_DMA_IRQHandler+0xe34>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d022      	beq.n	8003da6 <HAL_DMA_IRQHandler+0xdaa>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a33      	ldr	r2, [pc, #204]	; (8003e34 <HAL_DMA_IRQHandler+0xe38>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d01d      	beq.n	8003da6 <HAL_DMA_IRQHandler+0xdaa>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a32      	ldr	r2, [pc, #200]	; (8003e38 <HAL_DMA_IRQHandler+0xe3c>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d018      	beq.n	8003da6 <HAL_DMA_IRQHandler+0xdaa>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a30      	ldr	r2, [pc, #192]	; (8003e3c <HAL_DMA_IRQHandler+0xe40>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d013      	beq.n	8003da6 <HAL_DMA_IRQHandler+0xdaa>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a2f      	ldr	r2, [pc, #188]	; (8003e40 <HAL_DMA_IRQHandler+0xe44>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d00e      	beq.n	8003da6 <HAL_DMA_IRQHandler+0xdaa>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a2d      	ldr	r2, [pc, #180]	; (8003e44 <HAL_DMA_IRQHandler+0xe48>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d009      	beq.n	8003da6 <HAL_DMA_IRQHandler+0xdaa>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a2c      	ldr	r2, [pc, #176]	; (8003e48 <HAL_DMA_IRQHandler+0xe4c>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d004      	beq.n	8003da6 <HAL_DMA_IRQHandler+0xdaa>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a2a      	ldr	r2, [pc, #168]	; (8003e4c <HAL_DMA_IRQHandler+0xe50>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d108      	bne.n	8003db8 <HAL_DMA_IRQHandler+0xdbc>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f022 021c 	bic.w	r2, r2, #28
 8003db4:	601a      	str	r2, [r3, #0]
 8003db6:	e007      	b.n	8003dc8 <HAL_DMA_IRQHandler+0xdcc>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 020e 	bic.w	r2, r2, #14
 8003dc6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dcc:	f003 031f 	and.w	r3, r3, #31
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	409a      	lsls	r2, r3
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d009      	beq.n	8003e0a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	4798      	blx	r3
 8003dfe:	e004      	b.n	8003e0a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003e00:	bf00      	nop
 8003e02:	e002      	b.n	8003e0a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e04:	bf00      	nop
 8003e06:	e000      	b.n	8003e0a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e08:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003e0a:	3728      	adds	r7, #40	; 0x28
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	40020010 	.word	0x40020010
 8003e14:	40020028 	.word	0x40020028
 8003e18:	40020040 	.word	0x40020040
 8003e1c:	40020058 	.word	0x40020058
 8003e20:	40020070 	.word	0x40020070
 8003e24:	40020088 	.word	0x40020088
 8003e28:	400200a0 	.word	0x400200a0
 8003e2c:	400200b8 	.word	0x400200b8
 8003e30:	40020410 	.word	0x40020410
 8003e34:	40020428 	.word	0x40020428
 8003e38:	40020440 	.word	0x40020440
 8003e3c:	40020458 	.word	0x40020458
 8003e40:	40020470 	.word	0x40020470
 8003e44:	40020488 	.word	0x40020488
 8003e48:	400204a0 	.word	0x400204a0
 8003e4c:	400204b8 	.word	0x400204b8

08003e50 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b085      	sub	sp, #20
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a42      	ldr	r2, [pc, #264]	; (8003f68 <DMA_CalcBaseAndBitshift+0x118>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d04a      	beq.n	8003ef8 <DMA_CalcBaseAndBitshift+0xa8>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a41      	ldr	r2, [pc, #260]	; (8003f6c <DMA_CalcBaseAndBitshift+0x11c>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d045      	beq.n	8003ef8 <DMA_CalcBaseAndBitshift+0xa8>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a3f      	ldr	r2, [pc, #252]	; (8003f70 <DMA_CalcBaseAndBitshift+0x120>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d040      	beq.n	8003ef8 <DMA_CalcBaseAndBitshift+0xa8>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a3e      	ldr	r2, [pc, #248]	; (8003f74 <DMA_CalcBaseAndBitshift+0x124>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d03b      	beq.n	8003ef8 <DMA_CalcBaseAndBitshift+0xa8>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a3c      	ldr	r2, [pc, #240]	; (8003f78 <DMA_CalcBaseAndBitshift+0x128>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d036      	beq.n	8003ef8 <DMA_CalcBaseAndBitshift+0xa8>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a3b      	ldr	r2, [pc, #236]	; (8003f7c <DMA_CalcBaseAndBitshift+0x12c>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d031      	beq.n	8003ef8 <DMA_CalcBaseAndBitshift+0xa8>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a39      	ldr	r2, [pc, #228]	; (8003f80 <DMA_CalcBaseAndBitshift+0x130>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d02c      	beq.n	8003ef8 <DMA_CalcBaseAndBitshift+0xa8>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a38      	ldr	r2, [pc, #224]	; (8003f84 <DMA_CalcBaseAndBitshift+0x134>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d027      	beq.n	8003ef8 <DMA_CalcBaseAndBitshift+0xa8>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a36      	ldr	r2, [pc, #216]	; (8003f88 <DMA_CalcBaseAndBitshift+0x138>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d022      	beq.n	8003ef8 <DMA_CalcBaseAndBitshift+0xa8>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a35      	ldr	r2, [pc, #212]	; (8003f8c <DMA_CalcBaseAndBitshift+0x13c>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d01d      	beq.n	8003ef8 <DMA_CalcBaseAndBitshift+0xa8>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a33      	ldr	r2, [pc, #204]	; (8003f90 <DMA_CalcBaseAndBitshift+0x140>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d018      	beq.n	8003ef8 <DMA_CalcBaseAndBitshift+0xa8>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a32      	ldr	r2, [pc, #200]	; (8003f94 <DMA_CalcBaseAndBitshift+0x144>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d013      	beq.n	8003ef8 <DMA_CalcBaseAndBitshift+0xa8>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a30      	ldr	r2, [pc, #192]	; (8003f98 <DMA_CalcBaseAndBitshift+0x148>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d00e      	beq.n	8003ef8 <DMA_CalcBaseAndBitshift+0xa8>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a2f      	ldr	r2, [pc, #188]	; (8003f9c <DMA_CalcBaseAndBitshift+0x14c>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d009      	beq.n	8003ef8 <DMA_CalcBaseAndBitshift+0xa8>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a2d      	ldr	r2, [pc, #180]	; (8003fa0 <DMA_CalcBaseAndBitshift+0x150>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d004      	beq.n	8003ef8 <DMA_CalcBaseAndBitshift+0xa8>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a2c      	ldr	r2, [pc, #176]	; (8003fa4 <DMA_CalcBaseAndBitshift+0x154>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d101      	bne.n	8003efc <DMA_CalcBaseAndBitshift+0xac>
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e000      	b.n	8003efe <DMA_CalcBaseAndBitshift+0xae>
 8003efc:	2300      	movs	r3, #0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d024      	beq.n	8003f4c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	3b10      	subs	r3, #16
 8003f0a:	4a27      	ldr	r2, [pc, #156]	; (8003fa8 <DMA_CalcBaseAndBitshift+0x158>)
 8003f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f10:	091b      	lsrs	r3, r3, #4
 8003f12:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f003 0307 	and.w	r3, r3, #7
 8003f1a:	4a24      	ldr	r2, [pc, #144]	; (8003fac <DMA_CalcBaseAndBitshift+0x15c>)
 8003f1c:	5cd3      	ldrb	r3, [r2, r3]
 8003f1e:	461a      	mov	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2b03      	cmp	r3, #3
 8003f28:	d908      	bls.n	8003f3c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	4b1f      	ldr	r3, [pc, #124]	; (8003fb0 <DMA_CalcBaseAndBitshift+0x160>)
 8003f32:	4013      	ands	r3, r2
 8003f34:	1d1a      	adds	r2, r3, #4
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	659a      	str	r2, [r3, #88]	; 0x58
 8003f3a:	e00d      	b.n	8003f58 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	461a      	mov	r2, r3
 8003f42:	4b1b      	ldr	r3, [pc, #108]	; (8003fb0 <DMA_CalcBaseAndBitshift+0x160>)
 8003f44:	4013      	ands	r3, r2
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	6593      	str	r3, [r2, #88]	; 0x58
 8003f4a:	e005      	b.n	8003f58 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3714      	adds	r7, #20
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr
 8003f68:	40020010 	.word	0x40020010
 8003f6c:	40020028 	.word	0x40020028
 8003f70:	40020040 	.word	0x40020040
 8003f74:	40020058 	.word	0x40020058
 8003f78:	40020070 	.word	0x40020070
 8003f7c:	40020088 	.word	0x40020088
 8003f80:	400200a0 	.word	0x400200a0
 8003f84:	400200b8 	.word	0x400200b8
 8003f88:	40020410 	.word	0x40020410
 8003f8c:	40020428 	.word	0x40020428
 8003f90:	40020440 	.word	0x40020440
 8003f94:	40020458 	.word	0x40020458
 8003f98:	40020470 	.word	0x40020470
 8003f9c:	40020488 	.word	0x40020488
 8003fa0:	400204a0 	.word	0x400204a0
 8003fa4:	400204b8 	.word	0x400204b8
 8003fa8:	aaaaaaab 	.word	0xaaaaaaab
 8003fac:	08007a6c 	.word	0x08007a6c
 8003fb0:	fffffc00 	.word	0xfffffc00

08003fb4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b085      	sub	sp, #20
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d120      	bne.n	800400a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fcc:	2b03      	cmp	r3, #3
 8003fce:	d858      	bhi.n	8004082 <DMA_CheckFifoParam+0xce>
 8003fd0:	a201      	add	r2, pc, #4	; (adr r2, 8003fd8 <DMA_CheckFifoParam+0x24>)
 8003fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd6:	bf00      	nop
 8003fd8:	08003fe9 	.word	0x08003fe9
 8003fdc:	08003ffb 	.word	0x08003ffb
 8003fe0:	08003fe9 	.word	0x08003fe9
 8003fe4:	08004083 	.word	0x08004083
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d048      	beq.n	8004086 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003ff8:	e045      	b.n	8004086 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004002:	d142      	bne.n	800408a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004008:	e03f      	b.n	800408a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004012:	d123      	bne.n	800405c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004018:	2b03      	cmp	r3, #3
 800401a:	d838      	bhi.n	800408e <DMA_CheckFifoParam+0xda>
 800401c:	a201      	add	r2, pc, #4	; (adr r2, 8004024 <DMA_CheckFifoParam+0x70>)
 800401e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004022:	bf00      	nop
 8004024:	08004035 	.word	0x08004035
 8004028:	0800403b 	.word	0x0800403b
 800402c:	08004035 	.word	0x08004035
 8004030:	0800404d 	.word	0x0800404d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	73fb      	strb	r3, [r7, #15]
        break;
 8004038:	e030      	b.n	800409c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d025      	beq.n	8004092 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800404a:	e022      	b.n	8004092 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004050:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004054:	d11f      	bne.n	8004096 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800405a:	e01c      	b.n	8004096 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004060:	2b02      	cmp	r3, #2
 8004062:	d902      	bls.n	800406a <DMA_CheckFifoParam+0xb6>
 8004064:	2b03      	cmp	r3, #3
 8004066:	d003      	beq.n	8004070 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004068:	e018      	b.n	800409c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	73fb      	strb	r3, [r7, #15]
        break;
 800406e:	e015      	b.n	800409c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004074:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00e      	beq.n	800409a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	73fb      	strb	r3, [r7, #15]
    break;
 8004080:	e00b      	b.n	800409a <DMA_CheckFifoParam+0xe6>
        break;
 8004082:	bf00      	nop
 8004084:	e00a      	b.n	800409c <DMA_CheckFifoParam+0xe8>
        break;
 8004086:	bf00      	nop
 8004088:	e008      	b.n	800409c <DMA_CheckFifoParam+0xe8>
        break;
 800408a:	bf00      	nop
 800408c:	e006      	b.n	800409c <DMA_CheckFifoParam+0xe8>
        break;
 800408e:	bf00      	nop
 8004090:	e004      	b.n	800409c <DMA_CheckFifoParam+0xe8>
        break;
 8004092:	bf00      	nop
 8004094:	e002      	b.n	800409c <DMA_CheckFifoParam+0xe8>
        break;
 8004096:	bf00      	nop
 8004098:	e000      	b.n	800409c <DMA_CheckFifoParam+0xe8>
    break;
 800409a:	bf00      	nop
    }
  }

  return status;
 800409c:	7bfb      	ldrb	r3, [r7, #15]
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3714      	adds	r7, #20
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop

080040ac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a38      	ldr	r2, [pc, #224]	; (80041a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d022      	beq.n	800410a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a36      	ldr	r2, [pc, #216]	; (80041a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d01d      	beq.n	800410a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a35      	ldr	r2, [pc, #212]	; (80041a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d018      	beq.n	800410a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a33      	ldr	r2, [pc, #204]	; (80041ac <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d013      	beq.n	800410a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a32      	ldr	r2, [pc, #200]	; (80041b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d00e      	beq.n	800410a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a30      	ldr	r2, [pc, #192]	; (80041b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d009      	beq.n	800410a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a2f      	ldr	r2, [pc, #188]	; (80041b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d004      	beq.n	800410a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a2d      	ldr	r2, [pc, #180]	; (80041bc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d101      	bne.n	800410e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800410a:	2301      	movs	r3, #1
 800410c:	e000      	b.n	8004110 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800410e:	2300      	movs	r3, #0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d01a      	beq.n	800414a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	b2db      	uxtb	r3, r3
 800411a:	3b08      	subs	r3, #8
 800411c:	4a28      	ldr	r2, [pc, #160]	; (80041c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800411e:	fba2 2303 	umull	r2, r3, r2, r3
 8004122:	091b      	lsrs	r3, r3, #4
 8004124:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	4b26      	ldr	r3, [pc, #152]	; (80041c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800412a:	4413      	add	r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	461a      	mov	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a24      	ldr	r2, [pc, #144]	; (80041c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004138:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f003 031f 	and.w	r3, r3, #31
 8004140:	2201      	movs	r2, #1
 8004142:	409a      	lsls	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004148:	e024      	b.n	8004194 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	b2db      	uxtb	r3, r3
 8004150:	3b10      	subs	r3, #16
 8004152:	4a1e      	ldr	r2, [pc, #120]	; (80041cc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004154:	fba2 2303 	umull	r2, r3, r2, r3
 8004158:	091b      	lsrs	r3, r3, #4
 800415a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	4a1c      	ldr	r2, [pc, #112]	; (80041d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d806      	bhi.n	8004172 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	4a1b      	ldr	r2, [pc, #108]	; (80041d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d902      	bls.n	8004172 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	3308      	adds	r3, #8
 8004170:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	4b18      	ldr	r3, [pc, #96]	; (80041d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004176:	4413      	add	r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	461a      	mov	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	4a16      	ldr	r2, [pc, #88]	; (80041dc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004184:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f003 031f 	and.w	r3, r3, #31
 800418c:	2201      	movs	r2, #1
 800418e:	409a      	lsls	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004194:	bf00      	nop
 8004196:	3714      	adds	r7, #20
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr
 80041a0:	58025408 	.word	0x58025408
 80041a4:	5802541c 	.word	0x5802541c
 80041a8:	58025430 	.word	0x58025430
 80041ac:	58025444 	.word	0x58025444
 80041b0:	58025458 	.word	0x58025458
 80041b4:	5802546c 	.word	0x5802546c
 80041b8:	58025480 	.word	0x58025480
 80041bc:	58025494 	.word	0x58025494
 80041c0:	cccccccd 	.word	0xcccccccd
 80041c4:	16009600 	.word	0x16009600
 80041c8:	58025880 	.word	0x58025880
 80041cc:	aaaaaaab 	.word	0xaaaaaaab
 80041d0:	400204b8 	.word	0x400204b8
 80041d4:	4002040f 	.word	0x4002040f
 80041d8:	10008200 	.word	0x10008200
 80041dc:	40020880 	.word	0x40020880

080041e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d04a      	beq.n	800428c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2b08      	cmp	r3, #8
 80041fa:	d847      	bhi.n	800428c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a25      	ldr	r2, [pc, #148]	; (8004298 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d022      	beq.n	800424c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a24      	ldr	r2, [pc, #144]	; (800429c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d01d      	beq.n	800424c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a22      	ldr	r2, [pc, #136]	; (80042a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d018      	beq.n	800424c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a21      	ldr	r2, [pc, #132]	; (80042a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d013      	beq.n	800424c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a1f      	ldr	r2, [pc, #124]	; (80042a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d00e      	beq.n	800424c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a1e      	ldr	r2, [pc, #120]	; (80042ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d009      	beq.n	800424c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a1c      	ldr	r2, [pc, #112]	; (80042b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d004      	beq.n	800424c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a1b      	ldr	r2, [pc, #108]	; (80042b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d101      	bne.n	8004250 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800424c:	2301      	movs	r3, #1
 800424e:	e000      	b.n	8004252 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004250:	2300      	movs	r3, #0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00a      	beq.n	800426c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	4b17      	ldr	r3, [pc, #92]	; (80042b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800425a:	4413      	add	r3, r2
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	461a      	mov	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a15      	ldr	r2, [pc, #84]	; (80042bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004268:	671a      	str	r2, [r3, #112]	; 0x70
 800426a:	e009      	b.n	8004280 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	4b14      	ldr	r3, [pc, #80]	; (80042c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004270:	4413      	add	r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	461a      	mov	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a11      	ldr	r2, [pc, #68]	; (80042c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800427e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	3b01      	subs	r3, #1
 8004284:	2201      	movs	r2, #1
 8004286:	409a      	lsls	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800428c:	bf00      	nop
 800428e:	3714      	adds	r7, #20
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr
 8004298:	58025408 	.word	0x58025408
 800429c:	5802541c 	.word	0x5802541c
 80042a0:	58025430 	.word	0x58025430
 80042a4:	58025444 	.word	0x58025444
 80042a8:	58025458 	.word	0x58025458
 80042ac:	5802546c 	.word	0x5802546c
 80042b0:	58025480 	.word	0x58025480
 80042b4:	58025494 	.word	0x58025494
 80042b8:	1600963f 	.word	0x1600963f
 80042bc:	58025940 	.word	0x58025940
 80042c0:	1000823f 	.word	0x1000823f
 80042c4:	40020940 	.word	0x40020940

080042c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b089      	sub	sp, #36	; 0x24
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80042d2:	2300      	movs	r3, #0
 80042d4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80042d6:	4b89      	ldr	r3, [pc, #548]	; (80044fc <HAL_GPIO_Init+0x234>)
 80042d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80042da:	e194      	b.n	8004606 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	2101      	movs	r1, #1
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	fa01 f303 	lsl.w	r3, r1, r3
 80042e8:	4013      	ands	r3, r2
 80042ea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	f000 8186 	beq.w	8004600 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d00b      	beq.n	8004314 <HAL_GPIO_Init+0x4c>
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	2b02      	cmp	r3, #2
 8004302:	d007      	beq.n	8004314 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004308:	2b11      	cmp	r3, #17
 800430a:	d003      	beq.n	8004314 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	2b12      	cmp	r3, #18
 8004312:	d130      	bne.n	8004376 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	005b      	lsls	r3, r3, #1
 800431e:	2203      	movs	r2, #3
 8004320:	fa02 f303 	lsl.w	r3, r2, r3
 8004324:	43db      	mvns	r3, r3
 8004326:	69ba      	ldr	r2, [r7, #24]
 8004328:	4013      	ands	r3, r2
 800432a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	68da      	ldr	r2, [r3, #12]
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	005b      	lsls	r3, r3, #1
 8004334:	fa02 f303 	lsl.w	r3, r2, r3
 8004338:	69ba      	ldr	r2, [r7, #24]
 800433a:	4313      	orrs	r3, r2
 800433c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	69ba      	ldr	r2, [r7, #24]
 8004342:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800434a:	2201      	movs	r2, #1
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	fa02 f303 	lsl.w	r3, r2, r3
 8004352:	43db      	mvns	r3, r3
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	4013      	ands	r3, r2
 8004358:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	091b      	lsrs	r3, r3, #4
 8004360:	f003 0201 	and.w	r2, r3, #1
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	fa02 f303 	lsl.w	r3, r2, r3
 800436a:	69ba      	ldr	r2, [r7, #24]
 800436c:	4313      	orrs	r3, r2
 800436e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	69ba      	ldr	r2, [r7, #24]
 8004374:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	005b      	lsls	r3, r3, #1
 8004380:	2203      	movs	r2, #3
 8004382:	fa02 f303 	lsl.w	r3, r2, r3
 8004386:	43db      	mvns	r3, r3
 8004388:	69ba      	ldr	r2, [r7, #24]
 800438a:	4013      	ands	r3, r2
 800438c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	689a      	ldr	r2, [r3, #8]
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	005b      	lsls	r3, r3, #1
 8004396:	fa02 f303 	lsl.w	r3, r2, r3
 800439a:	69ba      	ldr	r2, [r7, #24]
 800439c:	4313      	orrs	r3, r2
 800439e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d003      	beq.n	80043b6 <HAL_GPIO_Init+0xee>
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	2b12      	cmp	r3, #18
 80043b4:	d123      	bne.n	80043fe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	08da      	lsrs	r2, r3, #3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	3208      	adds	r2, #8
 80043be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	f003 0307 	and.w	r3, r3, #7
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	220f      	movs	r2, #15
 80043ce:	fa02 f303 	lsl.w	r3, r2, r3
 80043d2:	43db      	mvns	r3, r3
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	4013      	ands	r3, r2
 80043d8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	691a      	ldr	r2, [r3, #16]
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	f003 0307 	and.w	r3, r3, #7
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ea:	69ba      	ldr	r2, [r7, #24]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	08da      	lsrs	r2, r3, #3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	3208      	adds	r2, #8
 80043f8:	69b9      	ldr	r1, [r7, #24]
 80043fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	005b      	lsls	r3, r3, #1
 8004408:	2203      	movs	r2, #3
 800440a:	fa02 f303 	lsl.w	r3, r2, r3
 800440e:	43db      	mvns	r3, r3
 8004410:	69ba      	ldr	r2, [r7, #24]
 8004412:	4013      	ands	r3, r2
 8004414:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f003 0203 	and.w	r2, r3, #3
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	005b      	lsls	r3, r3, #1
 8004422:	fa02 f303 	lsl.w	r3, r2, r3
 8004426:	69ba      	ldr	r2, [r7, #24]
 8004428:	4313      	orrs	r3, r2
 800442a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	69ba      	ldr	r2, [r7, #24]
 8004430:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800443a:	2b00      	cmp	r3, #0
 800443c:	f000 80e0 	beq.w	8004600 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004440:	4b2f      	ldr	r3, [pc, #188]	; (8004500 <HAL_GPIO_Init+0x238>)
 8004442:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004446:	4a2e      	ldr	r2, [pc, #184]	; (8004500 <HAL_GPIO_Init+0x238>)
 8004448:	f043 0302 	orr.w	r3, r3, #2
 800444c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004450:	4b2b      	ldr	r3, [pc, #172]	; (8004500 <HAL_GPIO_Init+0x238>)
 8004452:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	60fb      	str	r3, [r7, #12]
 800445c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800445e:	4a29      	ldr	r2, [pc, #164]	; (8004504 <HAL_GPIO_Init+0x23c>)
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	089b      	lsrs	r3, r3, #2
 8004464:	3302      	adds	r3, #2
 8004466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800446a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	f003 0303 	and.w	r3, r3, #3
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	220f      	movs	r2, #15
 8004476:	fa02 f303 	lsl.w	r3, r2, r3
 800447a:	43db      	mvns	r3, r3
 800447c:	69ba      	ldr	r2, [r7, #24]
 800447e:	4013      	ands	r3, r2
 8004480:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a20      	ldr	r2, [pc, #128]	; (8004508 <HAL_GPIO_Init+0x240>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d052      	beq.n	8004530 <HAL_GPIO_Init+0x268>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a1f      	ldr	r2, [pc, #124]	; (800450c <HAL_GPIO_Init+0x244>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d031      	beq.n	80044f6 <HAL_GPIO_Init+0x22e>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a1e      	ldr	r2, [pc, #120]	; (8004510 <HAL_GPIO_Init+0x248>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d02b      	beq.n	80044f2 <HAL_GPIO_Init+0x22a>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a1d      	ldr	r2, [pc, #116]	; (8004514 <HAL_GPIO_Init+0x24c>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d025      	beq.n	80044ee <HAL_GPIO_Init+0x226>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a1c      	ldr	r2, [pc, #112]	; (8004518 <HAL_GPIO_Init+0x250>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d01f      	beq.n	80044ea <HAL_GPIO_Init+0x222>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a1b      	ldr	r2, [pc, #108]	; (800451c <HAL_GPIO_Init+0x254>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d019      	beq.n	80044e6 <HAL_GPIO_Init+0x21e>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a1a      	ldr	r2, [pc, #104]	; (8004520 <HAL_GPIO_Init+0x258>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d013      	beq.n	80044e2 <HAL_GPIO_Init+0x21a>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a19      	ldr	r2, [pc, #100]	; (8004524 <HAL_GPIO_Init+0x25c>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d00d      	beq.n	80044de <HAL_GPIO_Init+0x216>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a18      	ldr	r2, [pc, #96]	; (8004528 <HAL_GPIO_Init+0x260>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d007      	beq.n	80044da <HAL_GPIO_Init+0x212>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a17      	ldr	r2, [pc, #92]	; (800452c <HAL_GPIO_Init+0x264>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d101      	bne.n	80044d6 <HAL_GPIO_Init+0x20e>
 80044d2:	2309      	movs	r3, #9
 80044d4:	e02d      	b.n	8004532 <HAL_GPIO_Init+0x26a>
 80044d6:	230a      	movs	r3, #10
 80044d8:	e02b      	b.n	8004532 <HAL_GPIO_Init+0x26a>
 80044da:	2308      	movs	r3, #8
 80044dc:	e029      	b.n	8004532 <HAL_GPIO_Init+0x26a>
 80044de:	2307      	movs	r3, #7
 80044e0:	e027      	b.n	8004532 <HAL_GPIO_Init+0x26a>
 80044e2:	2306      	movs	r3, #6
 80044e4:	e025      	b.n	8004532 <HAL_GPIO_Init+0x26a>
 80044e6:	2305      	movs	r3, #5
 80044e8:	e023      	b.n	8004532 <HAL_GPIO_Init+0x26a>
 80044ea:	2304      	movs	r3, #4
 80044ec:	e021      	b.n	8004532 <HAL_GPIO_Init+0x26a>
 80044ee:	2303      	movs	r3, #3
 80044f0:	e01f      	b.n	8004532 <HAL_GPIO_Init+0x26a>
 80044f2:	2302      	movs	r3, #2
 80044f4:	e01d      	b.n	8004532 <HAL_GPIO_Init+0x26a>
 80044f6:	2301      	movs	r3, #1
 80044f8:	e01b      	b.n	8004532 <HAL_GPIO_Init+0x26a>
 80044fa:	bf00      	nop
 80044fc:	58000080 	.word	0x58000080
 8004500:	58024400 	.word	0x58024400
 8004504:	58000400 	.word	0x58000400
 8004508:	58020000 	.word	0x58020000
 800450c:	58020400 	.word	0x58020400
 8004510:	58020800 	.word	0x58020800
 8004514:	58020c00 	.word	0x58020c00
 8004518:	58021000 	.word	0x58021000
 800451c:	58021400 	.word	0x58021400
 8004520:	58021800 	.word	0x58021800
 8004524:	58021c00 	.word	0x58021c00
 8004528:	58022000 	.word	0x58022000
 800452c:	58022400 	.word	0x58022400
 8004530:	2300      	movs	r3, #0
 8004532:	69fa      	ldr	r2, [r7, #28]
 8004534:	f002 0203 	and.w	r2, r2, #3
 8004538:	0092      	lsls	r2, r2, #2
 800453a:	4093      	lsls	r3, r2
 800453c:	69ba      	ldr	r2, [r7, #24]
 800453e:	4313      	orrs	r3, r2
 8004540:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004542:	4938      	ldr	r1, [pc, #224]	; (8004624 <HAL_GPIO_Init+0x35c>)
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	089b      	lsrs	r3, r3, #2
 8004548:	3302      	adds	r3, #2
 800454a:	69ba      	ldr	r2, [r7, #24]
 800454c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	43db      	mvns	r3, r3
 800455a:	69ba      	ldr	r2, [r7, #24]
 800455c:	4013      	ands	r3, r2
 800455e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d003      	beq.n	8004574 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800456c:	69ba      	ldr	r2, [r7, #24]
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	4313      	orrs	r3, r2
 8004572:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	69ba      	ldr	r2, [r7, #24]
 8004578:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	43db      	mvns	r3, r3
 8004584:	69ba      	ldr	r2, [r7, #24]
 8004586:	4013      	ands	r3, r2
 8004588:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d003      	beq.n	800459e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004596:	69ba      	ldr	r2, [r7, #24]
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	4313      	orrs	r3, r2
 800459c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	69ba      	ldr	r2, [r7, #24]
 80045a2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80045a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	43db      	mvns	r3, r3
 80045b0:	69ba      	ldr	r2, [r7, #24]
 80045b2:	4013      	ands	r3, r2
 80045b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d003      	beq.n	80045ca <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80045c2:	69ba      	ldr	r2, [r7, #24]
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80045ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80045d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	43db      	mvns	r3, r3
 80045de:	69ba      	ldr	r2, [r7, #24]
 80045e0:	4013      	ands	r3, r2
 80045e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d003      	beq.n	80045f8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80045f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	3301      	adds	r3, #1
 8004604:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	fa22 f303 	lsr.w	r3, r2, r3
 8004610:	2b00      	cmp	r3, #0
 8004612:	f47f ae63 	bne.w	80042dc <HAL_GPIO_Init+0x14>
  }
}
 8004616:	bf00      	nop
 8004618:	bf00      	nop
 800461a:	3724      	adds	r7, #36	; 0x24
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr
 8004624:	58000400 	.word	0x58000400

08004628 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	460b      	mov	r3, r1
 8004632:	807b      	strh	r3, [r7, #2]
 8004634:	4613      	mov	r3, r2
 8004636:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004638:	787b      	ldrb	r3, [r7, #1]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d003      	beq.n	8004646 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800463e:	887a      	ldrh	r2, [r7, #2]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004644:	e003      	b.n	800464e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004646:	887b      	ldrh	r3, [r7, #2]
 8004648:	041a      	lsls	r2, r3, #16
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	619a      	str	r2, [r3, #24]
}
 800464e:	bf00      	nop
 8004650:	370c      	adds	r7, #12
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr

0800465a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800465a:	b480      	push	{r7}
 800465c:	b085      	sub	sp, #20
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
 8004662:	460b      	mov	r3, r1
 8004664:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800466c:	887a      	ldrh	r2, [r7, #2]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	4013      	ands	r3, r2
 8004672:	041a      	lsls	r2, r3, #16
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	43d9      	mvns	r1, r3
 8004678:	887b      	ldrh	r3, [r7, #2]
 800467a:	400b      	ands	r3, r1
 800467c:	431a      	orrs	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	619a      	str	r2, [r3, #24]
}
 8004682:	bf00      	nop
 8004684:	3714      	adds	r7, #20
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
	...

08004690 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004698:	4a08      	ldr	r2, [pc, #32]	; (80046bc <HAL_HSEM_FastTake+0x2c>)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	3320      	adds	r3, #32
 800469e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046a2:	4a07      	ldr	r2, [pc, #28]	; (80046c0 <HAL_HSEM_FastTake+0x30>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d101      	bne.n	80046ac <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80046a8:	2300      	movs	r3, #0
 80046aa:	e000      	b.n	80046ae <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	370c      	adds	r7, #12
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	58026400 	.word	0x58026400
 80046c0:	80000300 	.word	0x80000300

080046c4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80046ce:	4906      	ldr	r1, [pc, #24]	; (80046e8 <HAL_HSEM_Release+0x24>)
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80046dc:	bf00      	nop
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr
 80046e8:	58026400 	.word	0x58026400

080046ec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80046f4:	4b29      	ldr	r3, [pc, #164]	; (800479c <HAL_PWREx_ConfigSupply+0xb0>)
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	f003 0307 	and.w	r3, r3, #7
 80046fc:	2b06      	cmp	r3, #6
 80046fe:	d00a      	beq.n	8004716 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004700:	4b26      	ldr	r3, [pc, #152]	; (800479c <HAL_PWREx_ConfigSupply+0xb0>)
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	429a      	cmp	r2, r3
 800470c:	d001      	beq.n	8004712 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e040      	b.n	8004794 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004712:	2300      	movs	r3, #0
 8004714:	e03e      	b.n	8004794 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004716:	4b21      	ldr	r3, [pc, #132]	; (800479c <HAL_PWREx_ConfigSupply+0xb0>)
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800471e:	491f      	ldr	r1, [pc, #124]	; (800479c <HAL_PWREx_ConfigSupply+0xb0>)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4313      	orrs	r3, r2
 8004724:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004726:	f7fc f9d7 	bl	8000ad8 <HAL_GetTick>
 800472a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800472c:	e009      	b.n	8004742 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800472e:	f7fc f9d3 	bl	8000ad8 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800473c:	d901      	bls.n	8004742 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e028      	b.n	8004794 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004742:	4b16      	ldr	r3, [pc, #88]	; (800479c <HAL_PWREx_ConfigSupply+0xb0>)
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800474a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800474e:	d1ee      	bne.n	800472e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2b1e      	cmp	r3, #30
 8004754:	d008      	beq.n	8004768 <HAL_PWREx_ConfigSupply+0x7c>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2b2e      	cmp	r3, #46	; 0x2e
 800475a:	d005      	beq.n	8004768 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2b1d      	cmp	r3, #29
 8004760:	d002      	beq.n	8004768 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2b2d      	cmp	r3, #45	; 0x2d
 8004766:	d114      	bne.n	8004792 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004768:	f7fc f9b6 	bl	8000ad8 <HAL_GetTick>
 800476c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800476e:	e009      	b.n	8004784 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004770:	f7fc f9b2 	bl	8000ad8 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800477e:	d901      	bls.n	8004784 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e007      	b.n	8004794 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004784:	4b05      	ldr	r3, [pc, #20]	; (800479c <HAL_PWREx_ConfigSupply+0xb0>)
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800478c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004790:	d1ee      	bne.n	8004770 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3710      	adds	r7, #16
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	58024800 	.word	0x58024800

080047a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b08c      	sub	sp, #48	; 0x30
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e3ff      	b.n	8004fb2 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	f000 8087 	beq.w	80048ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047c0:	4b99      	ldr	r3, [pc, #612]	; (8004a28 <HAL_RCC_OscConfig+0x288>)
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80047ca:	4b97      	ldr	r3, [pc, #604]	; (8004a28 <HAL_RCC_OscConfig+0x288>)
 80047cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ce:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80047d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d2:	2b10      	cmp	r3, #16
 80047d4:	d007      	beq.n	80047e6 <HAL_RCC_OscConfig+0x46>
 80047d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d8:	2b18      	cmp	r3, #24
 80047da:	d110      	bne.n	80047fe <HAL_RCC_OscConfig+0x5e>
 80047dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047de:	f003 0303 	and.w	r3, r3, #3
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d10b      	bne.n	80047fe <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047e6:	4b90      	ldr	r3, [pc, #576]	; (8004a28 <HAL_RCC_OscConfig+0x288>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d06c      	beq.n	80048cc <HAL_RCC_OscConfig+0x12c>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d168      	bne.n	80048cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e3d9      	b.n	8004fb2 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004806:	d106      	bne.n	8004816 <HAL_RCC_OscConfig+0x76>
 8004808:	4b87      	ldr	r3, [pc, #540]	; (8004a28 <HAL_RCC_OscConfig+0x288>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a86      	ldr	r2, [pc, #536]	; (8004a28 <HAL_RCC_OscConfig+0x288>)
 800480e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004812:	6013      	str	r3, [r2, #0]
 8004814:	e02e      	b.n	8004874 <HAL_RCC_OscConfig+0xd4>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d10c      	bne.n	8004838 <HAL_RCC_OscConfig+0x98>
 800481e:	4b82      	ldr	r3, [pc, #520]	; (8004a28 <HAL_RCC_OscConfig+0x288>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a81      	ldr	r2, [pc, #516]	; (8004a28 <HAL_RCC_OscConfig+0x288>)
 8004824:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004828:	6013      	str	r3, [r2, #0]
 800482a:	4b7f      	ldr	r3, [pc, #508]	; (8004a28 <HAL_RCC_OscConfig+0x288>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a7e      	ldr	r2, [pc, #504]	; (8004a28 <HAL_RCC_OscConfig+0x288>)
 8004830:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004834:	6013      	str	r3, [r2, #0]
 8004836:	e01d      	b.n	8004874 <HAL_RCC_OscConfig+0xd4>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004840:	d10c      	bne.n	800485c <HAL_RCC_OscConfig+0xbc>
 8004842:	4b79      	ldr	r3, [pc, #484]	; (8004a28 <HAL_RCC_OscConfig+0x288>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a78      	ldr	r2, [pc, #480]	; (8004a28 <HAL_RCC_OscConfig+0x288>)
 8004848:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800484c:	6013      	str	r3, [r2, #0]
 800484e:	4b76      	ldr	r3, [pc, #472]	; (8004a28 <HAL_RCC_OscConfig+0x288>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a75      	ldr	r2, [pc, #468]	; (8004a28 <HAL_RCC_OscConfig+0x288>)
 8004854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004858:	6013      	str	r3, [r2, #0]
 800485a:	e00b      	b.n	8004874 <HAL_RCC_OscConfig+0xd4>
 800485c:	4b72      	ldr	r3, [pc, #456]	; (8004a28 <HAL_RCC_OscConfig+0x288>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a71      	ldr	r2, [pc, #452]	; (8004a28 <HAL_RCC_OscConfig+0x288>)
 8004862:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004866:	6013      	str	r3, [r2, #0]
 8004868:	4b6f      	ldr	r3, [pc, #444]	; (8004a28 <HAL_RCC_OscConfig+0x288>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a6e      	ldr	r2, [pc, #440]	; (8004a28 <HAL_RCC_OscConfig+0x288>)
 800486e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004872:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d013      	beq.n	80048a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800487c:	f7fc f92c 	bl	8000ad8 <HAL_GetTick>
 8004880:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004882:	e008      	b.n	8004896 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004884:	f7fc f928 	bl	8000ad8 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	2b64      	cmp	r3, #100	; 0x64
 8004890:	d901      	bls.n	8004896 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e38d      	b.n	8004fb2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004896:	4b64      	ldr	r3, [pc, #400]	; (8004a28 <HAL_RCC_OscConfig+0x288>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d0f0      	beq.n	8004884 <HAL_RCC_OscConfig+0xe4>
 80048a2:	e014      	b.n	80048ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a4:	f7fc f918 	bl	8000ad8 <HAL_GetTick>
 80048a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80048aa:	e008      	b.n	80048be <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048ac:	f7fc f914 	bl	8000ad8 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b64      	cmp	r3, #100	; 0x64
 80048b8:	d901      	bls.n	80048be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e379      	b.n	8004fb2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80048be:	4b5a      	ldr	r3, [pc, #360]	; (8004a28 <HAL_RCC_OscConfig+0x288>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1f0      	bne.n	80048ac <HAL_RCC_OscConfig+0x10c>
 80048ca:	e000      	b.n	80048ce <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	f000 80ae 	beq.w	8004a38 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048dc:	4b52      	ldr	r3, [pc, #328]	; (8004a28 <HAL_RCC_OscConfig+0x288>)
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048e4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80048e6:	4b50      	ldr	r3, [pc, #320]	; (8004a28 <HAL_RCC_OscConfig+0x288>)
 80048e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ea:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80048ec:	6a3b      	ldr	r3, [r7, #32]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d007      	beq.n	8004902 <HAL_RCC_OscConfig+0x162>
 80048f2:	6a3b      	ldr	r3, [r7, #32]
 80048f4:	2b18      	cmp	r3, #24
 80048f6:	d13a      	bne.n	800496e <HAL_RCC_OscConfig+0x1ce>
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	f003 0303 	and.w	r3, r3, #3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d135      	bne.n	800496e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004902:	4b49      	ldr	r3, [pc, #292]	; (8004a28 <HAL_RCC_OscConfig+0x288>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0304 	and.w	r3, r3, #4
 800490a:	2b00      	cmp	r3, #0
 800490c:	d005      	beq.n	800491a <HAL_RCC_OscConfig+0x17a>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e34b      	b.n	8004fb2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800491a:	f7fc f90d 	bl	8000b38 <HAL_GetREVID>
 800491e:	4603      	mov	r3, r0
 8004920:	f241 0203 	movw	r2, #4099	; 0x1003
 8004924:	4293      	cmp	r3, r2
 8004926:	d817      	bhi.n	8004958 <HAL_RCC_OscConfig+0x1b8>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	2b40      	cmp	r3, #64	; 0x40
 800492e:	d108      	bne.n	8004942 <HAL_RCC_OscConfig+0x1a2>
 8004930:	4b3d      	ldr	r3, [pc, #244]	; (8004a28 <HAL_RCC_OscConfig+0x288>)
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004938:	4a3b      	ldr	r2, [pc, #236]	; (8004a28 <HAL_RCC_OscConfig+0x288>)
 800493a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800493e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004940:	e07a      	b.n	8004a38 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004942:	4b39      	ldr	r3, [pc, #228]	; (8004a28 <HAL_RCC_OscConfig+0x288>)
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	031b      	lsls	r3, r3, #12
 8004950:	4935      	ldr	r1, [pc, #212]	; (8004a28 <HAL_RCC_OscConfig+0x288>)
 8004952:	4313      	orrs	r3, r2
 8004954:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004956:	e06f      	b.n	8004a38 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004958:	4b33      	ldr	r3, [pc, #204]	; (8004a28 <HAL_RCC_OscConfig+0x288>)
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	061b      	lsls	r3, r3, #24
 8004966:	4930      	ldr	r1, [pc, #192]	; (8004a28 <HAL_RCC_OscConfig+0x288>)
 8004968:	4313      	orrs	r3, r2
 800496a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800496c:	e064      	b.n	8004a38 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d045      	beq.n	8004a02 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004976:	4b2c      	ldr	r3, [pc, #176]	; (8004a28 <HAL_RCC_OscConfig+0x288>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f023 0219 	bic.w	r2, r3, #25
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	4929      	ldr	r1, [pc, #164]	; (8004a28 <HAL_RCC_OscConfig+0x288>)
 8004984:	4313      	orrs	r3, r2
 8004986:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004988:	f7fc f8a6 	bl	8000ad8 <HAL_GetTick>
 800498c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800498e:	e008      	b.n	80049a2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004990:	f7fc f8a2 	bl	8000ad8 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b02      	cmp	r3, #2
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e307      	b.n	8004fb2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80049a2:	4b21      	ldr	r3, [pc, #132]	; (8004a28 <HAL_RCC_OscConfig+0x288>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0304 	and.w	r3, r3, #4
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d0f0      	beq.n	8004990 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049ae:	f7fc f8c3 	bl	8000b38 <HAL_GetREVID>
 80049b2:	4603      	mov	r3, r0
 80049b4:	f241 0203 	movw	r2, #4099	; 0x1003
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d817      	bhi.n	80049ec <HAL_RCC_OscConfig+0x24c>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	2b40      	cmp	r3, #64	; 0x40
 80049c2:	d108      	bne.n	80049d6 <HAL_RCC_OscConfig+0x236>
 80049c4:	4b18      	ldr	r3, [pc, #96]	; (8004a28 <HAL_RCC_OscConfig+0x288>)
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80049cc:	4a16      	ldr	r2, [pc, #88]	; (8004a28 <HAL_RCC_OscConfig+0x288>)
 80049ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049d2:	6053      	str	r3, [r2, #4]
 80049d4:	e030      	b.n	8004a38 <HAL_RCC_OscConfig+0x298>
 80049d6:	4b14      	ldr	r3, [pc, #80]	; (8004a28 <HAL_RCC_OscConfig+0x288>)
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	031b      	lsls	r3, r3, #12
 80049e4:	4910      	ldr	r1, [pc, #64]	; (8004a28 <HAL_RCC_OscConfig+0x288>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	604b      	str	r3, [r1, #4]
 80049ea:	e025      	b.n	8004a38 <HAL_RCC_OscConfig+0x298>
 80049ec:	4b0e      	ldr	r3, [pc, #56]	; (8004a28 <HAL_RCC_OscConfig+0x288>)
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	061b      	lsls	r3, r3, #24
 80049fa:	490b      	ldr	r1, [pc, #44]	; (8004a28 <HAL_RCC_OscConfig+0x288>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	604b      	str	r3, [r1, #4]
 8004a00:	e01a      	b.n	8004a38 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a02:	4b09      	ldr	r3, [pc, #36]	; (8004a28 <HAL_RCC_OscConfig+0x288>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a08      	ldr	r2, [pc, #32]	; (8004a28 <HAL_RCC_OscConfig+0x288>)
 8004a08:	f023 0301 	bic.w	r3, r3, #1
 8004a0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a0e:	f7fc f863 	bl	8000ad8 <HAL_GetTick>
 8004a12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004a14:	e00a      	b.n	8004a2c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a16:	f7fc f85f 	bl	8000ad8 <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d903      	bls.n	8004a2c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e2c4      	b.n	8004fb2 <HAL_RCC_OscConfig+0x812>
 8004a28:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004a2c:	4ba4      	ldr	r3, [pc, #656]	; (8004cc0 <HAL_RCC_OscConfig+0x520>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0304 	and.w	r3, r3, #4
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d1ee      	bne.n	8004a16 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0310 	and.w	r3, r3, #16
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f000 80a9 	beq.w	8004b98 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a46:	4b9e      	ldr	r3, [pc, #632]	; (8004cc0 <HAL_RCC_OscConfig+0x520>)
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a4e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004a50:	4b9b      	ldr	r3, [pc, #620]	; (8004cc0 <HAL_RCC_OscConfig+0x520>)
 8004a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a54:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	2b08      	cmp	r3, #8
 8004a5a:	d007      	beq.n	8004a6c <HAL_RCC_OscConfig+0x2cc>
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	2b18      	cmp	r3, #24
 8004a60:	d13a      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x338>
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	f003 0303 	and.w	r3, r3, #3
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d135      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004a6c:	4b94      	ldr	r3, [pc, #592]	; (8004cc0 <HAL_RCC_OscConfig+0x520>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d005      	beq.n	8004a84 <HAL_RCC_OscConfig+0x2e4>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	69db      	ldr	r3, [r3, #28]
 8004a7c:	2b80      	cmp	r3, #128	; 0x80
 8004a7e:	d001      	beq.n	8004a84 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e296      	b.n	8004fb2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a84:	f7fc f858 	bl	8000b38 <HAL_GetREVID>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	f241 0203 	movw	r2, #4099	; 0x1003
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d817      	bhi.n	8004ac2 <HAL_RCC_OscConfig+0x322>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	2b20      	cmp	r3, #32
 8004a98:	d108      	bne.n	8004aac <HAL_RCC_OscConfig+0x30c>
 8004a9a:	4b89      	ldr	r3, [pc, #548]	; (8004cc0 <HAL_RCC_OscConfig+0x520>)
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004aa2:	4a87      	ldr	r2, [pc, #540]	; (8004cc0 <HAL_RCC_OscConfig+0x520>)
 8004aa4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004aa8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004aaa:	e075      	b.n	8004b98 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004aac:	4b84      	ldr	r3, [pc, #528]	; (8004cc0 <HAL_RCC_OscConfig+0x520>)
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a1b      	ldr	r3, [r3, #32]
 8004ab8:	069b      	lsls	r3, r3, #26
 8004aba:	4981      	ldr	r1, [pc, #516]	; (8004cc0 <HAL_RCC_OscConfig+0x520>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ac0:	e06a      	b.n	8004b98 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ac2:	4b7f      	ldr	r3, [pc, #508]	; (8004cc0 <HAL_RCC_OscConfig+0x520>)
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	061b      	lsls	r3, r3, #24
 8004ad0:	497b      	ldr	r1, [pc, #492]	; (8004cc0 <HAL_RCC_OscConfig+0x520>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ad6:	e05f      	b.n	8004b98 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	69db      	ldr	r3, [r3, #28]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d042      	beq.n	8004b66 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004ae0:	4b77      	ldr	r3, [pc, #476]	; (8004cc0 <HAL_RCC_OscConfig+0x520>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a76      	ldr	r2, [pc, #472]	; (8004cc0 <HAL_RCC_OscConfig+0x520>)
 8004ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aec:	f7fb fff4 	bl	8000ad8 <HAL_GetTick>
 8004af0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004af2:	e008      	b.n	8004b06 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004af4:	f7fb fff0 	bl	8000ad8 <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d901      	bls.n	8004b06 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e255      	b.n	8004fb2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004b06:	4b6e      	ldr	r3, [pc, #440]	; (8004cc0 <HAL_RCC_OscConfig+0x520>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d0f0      	beq.n	8004af4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004b12:	f7fc f811 	bl	8000b38 <HAL_GetREVID>
 8004b16:	4603      	mov	r3, r0
 8004b18:	f241 0203 	movw	r2, #4099	; 0x1003
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d817      	bhi.n	8004b50 <HAL_RCC_OscConfig+0x3b0>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a1b      	ldr	r3, [r3, #32]
 8004b24:	2b20      	cmp	r3, #32
 8004b26:	d108      	bne.n	8004b3a <HAL_RCC_OscConfig+0x39a>
 8004b28:	4b65      	ldr	r3, [pc, #404]	; (8004cc0 <HAL_RCC_OscConfig+0x520>)
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004b30:	4a63      	ldr	r2, [pc, #396]	; (8004cc0 <HAL_RCC_OscConfig+0x520>)
 8004b32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b36:	6053      	str	r3, [r2, #4]
 8004b38:	e02e      	b.n	8004b98 <HAL_RCC_OscConfig+0x3f8>
 8004b3a:	4b61      	ldr	r3, [pc, #388]	; (8004cc0 <HAL_RCC_OscConfig+0x520>)
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a1b      	ldr	r3, [r3, #32]
 8004b46:	069b      	lsls	r3, r3, #26
 8004b48:	495d      	ldr	r1, [pc, #372]	; (8004cc0 <HAL_RCC_OscConfig+0x520>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	604b      	str	r3, [r1, #4]
 8004b4e:	e023      	b.n	8004b98 <HAL_RCC_OscConfig+0x3f8>
 8004b50:	4b5b      	ldr	r3, [pc, #364]	; (8004cc0 <HAL_RCC_OscConfig+0x520>)
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a1b      	ldr	r3, [r3, #32]
 8004b5c:	061b      	lsls	r3, r3, #24
 8004b5e:	4958      	ldr	r1, [pc, #352]	; (8004cc0 <HAL_RCC_OscConfig+0x520>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	60cb      	str	r3, [r1, #12]
 8004b64:	e018      	b.n	8004b98 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004b66:	4b56      	ldr	r3, [pc, #344]	; (8004cc0 <HAL_RCC_OscConfig+0x520>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a55      	ldr	r2, [pc, #340]	; (8004cc0 <HAL_RCC_OscConfig+0x520>)
 8004b6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b72:	f7fb ffb1 	bl	8000ad8 <HAL_GetTick>
 8004b76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004b78:	e008      	b.n	8004b8c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004b7a:	f7fb ffad 	bl	8000ad8 <HAL_GetTick>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b82:	1ad3      	subs	r3, r2, r3
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d901      	bls.n	8004b8c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	e212      	b.n	8004fb2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004b8c:	4b4c      	ldr	r3, [pc, #304]	; (8004cc0 <HAL_RCC_OscConfig+0x520>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d1f0      	bne.n	8004b7a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0308 	and.w	r3, r3, #8
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d036      	beq.n	8004c12 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	695b      	ldr	r3, [r3, #20]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d019      	beq.n	8004be0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bac:	4b44      	ldr	r3, [pc, #272]	; (8004cc0 <HAL_RCC_OscConfig+0x520>)
 8004bae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bb0:	4a43      	ldr	r2, [pc, #268]	; (8004cc0 <HAL_RCC_OscConfig+0x520>)
 8004bb2:	f043 0301 	orr.w	r3, r3, #1
 8004bb6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bb8:	f7fb ff8e 	bl	8000ad8 <HAL_GetTick>
 8004bbc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004bbe:	e008      	b.n	8004bd2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bc0:	f7fb ff8a 	bl	8000ad8 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d901      	bls.n	8004bd2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e1ef      	b.n	8004fb2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004bd2:	4b3b      	ldr	r3, [pc, #236]	; (8004cc0 <HAL_RCC_OscConfig+0x520>)
 8004bd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bd6:	f003 0302 	and.w	r3, r3, #2
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d0f0      	beq.n	8004bc0 <HAL_RCC_OscConfig+0x420>
 8004bde:	e018      	b.n	8004c12 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004be0:	4b37      	ldr	r3, [pc, #220]	; (8004cc0 <HAL_RCC_OscConfig+0x520>)
 8004be2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004be4:	4a36      	ldr	r2, [pc, #216]	; (8004cc0 <HAL_RCC_OscConfig+0x520>)
 8004be6:	f023 0301 	bic.w	r3, r3, #1
 8004bea:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bec:	f7fb ff74 	bl	8000ad8 <HAL_GetTick>
 8004bf0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004bf2:	e008      	b.n	8004c06 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bf4:	f7fb ff70 	bl	8000ad8 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d901      	bls.n	8004c06 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e1d5      	b.n	8004fb2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004c06:	4b2e      	ldr	r3, [pc, #184]	; (8004cc0 <HAL_RCC_OscConfig+0x520>)
 8004c08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1f0      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0320 	and.w	r3, r3, #32
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d036      	beq.n	8004c8c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d019      	beq.n	8004c5a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004c26:	4b26      	ldr	r3, [pc, #152]	; (8004cc0 <HAL_RCC_OscConfig+0x520>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a25      	ldr	r2, [pc, #148]	; (8004cc0 <HAL_RCC_OscConfig+0x520>)
 8004c2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c30:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004c32:	f7fb ff51 	bl	8000ad8 <HAL_GetTick>
 8004c36:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004c38:	e008      	b.n	8004c4c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004c3a:	f7fb ff4d 	bl	8000ad8 <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d901      	bls.n	8004c4c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e1b2      	b.n	8004fb2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004c4c:	4b1c      	ldr	r3, [pc, #112]	; (8004cc0 <HAL_RCC_OscConfig+0x520>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d0f0      	beq.n	8004c3a <HAL_RCC_OscConfig+0x49a>
 8004c58:	e018      	b.n	8004c8c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004c5a:	4b19      	ldr	r3, [pc, #100]	; (8004cc0 <HAL_RCC_OscConfig+0x520>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a18      	ldr	r2, [pc, #96]	; (8004cc0 <HAL_RCC_OscConfig+0x520>)
 8004c60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c64:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004c66:	f7fb ff37 	bl	8000ad8 <HAL_GetTick>
 8004c6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004c6c:	e008      	b.n	8004c80 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004c6e:	f7fb ff33 	bl	8000ad8 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d901      	bls.n	8004c80 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e198      	b.n	8004fb2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004c80:	4b0f      	ldr	r3, [pc, #60]	; (8004cc0 <HAL_RCC_OscConfig+0x520>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d1f0      	bne.n	8004c6e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0304 	and.w	r3, r3, #4
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f000 8085 	beq.w	8004da4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004c9a:	4b0a      	ldr	r3, [pc, #40]	; (8004cc4 <HAL_RCC_OscConfig+0x524>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a09      	ldr	r2, [pc, #36]	; (8004cc4 <HAL_RCC_OscConfig+0x524>)
 8004ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ca4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ca6:	f7fb ff17 	bl	8000ad8 <HAL_GetTick>
 8004caa:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004cac:	e00c      	b.n	8004cc8 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004cae:	f7fb ff13 	bl	8000ad8 <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	2b64      	cmp	r3, #100	; 0x64
 8004cba:	d905      	bls.n	8004cc8 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e178      	b.n	8004fb2 <HAL_RCC_OscConfig+0x812>
 8004cc0:	58024400 	.word	0x58024400
 8004cc4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004cc8:	4b96      	ldr	r3, [pc, #600]	; (8004f24 <HAL_RCC_OscConfig+0x784>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d0ec      	beq.n	8004cae <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d106      	bne.n	8004cea <HAL_RCC_OscConfig+0x54a>
 8004cdc:	4b92      	ldr	r3, [pc, #584]	; (8004f28 <HAL_RCC_OscConfig+0x788>)
 8004cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce0:	4a91      	ldr	r2, [pc, #580]	; (8004f28 <HAL_RCC_OscConfig+0x788>)
 8004ce2:	f043 0301 	orr.w	r3, r3, #1
 8004ce6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ce8:	e02d      	b.n	8004d46 <HAL_RCC_OscConfig+0x5a6>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d10c      	bne.n	8004d0c <HAL_RCC_OscConfig+0x56c>
 8004cf2:	4b8d      	ldr	r3, [pc, #564]	; (8004f28 <HAL_RCC_OscConfig+0x788>)
 8004cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cf6:	4a8c      	ldr	r2, [pc, #560]	; (8004f28 <HAL_RCC_OscConfig+0x788>)
 8004cf8:	f023 0301 	bic.w	r3, r3, #1
 8004cfc:	6713      	str	r3, [r2, #112]	; 0x70
 8004cfe:	4b8a      	ldr	r3, [pc, #552]	; (8004f28 <HAL_RCC_OscConfig+0x788>)
 8004d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d02:	4a89      	ldr	r2, [pc, #548]	; (8004f28 <HAL_RCC_OscConfig+0x788>)
 8004d04:	f023 0304 	bic.w	r3, r3, #4
 8004d08:	6713      	str	r3, [r2, #112]	; 0x70
 8004d0a:	e01c      	b.n	8004d46 <HAL_RCC_OscConfig+0x5a6>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	2b05      	cmp	r3, #5
 8004d12:	d10c      	bne.n	8004d2e <HAL_RCC_OscConfig+0x58e>
 8004d14:	4b84      	ldr	r3, [pc, #528]	; (8004f28 <HAL_RCC_OscConfig+0x788>)
 8004d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d18:	4a83      	ldr	r2, [pc, #524]	; (8004f28 <HAL_RCC_OscConfig+0x788>)
 8004d1a:	f043 0304 	orr.w	r3, r3, #4
 8004d1e:	6713      	str	r3, [r2, #112]	; 0x70
 8004d20:	4b81      	ldr	r3, [pc, #516]	; (8004f28 <HAL_RCC_OscConfig+0x788>)
 8004d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d24:	4a80      	ldr	r2, [pc, #512]	; (8004f28 <HAL_RCC_OscConfig+0x788>)
 8004d26:	f043 0301 	orr.w	r3, r3, #1
 8004d2a:	6713      	str	r3, [r2, #112]	; 0x70
 8004d2c:	e00b      	b.n	8004d46 <HAL_RCC_OscConfig+0x5a6>
 8004d2e:	4b7e      	ldr	r3, [pc, #504]	; (8004f28 <HAL_RCC_OscConfig+0x788>)
 8004d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d32:	4a7d      	ldr	r2, [pc, #500]	; (8004f28 <HAL_RCC_OscConfig+0x788>)
 8004d34:	f023 0301 	bic.w	r3, r3, #1
 8004d38:	6713      	str	r3, [r2, #112]	; 0x70
 8004d3a:	4b7b      	ldr	r3, [pc, #492]	; (8004f28 <HAL_RCC_OscConfig+0x788>)
 8004d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d3e:	4a7a      	ldr	r2, [pc, #488]	; (8004f28 <HAL_RCC_OscConfig+0x788>)
 8004d40:	f023 0304 	bic.w	r3, r3, #4
 8004d44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d015      	beq.n	8004d7a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d4e:	f7fb fec3 	bl	8000ad8 <HAL_GetTick>
 8004d52:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d54:	e00a      	b.n	8004d6c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d56:	f7fb febf 	bl	8000ad8 <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d901      	bls.n	8004d6c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e122      	b.n	8004fb2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d6c:	4b6e      	ldr	r3, [pc, #440]	; (8004f28 <HAL_RCC_OscConfig+0x788>)
 8004d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d70:	f003 0302 	and.w	r3, r3, #2
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d0ee      	beq.n	8004d56 <HAL_RCC_OscConfig+0x5b6>
 8004d78:	e014      	b.n	8004da4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d7a:	f7fb fead 	bl	8000ad8 <HAL_GetTick>
 8004d7e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004d80:	e00a      	b.n	8004d98 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d82:	f7fb fea9 	bl	8000ad8 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d901      	bls.n	8004d98 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e10c      	b.n	8004fb2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004d98:	4b63      	ldr	r3, [pc, #396]	; (8004f28 <HAL_RCC_OscConfig+0x788>)
 8004d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d9c:	f003 0302 	and.w	r3, r3, #2
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1ee      	bne.n	8004d82 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f000 8101 	beq.w	8004fb0 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004dae:	4b5e      	ldr	r3, [pc, #376]	; (8004f28 <HAL_RCC_OscConfig+0x788>)
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004db6:	2b18      	cmp	r3, #24
 8004db8:	f000 80bc 	beq.w	8004f34 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	f040 8095 	bne.w	8004ef0 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dc6:	4b58      	ldr	r3, [pc, #352]	; (8004f28 <HAL_RCC_OscConfig+0x788>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a57      	ldr	r2, [pc, #348]	; (8004f28 <HAL_RCC_OscConfig+0x788>)
 8004dcc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd2:	f7fb fe81 	bl	8000ad8 <HAL_GetTick>
 8004dd6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004dd8:	e008      	b.n	8004dec <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dda:	f7fb fe7d 	bl	8000ad8 <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	d901      	bls.n	8004dec <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8004de8:	2303      	movs	r3, #3
 8004dea:	e0e2      	b.n	8004fb2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004dec:	4b4e      	ldr	r3, [pc, #312]	; (8004f28 <HAL_RCC_OscConfig+0x788>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1f0      	bne.n	8004dda <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004df8:	4b4b      	ldr	r3, [pc, #300]	; (8004f28 <HAL_RCC_OscConfig+0x788>)
 8004dfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dfc:	4b4b      	ldr	r3, [pc, #300]	; (8004f2c <HAL_RCC_OscConfig+0x78c>)
 8004dfe:	4013      	ands	r3, r2
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004e08:	0112      	lsls	r2, r2, #4
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	4946      	ldr	r1, [pc, #280]	; (8004f28 <HAL_RCC_OscConfig+0x788>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	628b      	str	r3, [r1, #40]	; 0x28
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e16:	3b01      	subs	r3, #1
 8004e18:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e20:	3b01      	subs	r3, #1
 8004e22:	025b      	lsls	r3, r3, #9
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	431a      	orrs	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	041b      	lsls	r3, r3, #16
 8004e30:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004e34:	431a      	orrs	r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	061b      	lsls	r3, r3, #24
 8004e3e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004e42:	4939      	ldr	r1, [pc, #228]	; (8004f28 <HAL_RCC_OscConfig+0x788>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004e48:	4b37      	ldr	r3, [pc, #220]	; (8004f28 <HAL_RCC_OscConfig+0x788>)
 8004e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4c:	4a36      	ldr	r2, [pc, #216]	; (8004f28 <HAL_RCC_OscConfig+0x788>)
 8004e4e:	f023 0301 	bic.w	r3, r3, #1
 8004e52:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004e54:	4b34      	ldr	r3, [pc, #208]	; (8004f28 <HAL_RCC_OscConfig+0x788>)
 8004e56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e58:	4b35      	ldr	r3, [pc, #212]	; (8004f30 <HAL_RCC_OscConfig+0x790>)
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004e60:	00d2      	lsls	r2, r2, #3
 8004e62:	4931      	ldr	r1, [pc, #196]	; (8004f28 <HAL_RCC_OscConfig+0x788>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004e68:	4b2f      	ldr	r3, [pc, #188]	; (8004f28 <HAL_RCC_OscConfig+0x788>)
 8004e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6c:	f023 020c 	bic.w	r2, r3, #12
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e74:	492c      	ldr	r1, [pc, #176]	; (8004f28 <HAL_RCC_OscConfig+0x788>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004e7a:	4b2b      	ldr	r3, [pc, #172]	; (8004f28 <HAL_RCC_OscConfig+0x788>)
 8004e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7e:	f023 0202 	bic.w	r2, r3, #2
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e86:	4928      	ldr	r1, [pc, #160]	; (8004f28 <HAL_RCC_OscConfig+0x788>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004e8c:	4b26      	ldr	r3, [pc, #152]	; (8004f28 <HAL_RCC_OscConfig+0x788>)
 8004e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e90:	4a25      	ldr	r2, [pc, #148]	; (8004f28 <HAL_RCC_OscConfig+0x788>)
 8004e92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e98:	4b23      	ldr	r3, [pc, #140]	; (8004f28 <HAL_RCC_OscConfig+0x788>)
 8004e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9c:	4a22      	ldr	r2, [pc, #136]	; (8004f28 <HAL_RCC_OscConfig+0x788>)
 8004e9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ea2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004ea4:	4b20      	ldr	r3, [pc, #128]	; (8004f28 <HAL_RCC_OscConfig+0x788>)
 8004ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea8:	4a1f      	ldr	r2, [pc, #124]	; (8004f28 <HAL_RCC_OscConfig+0x788>)
 8004eaa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004eae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004eb0:	4b1d      	ldr	r3, [pc, #116]	; (8004f28 <HAL_RCC_OscConfig+0x788>)
 8004eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb4:	4a1c      	ldr	r2, [pc, #112]	; (8004f28 <HAL_RCC_OscConfig+0x788>)
 8004eb6:	f043 0301 	orr.w	r3, r3, #1
 8004eba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ebc:	4b1a      	ldr	r3, [pc, #104]	; (8004f28 <HAL_RCC_OscConfig+0x788>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a19      	ldr	r2, [pc, #100]	; (8004f28 <HAL_RCC_OscConfig+0x788>)
 8004ec2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ec6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec8:	f7fb fe06 	bl	8000ad8 <HAL_GetTick>
 8004ecc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ece:	e008      	b.n	8004ee2 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ed0:	f7fb fe02 	bl	8000ad8 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e067      	b.n	8004fb2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ee2:	4b11      	ldr	r3, [pc, #68]	; (8004f28 <HAL_RCC_OscConfig+0x788>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d0f0      	beq.n	8004ed0 <HAL_RCC_OscConfig+0x730>
 8004eee:	e05f      	b.n	8004fb0 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ef0:	4b0d      	ldr	r3, [pc, #52]	; (8004f28 <HAL_RCC_OscConfig+0x788>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a0c      	ldr	r2, [pc, #48]	; (8004f28 <HAL_RCC_OscConfig+0x788>)
 8004ef6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004efa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004efc:	f7fb fdec 	bl	8000ad8 <HAL_GetTick>
 8004f00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f02:	e008      	b.n	8004f16 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f04:	f7fb fde8 	bl	8000ad8 <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d901      	bls.n	8004f16 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e04d      	b.n	8004fb2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f16:	4b04      	ldr	r3, [pc, #16]	; (8004f28 <HAL_RCC_OscConfig+0x788>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1f0      	bne.n	8004f04 <HAL_RCC_OscConfig+0x764>
 8004f22:	e045      	b.n	8004fb0 <HAL_RCC_OscConfig+0x810>
 8004f24:	58024800 	.word	0x58024800
 8004f28:	58024400 	.word	0x58024400
 8004f2c:	fffffc0c 	.word	0xfffffc0c
 8004f30:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004f34:	4b21      	ldr	r3, [pc, #132]	; (8004fbc <HAL_RCC_OscConfig+0x81c>)
 8004f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f38:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004f3a:	4b20      	ldr	r3, [pc, #128]	; (8004fbc <HAL_RCC_OscConfig+0x81c>)
 8004f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d031      	beq.n	8004fac <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	f003 0203 	and.w	r2, r3, #3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d12a      	bne.n	8004fac <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	091b      	lsrs	r3, r3, #4
 8004f5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d122      	bne.n	8004fac <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f70:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d11a      	bne.n	8004fac <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	0a5b      	lsrs	r3, r3, #9
 8004f7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f82:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d111      	bne.n	8004fac <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	0c1b      	lsrs	r3, r3, #16
 8004f8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f94:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d108      	bne.n	8004fac <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	0e1b      	lsrs	r3, r3, #24
 8004f9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fa6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d001      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e000      	b.n	8004fb2 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3730      	adds	r7, #48	; 0x30
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	58024400 	.word	0x58024400

08004fc0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b086      	sub	sp, #24
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d101      	bne.n	8004fd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e19c      	b.n	800530e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fd4:	4b8a      	ldr	r3, [pc, #552]	; (8005200 <HAL_RCC_ClockConfig+0x240>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 030f 	and.w	r3, r3, #15
 8004fdc:	683a      	ldr	r2, [r7, #0]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d910      	bls.n	8005004 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fe2:	4b87      	ldr	r3, [pc, #540]	; (8005200 <HAL_RCC_ClockConfig+0x240>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f023 020f 	bic.w	r2, r3, #15
 8004fea:	4985      	ldr	r1, [pc, #532]	; (8005200 <HAL_RCC_ClockConfig+0x240>)
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ff2:	4b83      	ldr	r3, [pc, #524]	; (8005200 <HAL_RCC_ClockConfig+0x240>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 030f 	and.w	r3, r3, #15
 8004ffa:	683a      	ldr	r2, [r7, #0]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d001      	beq.n	8005004 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e184      	b.n	800530e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0304 	and.w	r3, r3, #4
 800500c:	2b00      	cmp	r3, #0
 800500e:	d010      	beq.n	8005032 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	691a      	ldr	r2, [r3, #16]
 8005014:	4b7b      	ldr	r3, [pc, #492]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800501c:	429a      	cmp	r2, r3
 800501e:	d908      	bls.n	8005032 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005020:	4b78      	ldr	r3, [pc, #480]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	4975      	ldr	r1, [pc, #468]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 800502e:	4313      	orrs	r3, r2
 8005030:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0308 	and.w	r3, r3, #8
 800503a:	2b00      	cmp	r3, #0
 800503c:	d010      	beq.n	8005060 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	695a      	ldr	r2, [r3, #20]
 8005042:	4b70      	ldr	r3, [pc, #448]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 8005044:	69db      	ldr	r3, [r3, #28]
 8005046:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800504a:	429a      	cmp	r2, r3
 800504c:	d908      	bls.n	8005060 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800504e:	4b6d      	ldr	r3, [pc, #436]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 8005050:	69db      	ldr	r3, [r3, #28]
 8005052:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	496a      	ldr	r1, [pc, #424]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 800505c:	4313      	orrs	r3, r2
 800505e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0310 	and.w	r3, r3, #16
 8005068:	2b00      	cmp	r3, #0
 800506a:	d010      	beq.n	800508e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	699a      	ldr	r2, [r3, #24]
 8005070:	4b64      	ldr	r3, [pc, #400]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 8005072:	69db      	ldr	r3, [r3, #28]
 8005074:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005078:	429a      	cmp	r2, r3
 800507a:	d908      	bls.n	800508e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800507c:	4b61      	ldr	r3, [pc, #388]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 800507e:	69db      	ldr	r3, [r3, #28]
 8005080:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	699b      	ldr	r3, [r3, #24]
 8005088:	495e      	ldr	r1, [pc, #376]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 800508a:	4313      	orrs	r3, r2
 800508c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0320 	and.w	r3, r3, #32
 8005096:	2b00      	cmp	r3, #0
 8005098:	d010      	beq.n	80050bc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	69da      	ldr	r2, [r3, #28]
 800509e:	4b59      	ldr	r3, [pc, #356]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d908      	bls.n	80050bc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80050aa:	4b56      	ldr	r3, [pc, #344]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	69db      	ldr	r3, [r3, #28]
 80050b6:	4953      	ldr	r1, [pc, #332]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 80050b8:	4313      	orrs	r3, r2
 80050ba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0302 	and.w	r3, r3, #2
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d010      	beq.n	80050ea <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	68da      	ldr	r2, [r3, #12]
 80050cc:	4b4d      	ldr	r3, [pc, #308]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 80050ce:	699b      	ldr	r3, [r3, #24]
 80050d0:	f003 030f 	and.w	r3, r3, #15
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d908      	bls.n	80050ea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050d8:	4b4a      	ldr	r3, [pc, #296]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	f023 020f 	bic.w	r2, r3, #15
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	4947      	ldr	r1, [pc, #284]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0301 	and.w	r3, r3, #1
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d055      	beq.n	80051a2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80050f6:	4b43      	ldr	r3, [pc, #268]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	4940      	ldr	r1, [pc, #256]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 8005104:	4313      	orrs	r3, r2
 8005106:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	2b02      	cmp	r3, #2
 800510e:	d107      	bne.n	8005120 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005110:	4b3c      	ldr	r3, [pc, #240]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d121      	bne.n	8005160 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e0f6      	b.n	800530e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	2b03      	cmp	r3, #3
 8005126:	d107      	bne.n	8005138 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005128:	4b36      	ldr	r3, [pc, #216]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d115      	bne.n	8005160 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e0ea      	b.n	800530e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d107      	bne.n	8005150 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005140:	4b30      	ldr	r3, [pc, #192]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005148:	2b00      	cmp	r3, #0
 800514a:	d109      	bne.n	8005160 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e0de      	b.n	800530e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005150:	4b2c      	ldr	r3, [pc, #176]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0304 	and.w	r3, r3, #4
 8005158:	2b00      	cmp	r3, #0
 800515a:	d101      	bne.n	8005160 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e0d6      	b.n	800530e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005160:	4b28      	ldr	r3, [pc, #160]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	f023 0207 	bic.w	r2, r3, #7
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	4925      	ldr	r1, [pc, #148]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 800516e:	4313      	orrs	r3, r2
 8005170:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005172:	f7fb fcb1 	bl	8000ad8 <HAL_GetTick>
 8005176:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005178:	e00a      	b.n	8005190 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800517a:	f7fb fcad 	bl	8000ad8 <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	f241 3288 	movw	r2, #5000	; 0x1388
 8005188:	4293      	cmp	r3, r2
 800518a:	d901      	bls.n	8005190 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	e0be      	b.n	800530e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005190:	4b1c      	ldr	r3, [pc, #112]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	00db      	lsls	r3, r3, #3
 800519e:	429a      	cmp	r2, r3
 80051a0:	d1eb      	bne.n	800517a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0302 	and.w	r3, r3, #2
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d010      	beq.n	80051d0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	68da      	ldr	r2, [r3, #12]
 80051b2:	4b14      	ldr	r3, [pc, #80]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	f003 030f 	and.w	r3, r3, #15
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d208      	bcs.n	80051d0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051be:	4b11      	ldr	r3, [pc, #68]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	f023 020f 	bic.w	r2, r3, #15
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	490e      	ldr	r1, [pc, #56]	; (8005204 <HAL_RCC_ClockConfig+0x244>)
 80051cc:	4313      	orrs	r3, r2
 80051ce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051d0:	4b0b      	ldr	r3, [pc, #44]	; (8005200 <HAL_RCC_ClockConfig+0x240>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 030f 	and.w	r3, r3, #15
 80051d8:	683a      	ldr	r2, [r7, #0]
 80051da:	429a      	cmp	r2, r3
 80051dc:	d214      	bcs.n	8005208 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051de:	4b08      	ldr	r3, [pc, #32]	; (8005200 <HAL_RCC_ClockConfig+0x240>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f023 020f 	bic.w	r2, r3, #15
 80051e6:	4906      	ldr	r1, [pc, #24]	; (8005200 <HAL_RCC_ClockConfig+0x240>)
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ee:	4b04      	ldr	r3, [pc, #16]	; (8005200 <HAL_RCC_ClockConfig+0x240>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 030f 	and.w	r3, r3, #15
 80051f6:	683a      	ldr	r2, [r7, #0]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d005      	beq.n	8005208 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e086      	b.n	800530e <HAL_RCC_ClockConfig+0x34e>
 8005200:	52002000 	.word	0x52002000
 8005204:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0304 	and.w	r3, r3, #4
 8005210:	2b00      	cmp	r3, #0
 8005212:	d010      	beq.n	8005236 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	691a      	ldr	r2, [r3, #16]
 8005218:	4b3f      	ldr	r3, [pc, #252]	; (8005318 <HAL_RCC_ClockConfig+0x358>)
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005220:	429a      	cmp	r2, r3
 8005222:	d208      	bcs.n	8005236 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005224:	4b3c      	ldr	r3, [pc, #240]	; (8005318 <HAL_RCC_ClockConfig+0x358>)
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	4939      	ldr	r1, [pc, #228]	; (8005318 <HAL_RCC_ClockConfig+0x358>)
 8005232:	4313      	orrs	r3, r2
 8005234:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0308 	and.w	r3, r3, #8
 800523e:	2b00      	cmp	r3, #0
 8005240:	d010      	beq.n	8005264 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	695a      	ldr	r2, [r3, #20]
 8005246:	4b34      	ldr	r3, [pc, #208]	; (8005318 <HAL_RCC_ClockConfig+0x358>)
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800524e:	429a      	cmp	r2, r3
 8005250:	d208      	bcs.n	8005264 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005252:	4b31      	ldr	r3, [pc, #196]	; (8005318 <HAL_RCC_ClockConfig+0x358>)
 8005254:	69db      	ldr	r3, [r3, #28]
 8005256:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	695b      	ldr	r3, [r3, #20]
 800525e:	492e      	ldr	r1, [pc, #184]	; (8005318 <HAL_RCC_ClockConfig+0x358>)
 8005260:	4313      	orrs	r3, r2
 8005262:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0310 	and.w	r3, r3, #16
 800526c:	2b00      	cmp	r3, #0
 800526e:	d010      	beq.n	8005292 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	699a      	ldr	r2, [r3, #24]
 8005274:	4b28      	ldr	r3, [pc, #160]	; (8005318 <HAL_RCC_ClockConfig+0x358>)
 8005276:	69db      	ldr	r3, [r3, #28]
 8005278:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800527c:	429a      	cmp	r2, r3
 800527e:	d208      	bcs.n	8005292 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005280:	4b25      	ldr	r3, [pc, #148]	; (8005318 <HAL_RCC_ClockConfig+0x358>)
 8005282:	69db      	ldr	r3, [r3, #28]
 8005284:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	4922      	ldr	r1, [pc, #136]	; (8005318 <HAL_RCC_ClockConfig+0x358>)
 800528e:	4313      	orrs	r3, r2
 8005290:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 0320 	and.w	r3, r3, #32
 800529a:	2b00      	cmp	r3, #0
 800529c:	d010      	beq.n	80052c0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	69da      	ldr	r2, [r3, #28]
 80052a2:	4b1d      	ldr	r3, [pc, #116]	; (8005318 <HAL_RCC_ClockConfig+0x358>)
 80052a4:	6a1b      	ldr	r3, [r3, #32]
 80052a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d208      	bcs.n	80052c0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80052ae:	4b1a      	ldr	r3, [pc, #104]	; (8005318 <HAL_RCC_ClockConfig+0x358>)
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	69db      	ldr	r3, [r3, #28]
 80052ba:	4917      	ldr	r1, [pc, #92]	; (8005318 <HAL_RCC_ClockConfig+0x358>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80052c0:	f000 f834 	bl	800532c <HAL_RCC_GetSysClockFreq>
 80052c4:	4602      	mov	r2, r0
 80052c6:	4b14      	ldr	r3, [pc, #80]	; (8005318 <HAL_RCC_ClockConfig+0x358>)
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	0a1b      	lsrs	r3, r3, #8
 80052cc:	f003 030f 	and.w	r3, r3, #15
 80052d0:	4912      	ldr	r1, [pc, #72]	; (800531c <HAL_RCC_ClockConfig+0x35c>)
 80052d2:	5ccb      	ldrb	r3, [r1, r3]
 80052d4:	f003 031f 	and.w	r3, r3, #31
 80052d8:	fa22 f303 	lsr.w	r3, r2, r3
 80052dc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80052de:	4b0e      	ldr	r3, [pc, #56]	; (8005318 <HAL_RCC_ClockConfig+0x358>)
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	f003 030f 	and.w	r3, r3, #15
 80052e6:	4a0d      	ldr	r2, [pc, #52]	; (800531c <HAL_RCC_ClockConfig+0x35c>)
 80052e8:	5cd3      	ldrb	r3, [r2, r3]
 80052ea:	f003 031f 	and.w	r3, r3, #31
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	fa22 f303 	lsr.w	r3, r2, r3
 80052f4:	4a0a      	ldr	r2, [pc, #40]	; (8005320 <HAL_RCC_ClockConfig+0x360>)
 80052f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80052f8:	4a0a      	ldr	r2, [pc, #40]	; (8005324 <HAL_RCC_ClockConfig+0x364>)
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80052fe:	4b0a      	ldr	r3, [pc, #40]	; (8005328 <HAL_RCC_ClockConfig+0x368>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4618      	mov	r0, r3
 8005304:	f7fb fb9e 	bl	8000a44 <HAL_InitTick>
 8005308:	4603      	mov	r3, r0
 800530a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800530c:	7bfb      	ldrb	r3, [r7, #15]
}
 800530e:	4618      	mov	r0, r3
 8005310:	3718      	adds	r7, #24
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	58024400 	.word	0x58024400
 800531c:	08007a5c 	.word	0x08007a5c
 8005320:	24000004 	.word	0x24000004
 8005324:	24000000 	.word	0x24000000
 8005328:	24000008 	.word	0x24000008

0800532c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800532c:	b480      	push	{r7}
 800532e:	b089      	sub	sp, #36	; 0x24
 8005330:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005332:	4bb3      	ldr	r3, [pc, #716]	; (8005600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800533a:	2b18      	cmp	r3, #24
 800533c:	f200 8155 	bhi.w	80055ea <HAL_RCC_GetSysClockFreq+0x2be>
 8005340:	a201      	add	r2, pc, #4	; (adr r2, 8005348 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005346:	bf00      	nop
 8005348:	080053ad 	.word	0x080053ad
 800534c:	080055eb 	.word	0x080055eb
 8005350:	080055eb 	.word	0x080055eb
 8005354:	080055eb 	.word	0x080055eb
 8005358:	080055eb 	.word	0x080055eb
 800535c:	080055eb 	.word	0x080055eb
 8005360:	080055eb 	.word	0x080055eb
 8005364:	080055eb 	.word	0x080055eb
 8005368:	080053d3 	.word	0x080053d3
 800536c:	080055eb 	.word	0x080055eb
 8005370:	080055eb 	.word	0x080055eb
 8005374:	080055eb 	.word	0x080055eb
 8005378:	080055eb 	.word	0x080055eb
 800537c:	080055eb 	.word	0x080055eb
 8005380:	080055eb 	.word	0x080055eb
 8005384:	080055eb 	.word	0x080055eb
 8005388:	080053d9 	.word	0x080053d9
 800538c:	080055eb 	.word	0x080055eb
 8005390:	080055eb 	.word	0x080055eb
 8005394:	080055eb 	.word	0x080055eb
 8005398:	080055eb 	.word	0x080055eb
 800539c:	080055eb 	.word	0x080055eb
 80053a0:	080055eb 	.word	0x080055eb
 80053a4:	080055eb 	.word	0x080055eb
 80053a8:	080053df 	.word	0x080053df
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053ac:	4b94      	ldr	r3, [pc, #592]	; (8005600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0320 	and.w	r3, r3, #32
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d009      	beq.n	80053cc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80053b8:	4b91      	ldr	r3, [pc, #580]	; (8005600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	08db      	lsrs	r3, r3, #3
 80053be:	f003 0303 	and.w	r3, r3, #3
 80053c2:	4a90      	ldr	r2, [pc, #576]	; (8005604 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80053c4:	fa22 f303 	lsr.w	r3, r2, r3
 80053c8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80053ca:	e111      	b.n	80055f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80053cc:	4b8d      	ldr	r3, [pc, #564]	; (8005604 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80053ce:	61bb      	str	r3, [r7, #24]
    break;
 80053d0:	e10e      	b.n	80055f0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80053d2:	4b8d      	ldr	r3, [pc, #564]	; (8005608 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80053d4:	61bb      	str	r3, [r7, #24]
    break;
 80053d6:	e10b      	b.n	80055f0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80053d8:	4b8c      	ldr	r3, [pc, #560]	; (800560c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80053da:	61bb      	str	r3, [r7, #24]
    break;
 80053dc:	e108      	b.n	80055f0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80053de:	4b88      	ldr	r3, [pc, #544]	; (8005600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e2:	f003 0303 	and.w	r3, r3, #3
 80053e6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80053e8:	4b85      	ldr	r3, [pc, #532]	; (8005600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ec:	091b      	lsrs	r3, r3, #4
 80053ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053f2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80053f4:	4b82      	ldr	r3, [pc, #520]	; (8005600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f8:	f003 0301 	and.w	r3, r3, #1
 80053fc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80053fe:	4b80      	ldr	r3, [pc, #512]	; (8005600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005402:	08db      	lsrs	r3, r3, #3
 8005404:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	fb02 f303 	mul.w	r3, r2, r3
 800540e:	ee07 3a90 	vmov	s15, r3
 8005412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005416:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	2b00      	cmp	r3, #0
 800541e:	f000 80e1 	beq.w	80055e4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	2b02      	cmp	r3, #2
 8005426:	f000 8083 	beq.w	8005530 <HAL_RCC_GetSysClockFreq+0x204>
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	2b02      	cmp	r3, #2
 800542e:	f200 80a1 	bhi.w	8005574 <HAL_RCC_GetSysClockFreq+0x248>
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d003      	beq.n	8005440 <HAL_RCC_GetSysClockFreq+0x114>
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	2b01      	cmp	r3, #1
 800543c:	d056      	beq.n	80054ec <HAL_RCC_GetSysClockFreq+0x1c0>
 800543e:	e099      	b.n	8005574 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005440:	4b6f      	ldr	r3, [pc, #444]	; (8005600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0320 	and.w	r3, r3, #32
 8005448:	2b00      	cmp	r3, #0
 800544a:	d02d      	beq.n	80054a8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800544c:	4b6c      	ldr	r3, [pc, #432]	; (8005600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	08db      	lsrs	r3, r3, #3
 8005452:	f003 0303 	and.w	r3, r3, #3
 8005456:	4a6b      	ldr	r2, [pc, #428]	; (8005604 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005458:	fa22 f303 	lsr.w	r3, r2, r3
 800545c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	ee07 3a90 	vmov	s15, r3
 8005464:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	ee07 3a90 	vmov	s15, r3
 800546e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005472:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005476:	4b62      	ldr	r3, [pc, #392]	; (8005600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800547a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800547e:	ee07 3a90 	vmov	s15, r3
 8005482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005486:	ed97 6a02 	vldr	s12, [r7, #8]
 800548a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005610 <HAL_RCC_GetSysClockFreq+0x2e4>
 800548e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005492:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005496:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800549a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800549e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80054a6:	e087      	b.n	80055b8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	ee07 3a90 	vmov	s15, r3
 80054ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054b2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005614 <HAL_RCC_GetSysClockFreq+0x2e8>
 80054b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054ba:	4b51      	ldr	r3, [pc, #324]	; (8005600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054c2:	ee07 3a90 	vmov	s15, r3
 80054c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80054ce:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005610 <HAL_RCC_GetSysClockFreq+0x2e4>
 80054d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054ea:	e065      	b.n	80055b8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	ee07 3a90 	vmov	s15, r3
 80054f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054f6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005618 <HAL_RCC_GetSysClockFreq+0x2ec>
 80054fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054fe:	4b40      	ldr	r3, [pc, #256]	; (8005600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005506:	ee07 3a90 	vmov	s15, r3
 800550a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800550e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005512:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005610 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005516:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800551a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800551e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005522:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800552a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800552e:	e043      	b.n	80055b8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	ee07 3a90 	vmov	s15, r3
 8005536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800553a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800561c <HAL_RCC_GetSysClockFreq+0x2f0>
 800553e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005542:	4b2f      	ldr	r3, [pc, #188]	; (8005600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800554a:	ee07 3a90 	vmov	s15, r3
 800554e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005552:	ed97 6a02 	vldr	s12, [r7, #8]
 8005556:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005610 <HAL_RCC_GetSysClockFreq+0x2e4>
 800555a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800555e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005562:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005566:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800556a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800556e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005572:	e021      	b.n	80055b8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	ee07 3a90 	vmov	s15, r3
 800557a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800557e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005618 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005582:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005586:	4b1e      	ldr	r3, [pc, #120]	; (8005600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800558a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800558e:	ee07 3a90 	vmov	s15, r3
 8005592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005596:	ed97 6a02 	vldr	s12, [r7, #8]
 800559a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005610 <HAL_RCC_GetSysClockFreq+0x2e4>
 800559e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80055b6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80055b8:	4b11      	ldr	r3, [pc, #68]	; (8005600 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055bc:	0a5b      	lsrs	r3, r3, #9
 80055be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055c2:	3301      	adds	r3, #1
 80055c4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	ee07 3a90 	vmov	s15, r3
 80055cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80055d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80055d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055dc:	ee17 3a90 	vmov	r3, s15
 80055e0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80055e2:	e005      	b.n	80055f0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80055e4:	2300      	movs	r3, #0
 80055e6:	61bb      	str	r3, [r7, #24]
    break;
 80055e8:	e002      	b.n	80055f0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80055ea:	4b07      	ldr	r3, [pc, #28]	; (8005608 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80055ec:	61bb      	str	r3, [r7, #24]
    break;
 80055ee:	bf00      	nop
  }

  return sysclockfreq;
 80055f0:	69bb      	ldr	r3, [r7, #24]
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3724      	adds	r7, #36	; 0x24
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop
 8005600:	58024400 	.word	0x58024400
 8005604:	03d09000 	.word	0x03d09000
 8005608:	003d0900 	.word	0x003d0900
 800560c:	017d7840 	.word	0x017d7840
 8005610:	46000000 	.word	0x46000000
 8005614:	4c742400 	.word	0x4c742400
 8005618:	4a742400 	.word	0x4a742400
 800561c:	4bbebc20 	.word	0x4bbebc20

08005620 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005626:	f7ff fe81 	bl	800532c <HAL_RCC_GetSysClockFreq>
 800562a:	4602      	mov	r2, r0
 800562c:	4b10      	ldr	r3, [pc, #64]	; (8005670 <HAL_RCC_GetHCLKFreq+0x50>)
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	0a1b      	lsrs	r3, r3, #8
 8005632:	f003 030f 	and.w	r3, r3, #15
 8005636:	490f      	ldr	r1, [pc, #60]	; (8005674 <HAL_RCC_GetHCLKFreq+0x54>)
 8005638:	5ccb      	ldrb	r3, [r1, r3]
 800563a:	f003 031f 	and.w	r3, r3, #31
 800563e:	fa22 f303 	lsr.w	r3, r2, r3
 8005642:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005644:	4b0a      	ldr	r3, [pc, #40]	; (8005670 <HAL_RCC_GetHCLKFreq+0x50>)
 8005646:	699b      	ldr	r3, [r3, #24]
 8005648:	f003 030f 	and.w	r3, r3, #15
 800564c:	4a09      	ldr	r2, [pc, #36]	; (8005674 <HAL_RCC_GetHCLKFreq+0x54>)
 800564e:	5cd3      	ldrb	r3, [r2, r3]
 8005650:	f003 031f 	and.w	r3, r3, #31
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	fa22 f303 	lsr.w	r3, r2, r3
 800565a:	4a07      	ldr	r2, [pc, #28]	; (8005678 <HAL_RCC_GetHCLKFreq+0x58>)
 800565c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800565e:	4a07      	ldr	r2, [pc, #28]	; (800567c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005664:	4b04      	ldr	r3, [pc, #16]	; (8005678 <HAL_RCC_GetHCLKFreq+0x58>)
 8005666:	681b      	ldr	r3, [r3, #0]
}
 8005668:	4618      	mov	r0, r3
 800566a:	3708      	adds	r7, #8
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}
 8005670:	58024400 	.word	0x58024400
 8005674:	08007a5c 	.word	0x08007a5c
 8005678:	24000004 	.word	0x24000004
 800567c:	24000000 	.word	0x24000000

08005680 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b086      	sub	sp, #24
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005688:	2300      	movs	r3, #0
 800568a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800568c:	2300      	movs	r3, #0
 800568e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005698:	2b00      	cmp	r3, #0
 800569a:	d03f      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80056a4:	d02a      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80056a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80056aa:	d824      	bhi.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80056ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056b0:	d018      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80056b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056b6:	d81e      	bhi.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d003      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80056bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056c0:	d007      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80056c2:	e018      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056c4:	4bab      	ldr	r3, [pc, #684]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80056c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c8:	4aaa      	ldr	r2, [pc, #680]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80056ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80056d0:	e015      	b.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	3304      	adds	r3, #4
 80056d6:	2102      	movs	r1, #2
 80056d8:	4618      	mov	r0, r3
 80056da:	f002 f823 	bl	8007724 <RCCEx_PLL2_Config>
 80056de:	4603      	mov	r3, r0
 80056e0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80056e2:	e00c      	b.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	3324      	adds	r3, #36	; 0x24
 80056e8:	2102      	movs	r1, #2
 80056ea:	4618      	mov	r0, r3
 80056ec:	f002 f8cc 	bl	8007888 <RCCEx_PLL3_Config>
 80056f0:	4603      	mov	r3, r0
 80056f2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80056f4:	e003      	b.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	75fb      	strb	r3, [r7, #23]
      break;
 80056fa:	e000      	b.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80056fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056fe:	7dfb      	ldrb	r3, [r7, #23]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d109      	bne.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005704:	4b9b      	ldr	r3, [pc, #620]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005708:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005710:	4998      	ldr	r1, [pc, #608]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005712:	4313      	orrs	r3, r2
 8005714:	650b      	str	r3, [r1, #80]	; 0x50
 8005716:	e001      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005718:	7dfb      	ldrb	r3, [r7, #23]
 800571a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005724:	2b00      	cmp	r3, #0
 8005726:	d03d      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800572c:	2b04      	cmp	r3, #4
 800572e:	d826      	bhi.n	800577e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005730:	a201      	add	r2, pc, #4	; (adr r2, 8005738 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005736:	bf00      	nop
 8005738:	0800574d 	.word	0x0800574d
 800573c:	0800575b 	.word	0x0800575b
 8005740:	0800576d 	.word	0x0800576d
 8005744:	08005785 	.word	0x08005785
 8005748:	08005785 	.word	0x08005785
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800574c:	4b89      	ldr	r3, [pc, #548]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800574e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005750:	4a88      	ldr	r2, [pc, #544]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005752:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005756:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005758:	e015      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	3304      	adds	r3, #4
 800575e:	2100      	movs	r1, #0
 8005760:	4618      	mov	r0, r3
 8005762:	f001 ffdf 	bl	8007724 <RCCEx_PLL2_Config>
 8005766:	4603      	mov	r3, r0
 8005768:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800576a:	e00c      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	3324      	adds	r3, #36	; 0x24
 8005770:	2100      	movs	r1, #0
 8005772:	4618      	mov	r0, r3
 8005774:	f002 f888 	bl	8007888 <RCCEx_PLL3_Config>
 8005778:	4603      	mov	r3, r0
 800577a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800577c:	e003      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	75fb      	strb	r3, [r7, #23]
      break;
 8005782:	e000      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005784:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005786:	7dfb      	ldrb	r3, [r7, #23]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d109      	bne.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800578c:	4b79      	ldr	r3, [pc, #484]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800578e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005790:	f023 0207 	bic.w	r2, r3, #7
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005798:	4976      	ldr	r1, [pc, #472]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800579a:	4313      	orrs	r3, r2
 800579c:	650b      	str	r3, [r1, #80]	; 0x50
 800579e:	e001      	b.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057a0:	7dfb      	ldrb	r3, [r7, #23]
 80057a2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d042      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057b8:	d02b      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80057ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057be:	d825      	bhi.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80057c0:	2bc0      	cmp	r3, #192	; 0xc0
 80057c2:	d028      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80057c4:	2bc0      	cmp	r3, #192	; 0xc0
 80057c6:	d821      	bhi.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80057c8:	2b80      	cmp	r3, #128	; 0x80
 80057ca:	d016      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80057cc:	2b80      	cmp	r3, #128	; 0x80
 80057ce:	d81d      	bhi.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d002      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80057d4:	2b40      	cmp	r3, #64	; 0x40
 80057d6:	d007      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80057d8:	e018      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057da:	4b66      	ldr	r3, [pc, #408]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057de:	4a65      	ldr	r2, [pc, #404]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80057e6:	e017      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	3304      	adds	r3, #4
 80057ec:	2100      	movs	r1, #0
 80057ee:	4618      	mov	r0, r3
 80057f0:	f001 ff98 	bl	8007724 <RCCEx_PLL2_Config>
 80057f4:	4603      	mov	r3, r0
 80057f6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80057f8:	e00e      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	3324      	adds	r3, #36	; 0x24
 80057fe:	2100      	movs	r1, #0
 8005800:	4618      	mov	r0, r3
 8005802:	f002 f841 	bl	8007888 <RCCEx_PLL3_Config>
 8005806:	4603      	mov	r3, r0
 8005808:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800580a:	e005      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	75fb      	strb	r3, [r7, #23]
      break;
 8005810:	e002      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005812:	bf00      	nop
 8005814:	e000      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005816:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005818:	7dfb      	ldrb	r3, [r7, #23]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d109      	bne.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800581e:	4b55      	ldr	r3, [pc, #340]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005822:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800582a:	4952      	ldr	r1, [pc, #328]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800582c:	4313      	orrs	r3, r2
 800582e:	650b      	str	r3, [r1, #80]	; 0x50
 8005830:	e001      	b.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005832:	7dfb      	ldrb	r3, [r7, #23]
 8005834:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800583e:	2b00      	cmp	r3, #0
 8005840:	d049      	beq.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005848:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800584c:	d030      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800584e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005852:	d82a      	bhi.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005854:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005858:	d02c      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800585a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800585e:	d824      	bhi.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005860:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005864:	d018      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005866:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800586a:	d81e      	bhi.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800586c:	2b00      	cmp	r3, #0
 800586e:	d003      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005870:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005874:	d007      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005876:	e018      	b.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005878:	4b3e      	ldr	r3, [pc, #248]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800587a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587c:	4a3d      	ldr	r2, [pc, #244]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800587e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005882:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005884:	e017      	b.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	3304      	adds	r3, #4
 800588a:	2100      	movs	r1, #0
 800588c:	4618      	mov	r0, r3
 800588e:	f001 ff49 	bl	8007724 <RCCEx_PLL2_Config>
 8005892:	4603      	mov	r3, r0
 8005894:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005896:	e00e      	b.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	3324      	adds	r3, #36	; 0x24
 800589c:	2100      	movs	r1, #0
 800589e:	4618      	mov	r0, r3
 80058a0:	f001 fff2 	bl	8007888 <RCCEx_PLL3_Config>
 80058a4:	4603      	mov	r3, r0
 80058a6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80058a8:	e005      	b.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	75fb      	strb	r3, [r7, #23]
      break;
 80058ae:	e002      	b.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80058b0:	bf00      	nop
 80058b2:	e000      	b.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80058b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058b6:	7dfb      	ldrb	r3, [r7, #23]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d10a      	bne.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80058bc:	4b2d      	ldr	r3, [pc, #180]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80058be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058c0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80058ca:	492a      	ldr	r1, [pc, #168]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80058cc:	4313      	orrs	r3, r2
 80058ce:	658b      	str	r3, [r1, #88]	; 0x58
 80058d0:	e001      	b.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058d2:	7dfb      	ldrb	r3, [r7, #23]
 80058d4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d04c      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80058e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058ec:	d030      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80058ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058f2:	d82a      	bhi.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80058f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80058f8:	d02c      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80058fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80058fe:	d824      	bhi.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005900:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005904:	d018      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005906:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800590a:	d81e      	bhi.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800590c:	2b00      	cmp	r3, #0
 800590e:	d003      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005910:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005914:	d007      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005916:	e018      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005918:	4b16      	ldr	r3, [pc, #88]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800591a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800591c:	4a15      	ldr	r2, [pc, #84]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800591e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005922:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005924:	e017      	b.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	3304      	adds	r3, #4
 800592a:	2100      	movs	r1, #0
 800592c:	4618      	mov	r0, r3
 800592e:	f001 fef9 	bl	8007724 <RCCEx_PLL2_Config>
 8005932:	4603      	mov	r3, r0
 8005934:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005936:	e00e      	b.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	3324      	adds	r3, #36	; 0x24
 800593c:	2100      	movs	r1, #0
 800593e:	4618      	mov	r0, r3
 8005940:	f001 ffa2 	bl	8007888 <RCCEx_PLL3_Config>
 8005944:	4603      	mov	r3, r0
 8005946:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005948:	e005      	b.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	75fb      	strb	r3, [r7, #23]
      break;
 800594e:	e002      	b.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005950:	bf00      	nop
 8005952:	e000      	b.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8005954:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005956:	7dfb      	ldrb	r3, [r7, #23]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d10d      	bne.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800595c:	4b05      	ldr	r3, [pc, #20]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800595e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005960:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800596a:	4902      	ldr	r1, [pc, #8]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800596c:	4313      	orrs	r3, r2
 800596e:	658b      	str	r3, [r1, #88]	; 0x58
 8005970:	e004      	b.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8005972:	bf00      	nop
 8005974:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005978:	7dfb      	ldrb	r3, [r7, #23]
 800597a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005984:	2b00      	cmp	r3, #0
 8005986:	d032      	beq.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800598c:	2b30      	cmp	r3, #48	; 0x30
 800598e:	d01c      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005990:	2b30      	cmp	r3, #48	; 0x30
 8005992:	d817      	bhi.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8005994:	2b20      	cmp	r3, #32
 8005996:	d00c      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005998:	2b20      	cmp	r3, #32
 800599a:	d813      	bhi.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800599c:	2b00      	cmp	r3, #0
 800599e:	d016      	beq.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80059a0:	2b10      	cmp	r3, #16
 80059a2:	d10f      	bne.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059a4:	4bb1      	ldr	r3, [pc, #708]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80059a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a8:	4ab0      	ldr	r2, [pc, #704]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80059aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80059b0:	e00e      	b.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	3304      	adds	r3, #4
 80059b6:	2102      	movs	r1, #2
 80059b8:	4618      	mov	r0, r3
 80059ba:	f001 feb3 	bl	8007724 <RCCEx_PLL2_Config>
 80059be:	4603      	mov	r3, r0
 80059c0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80059c2:	e005      	b.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	75fb      	strb	r3, [r7, #23]
      break;
 80059c8:	e002      	b.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80059ca:	bf00      	nop
 80059cc:	e000      	b.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80059ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059d0:	7dfb      	ldrb	r3, [r7, #23]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d109      	bne.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80059d6:	4ba5      	ldr	r3, [pc, #660]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80059d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059da:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059e2:	49a2      	ldr	r1, [pc, #648]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80059e4:	4313      	orrs	r3, r2
 80059e6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80059e8:	e001      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ea:	7dfb      	ldrb	r3, [r7, #23]
 80059ec:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d047      	beq.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a02:	d030      	beq.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8005a04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a08:	d82a      	bhi.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005a0a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005a0e:	d02c      	beq.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8005a10:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005a14:	d824      	bhi.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005a16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a1a:	d018      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8005a1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a20:	d81e      	bhi.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d003      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8005a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a2a:	d007      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8005a2c:	e018      	b.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a2e:	4b8f      	ldr	r3, [pc, #572]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a32:	4a8e      	ldr	r2, [pc, #568]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005a34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a38:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005a3a:	e017      	b.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	3304      	adds	r3, #4
 8005a40:	2100      	movs	r1, #0
 8005a42:	4618      	mov	r0, r3
 8005a44:	f001 fe6e 	bl	8007724 <RCCEx_PLL2_Config>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005a4c:	e00e      	b.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	3324      	adds	r3, #36	; 0x24
 8005a52:	2100      	movs	r1, #0
 8005a54:	4618      	mov	r0, r3
 8005a56:	f001 ff17 	bl	8007888 <RCCEx_PLL3_Config>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005a5e:	e005      	b.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	75fb      	strb	r3, [r7, #23]
      break;
 8005a64:	e002      	b.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005a66:	bf00      	nop
 8005a68:	e000      	b.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8005a6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a6c:	7dfb      	ldrb	r3, [r7, #23]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d109      	bne.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005a72:	4b7e      	ldr	r3, [pc, #504]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005a74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a76:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a7e:	497b      	ldr	r1, [pc, #492]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005a80:	4313      	orrs	r3, r2
 8005a82:	650b      	str	r3, [r1, #80]	; 0x50
 8005a84:	e001      	b.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a86:	7dfb      	ldrb	r3, [r7, #23]
 8005a88:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d049      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a9a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a9e:	d02e      	beq.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8005aa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005aa4:	d828      	bhi.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005aa6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005aaa:	d02a      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8005aac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005ab0:	d822      	bhi.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005ab2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ab6:	d026      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8005ab8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005abc:	d81c      	bhi.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005abe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ac2:	d010      	beq.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8005ac4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ac8:	d816      	bhi.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d01d      	beq.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8005ace:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ad2:	d111      	bne.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	3304      	adds	r3, #4
 8005ad8:	2101      	movs	r1, #1
 8005ada:	4618      	mov	r0, r3
 8005adc:	f001 fe22 	bl	8007724 <RCCEx_PLL2_Config>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005ae4:	e012      	b.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	3324      	adds	r3, #36	; 0x24
 8005aea:	2101      	movs	r1, #1
 8005aec:	4618      	mov	r0, r3
 8005aee:	f001 fecb 	bl	8007888 <RCCEx_PLL3_Config>
 8005af2:	4603      	mov	r3, r0
 8005af4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005af6:	e009      	b.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	75fb      	strb	r3, [r7, #23]
      break;
 8005afc:	e006      	b.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005afe:	bf00      	nop
 8005b00:	e004      	b.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005b02:	bf00      	nop
 8005b04:	e002      	b.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005b06:	bf00      	nop
 8005b08:	e000      	b.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8005b0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b0c:	7dfb      	ldrb	r3, [r7, #23]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d109      	bne.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005b12:	4b56      	ldr	r3, [pc, #344]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005b14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b16:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b1e:	4953      	ldr	r1, [pc, #332]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005b20:	4313      	orrs	r3, r2
 8005b22:	650b      	str	r3, [r1, #80]	; 0x50
 8005b24:	e001      	b.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b26:	7dfb      	ldrb	r3, [r7, #23]
 8005b28:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d04b      	beq.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b40:	d02e      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8005b42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b46:	d828      	bhi.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b4c:	d02a      	beq.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b52:	d822      	bhi.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005b54:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b58:	d026      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8005b5a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b5e:	d81c      	bhi.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005b60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b64:	d010      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8005b66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b6a:	d816      	bhi.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d01d      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8005b70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b74:	d111      	bne.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	3304      	adds	r3, #4
 8005b7a:	2101      	movs	r1, #1
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f001 fdd1 	bl	8007724 <RCCEx_PLL2_Config>
 8005b82:	4603      	mov	r3, r0
 8005b84:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005b86:	e012      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	3324      	adds	r3, #36	; 0x24
 8005b8c:	2101      	movs	r1, #1
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f001 fe7a 	bl	8007888 <RCCEx_PLL3_Config>
 8005b94:	4603      	mov	r3, r0
 8005b96:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005b98:	e009      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	75fb      	strb	r3, [r7, #23]
      break;
 8005b9e:	e006      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005ba0:	bf00      	nop
 8005ba2:	e004      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005ba4:	bf00      	nop
 8005ba6:	e002      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005ba8:	bf00      	nop
 8005baa:	e000      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8005bac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bae:	7dfb      	ldrb	r3, [r7, #23]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d10a      	bne.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005bb4:	4b2d      	ldr	r3, [pc, #180]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bb8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005bc2:	492a      	ldr	r1, [pc, #168]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	658b      	str	r3, [r1, #88]	; 0x58
 8005bc8:	e001      	b.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bca:	7dfb      	ldrb	r3, [r7, #23]
 8005bcc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d022      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    switch(PeriphClkInit->DsiClockSelection)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00e      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x580>
 8005be2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005be6:	d108      	bne.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x57a>
    {

    case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	3304      	adds	r3, #4
 8005bec:	2101      	movs	r1, #1
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f001 fd98 	bl	8007724 <RCCEx_PLL2_Config>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	75fb      	strb	r3, [r7, #23]

      /* DSI clock source configuration done later after clock selection check */
      break;
 8005bf8:	e003      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x582>
      /* PHY is used as clock source for DSI*/
      /* DSI clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	75fb      	strb	r3, [r7, #23]
      break;
 8005bfe:	e000      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x582>
      break;
 8005c00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c02:	7dfb      	ldrb	r3, [r7, #23]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d109      	bne.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8005c08:	4b18      	ldr	r3, [pc, #96]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c14:	4915      	ldr	r1, [pc, #84]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005c16:	4313      	orrs	r3, r2
 8005c18:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005c1a:	e001      	b.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c1c:	7dfb      	ldrb	r3, [r7, #23]
 8005c1e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d031      	beq.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x610>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c34:	d00e      	beq.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005c36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c3a:	d814      	bhi.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d017      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
 8005c40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c44:	d10f      	bne.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c46:	4b09      	ldr	r3, [pc, #36]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c4a:	4a08      	ldr	r2, [pc, #32]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8005c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c50:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005c52:	e00e      	b.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x5f2>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	3304      	adds	r3, #4
 8005c58:	2101      	movs	r1, #1
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f001 fd62 	bl	8007724 <RCCEx_PLL2_Config>
 8005c60:	4603      	mov	r3, r0
 8005c62:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005c64:	e005      	b.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	75fb      	strb	r3, [r7, #23]
      break;
 8005c6a:	e002      	b.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8005c6c:	58024400 	.word	0x58024400
      break;
 8005c70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c72:	7dfb      	ldrb	r3, [r7, #23]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d109      	bne.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005c78:	4bbc      	ldr	r3, [pc, #752]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005c7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c7c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c84:	49b9      	ldr	r1, [pc, #740]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005c86:	4313      	orrs	r3, r2
 8005c88:	650b      	str	r3, [r1, #80]	; 0x50
 8005c8a:	e001      	b.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c8c:	7dfb      	ldrb	r3, [r7, #23]
 8005c8e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d032      	beq.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ca0:	2b03      	cmp	r3, #3
 8005ca2:	d81b      	bhi.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8005ca4:	a201      	add	r2, pc, #4	; (adr r2, 8005cac <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 8005ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005caa:	bf00      	nop
 8005cac:	08005ce3 	.word	0x08005ce3
 8005cb0:	08005cbd 	.word	0x08005cbd
 8005cb4:	08005ccb 	.word	0x08005ccb
 8005cb8:	08005ce3 	.word	0x08005ce3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cbc:	4bab      	ldr	r3, [pc, #684]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc0:	4aaa      	ldr	r2, [pc, #680]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005cc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cc6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005cc8:	e00c      	b.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x664>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	3304      	adds	r3, #4
 8005cce:	2102      	movs	r1, #2
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f001 fd27 	bl	8007724 <RCCEx_PLL2_Config>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005cda:	e003      	b.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	75fb      	strb	r3, [r7, #23]
      break;
 8005ce0:	e000      	b.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      break;
 8005ce2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ce4:	7dfb      	ldrb	r3, [r7, #23]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d109      	bne.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x67e>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005cea:	4ba0      	ldr	r3, [pc, #640]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cee:	f023 0203 	bic.w	r2, r3, #3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cf6:	499d      	ldr	r1, [pc, #628]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005cfc:	e001      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x682>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cfe:	7dfb      	ldrb	r3, [r7, #23]
 8005d00:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	f000 8086 	beq.w	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x79c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d10:	4b97      	ldr	r3, [pc, #604]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a96      	ldr	r2, [pc, #600]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d1a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d1c:	f7fa fedc 	bl	8000ad8 <HAL_GetTick>
 8005d20:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d22:	e009      	b.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d24:	f7fa fed8 	bl	8000ad8 <HAL_GetTick>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	2b64      	cmp	r3, #100	; 0x64
 8005d30:	d902      	bls.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      {
        ret = HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	75fb      	strb	r3, [r7, #23]
        break;
 8005d36:	e005      	b.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d38:	4b8d      	ldr	r3, [pc, #564]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d0ef      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      }
    }

    if(ret == HAL_OK)
 8005d44:	7dfb      	ldrb	r3, [r7, #23]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d166      	bne.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005d4a:	4b88      	ldr	r3, [pc, #544]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d4c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005d54:	4053      	eors	r3, r2
 8005d56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d013      	beq.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x706>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d5e:	4b83      	ldr	r3, [pc, #524]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d66:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d68:	4b80      	ldr	r3, [pc, #512]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d6c:	4a7f      	ldr	r2, [pc, #508]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d72:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d74:	4b7d      	ldr	r3, [pc, #500]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d78:	4a7c      	ldr	r2, [pc, #496]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d7e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005d80:	4a7a      	ldr	r2, [pc, #488]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005d8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d90:	d115      	bne.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d92:	f7fa fea1 	bl	8000ad8 <HAL_GetTick>
 8005d96:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d98:	e00b      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x732>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d9a:	f7fa fe9d 	bl	8000ad8 <HAL_GetTick>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	1ad3      	subs	r3, r2, r3
 8005da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d902      	bls.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x732>
          {
            ret = HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	75fb      	strb	r3, [r7, #23]
            break;
 8005db0:	e005      	b.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x73e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005db2:	4b6e      	ldr	r3, [pc, #440]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db6:	f003 0302 	and.w	r3, r3, #2
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d0ed      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x71a>
          }
        }
      }

      if(ret == HAL_OK)
 8005dbe:	7dfb      	ldrb	r3, [r7, #23]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d126      	bne.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x792>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005dca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dd2:	d10d      	bne.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x770>
 8005dd4:	4b65      	ldr	r3, [pc, #404]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005de2:	0919      	lsrs	r1, r3, #4
 8005de4:	4b63      	ldr	r3, [pc, #396]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x8f4>)
 8005de6:	400b      	ands	r3, r1
 8005de8:	4960      	ldr	r1, [pc, #384]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005dea:	4313      	orrs	r3, r2
 8005dec:	610b      	str	r3, [r1, #16]
 8005dee:	e005      	b.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x77c>
 8005df0:	4b5e      	ldr	r3, [pc, #376]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	4a5d      	ldr	r2, [pc, #372]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005df6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005dfa:	6113      	str	r3, [r2, #16]
 8005dfc:	4b5b      	ldr	r3, [pc, #364]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005dfe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005e06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e0a:	4958      	ldr	r1, [pc, #352]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	670b      	str	r3, [r1, #112]	; 0x70
 8005e10:	e004      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e12:	7dfb      	ldrb	r3, [r7, #23]
 8005e14:	75bb      	strb	r3, [r7, #22]
 8005e16:	e001      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e18:	7dfb      	ldrb	r3, [r7, #23]
 8005e1a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0301 	and.w	r3, r3, #1
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d07e      	beq.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e2c:	2b28      	cmp	r3, #40	; 0x28
 8005e2e:	d867      	bhi.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x880>
 8005e30:	a201      	add	r2, pc, #4	; (adr r2, 8005e38 <HAL_RCCEx_PeriphCLKConfig+0x7b8>)
 8005e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e36:	bf00      	nop
 8005e38:	08005f07 	.word	0x08005f07
 8005e3c:	08005f01 	.word	0x08005f01
 8005e40:	08005f01 	.word	0x08005f01
 8005e44:	08005f01 	.word	0x08005f01
 8005e48:	08005f01 	.word	0x08005f01
 8005e4c:	08005f01 	.word	0x08005f01
 8005e50:	08005f01 	.word	0x08005f01
 8005e54:	08005f01 	.word	0x08005f01
 8005e58:	08005edd 	.word	0x08005edd
 8005e5c:	08005f01 	.word	0x08005f01
 8005e60:	08005f01 	.word	0x08005f01
 8005e64:	08005f01 	.word	0x08005f01
 8005e68:	08005f01 	.word	0x08005f01
 8005e6c:	08005f01 	.word	0x08005f01
 8005e70:	08005f01 	.word	0x08005f01
 8005e74:	08005f01 	.word	0x08005f01
 8005e78:	08005eef 	.word	0x08005eef
 8005e7c:	08005f01 	.word	0x08005f01
 8005e80:	08005f01 	.word	0x08005f01
 8005e84:	08005f01 	.word	0x08005f01
 8005e88:	08005f01 	.word	0x08005f01
 8005e8c:	08005f01 	.word	0x08005f01
 8005e90:	08005f01 	.word	0x08005f01
 8005e94:	08005f01 	.word	0x08005f01
 8005e98:	08005f07 	.word	0x08005f07
 8005e9c:	08005f01 	.word	0x08005f01
 8005ea0:	08005f01 	.word	0x08005f01
 8005ea4:	08005f01 	.word	0x08005f01
 8005ea8:	08005f01 	.word	0x08005f01
 8005eac:	08005f01 	.word	0x08005f01
 8005eb0:	08005f01 	.word	0x08005f01
 8005eb4:	08005f01 	.word	0x08005f01
 8005eb8:	08005f07 	.word	0x08005f07
 8005ebc:	08005f01 	.word	0x08005f01
 8005ec0:	08005f01 	.word	0x08005f01
 8005ec4:	08005f01 	.word	0x08005f01
 8005ec8:	08005f01 	.word	0x08005f01
 8005ecc:	08005f01 	.word	0x08005f01
 8005ed0:	08005f01 	.word	0x08005f01
 8005ed4:	08005f01 	.word	0x08005f01
 8005ed8:	08005f07 	.word	0x08005f07
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	3304      	adds	r3, #4
 8005ee0:	2101      	movs	r1, #1
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f001 fc1e 	bl	8007724 <RCCEx_PLL2_Config>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005eec:	e00c      	b.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x888>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	3324      	adds	r3, #36	; 0x24
 8005ef2:	2101      	movs	r1, #1
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f001 fcc7 	bl	8007888 <RCCEx_PLL3_Config>
 8005efa:	4603      	mov	r3, r0
 8005efc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005efe:	e003      	b.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x888>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	75fb      	strb	r3, [r7, #23]
      break;
 8005f04:	e000      	b.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x888>
      break;
 8005f06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f08:	7dfb      	ldrb	r3, [r7, #23]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d109      	bne.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005f0e:	4b17      	ldr	r3, [pc, #92]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f12:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f1a:	4914      	ldr	r1, [pc, #80]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	654b      	str	r3, [r1, #84]	; 0x54
 8005f20:	e001      	b.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f22:	7dfb      	ldrb	r3, [r7, #23]
 8005f24:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 0302 	and.w	r3, r3, #2
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d03e      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f36:	2b05      	cmp	r3, #5
 8005f38:	d827      	bhi.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8005f3a:	a201      	add	r2, pc, #4	; (adr r2, 8005f40 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f40:	08005f91 	.word	0x08005f91
 8005f44:	08005f59 	.word	0x08005f59
 8005f48:	08005f79 	.word	0x08005f79
 8005f4c:	08005f91 	.word	0x08005f91
 8005f50:	08005f91 	.word	0x08005f91
 8005f54:	08005f91 	.word	0x08005f91
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	3304      	adds	r3, #4
 8005f5c:	2101      	movs	r1, #1
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f001 fbe0 	bl	8007724 <RCCEx_PLL2_Config>
 8005f64:	4603      	mov	r3, r0
 8005f66:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005f68:	e013      	b.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x912>
 8005f6a:	bf00      	nop
 8005f6c:	58024400 	.word	0x58024400
 8005f70:	58024800 	.word	0x58024800
 8005f74:	00ffffcf 	.word	0x00ffffcf

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	3324      	adds	r3, #36	; 0x24
 8005f7c:	2101      	movs	r1, #1
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f001 fc82 	bl	8007888 <RCCEx_PLL3_Config>
 8005f84:	4603      	mov	r3, r0
 8005f86:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005f88:	e003      	b.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x912>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	75fb      	strb	r3, [r7, #23]
      break;
 8005f8e:	e000      	b.n	8005f92 <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8005f90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f92:	7dfb      	ldrb	r3, [r7, #23]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d109      	bne.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x92c>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005f98:	4b9f      	ldr	r3, [pc, #636]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8005f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f9c:	f023 0207 	bic.w	r2, r3, #7
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fa4:	499c      	ldr	r1, [pc, #624]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	654b      	str	r3, [r1, #84]	; 0x54
 8005faa:	e001      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fac:	7dfb      	ldrb	r3, [r7, #23]
 8005fae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 0304 	and.w	r3, r3, #4
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d039      	beq.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fc2:	2b05      	cmp	r3, #5
 8005fc4:	d820      	bhi.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8005fc6:	a201      	add	r2, pc, #4	; (adr r2, 8005fcc <HAL_RCCEx_PeriphCLKConfig+0x94c>)
 8005fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fcc:	0800600f 	.word	0x0800600f
 8005fd0:	08005fe5 	.word	0x08005fe5
 8005fd4:	08005ff7 	.word	0x08005ff7
 8005fd8:	0800600f 	.word	0x0800600f
 8005fdc:	0800600f 	.word	0x0800600f
 8005fe0:	0800600f 	.word	0x0800600f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	3304      	adds	r3, #4
 8005fe8:	2101      	movs	r1, #1
 8005fea:	4618      	mov	r0, r3
 8005fec:	f001 fb9a 	bl	8007724 <RCCEx_PLL2_Config>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005ff4:	e00c      	b.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x990>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	3324      	adds	r3, #36	; 0x24
 8005ffa:	2101      	movs	r1, #1
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f001 fc43 	bl	8007888 <RCCEx_PLL3_Config>
 8006002:	4603      	mov	r3, r0
 8006004:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006006:	e003      	b.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x990>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	75fb      	strb	r3, [r7, #23]
      break;
 800600c:	e000      	b.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x990>
      break;
 800600e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006010:	7dfb      	ldrb	r3, [r7, #23]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d10a      	bne.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x9ac>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006016:	4b80      	ldr	r3, [pc, #512]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8006018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800601a:	f023 0207 	bic.w	r2, r3, #7
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006024:	497c      	ldr	r1, [pc, #496]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8006026:	4313      	orrs	r3, r2
 8006028:	658b      	str	r3, [r1, #88]	; 0x58
 800602a:	e001      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800602c:	7dfb      	ldrb	r3, [r7, #23]
 800602e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 0320 	and.w	r3, r3, #32
 8006038:	2b00      	cmp	r3, #0
 800603a:	d04b      	beq.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0xa54>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006042:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006046:	d02e      	beq.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0xa26>
 8006048:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800604c:	d828      	bhi.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 800604e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006052:	d02a      	beq.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 8006054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006058:	d822      	bhi.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 800605a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800605e:	d026      	beq.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0xa2e>
 8006060:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006064:	d81c      	bhi.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8006066:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800606a:	d010      	beq.n	800608e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800606c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006070:	d816      	bhi.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8006072:	2b00      	cmp	r3, #0
 8006074:	d01d      	beq.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8006076:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800607a:	d111      	bne.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	3304      	adds	r3, #4
 8006080:	2100      	movs	r1, #0
 8006082:	4618      	mov	r0, r3
 8006084:	f001 fb4e 	bl	8007724 <RCCEx_PLL2_Config>
 8006088:	4603      	mov	r3, r0
 800608a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800608c:	e012      	b.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0xa34>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	3324      	adds	r3, #36	; 0x24
 8006092:	2102      	movs	r1, #2
 8006094:	4618      	mov	r0, r3
 8006096:	f001 fbf7 	bl	8007888 <RCCEx_PLL3_Config>
 800609a:	4603      	mov	r3, r0
 800609c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800609e:	e009      	b.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	75fb      	strb	r3, [r7, #23]
      break;
 80060a4:	e006      	b.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 80060a6:	bf00      	nop
 80060a8:	e004      	b.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 80060aa:	bf00      	nop
 80060ac:	e002      	b.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 80060ae:	bf00      	nop
 80060b0:	e000      	b.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 80060b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060b4:	7dfb      	ldrb	r3, [r7, #23]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d10a      	bne.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80060ba:	4b57      	ldr	r3, [pc, #348]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80060bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060be:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060c8:	4953      	ldr	r1, [pc, #332]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80060ca:	4313      	orrs	r3, r2
 80060cc:	654b      	str	r3, [r1, #84]	; 0x54
 80060ce:	e001      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0xa54>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060d0:	7dfb      	ldrb	r3, [r7, #23]
 80060d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d04b      	beq.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060e6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80060ea:	d02e      	beq.n	800614a <HAL_RCCEx_PeriphCLKConfig+0xaca>
 80060ec:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80060f0:	d828      	bhi.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 80060f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060f6:	d02a      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0xace>
 80060f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060fc:	d822      	bhi.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 80060fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006102:	d026      	beq.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0xad2>
 8006104:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006108:	d81c      	bhi.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 800610a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800610e:	d010      	beq.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8006110:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006114:	d816      	bhi.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8006116:	2b00      	cmp	r3, #0
 8006118:	d01d      	beq.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0xad6>
 800611a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800611e:	d111      	bne.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0xac4>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	3304      	adds	r3, #4
 8006124:	2100      	movs	r1, #0
 8006126:	4618      	mov	r0, r3
 8006128:	f001 fafc 	bl	8007724 <RCCEx_PLL2_Config>
 800612c:	4603      	mov	r3, r0
 800612e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006130:	e012      	b.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0xad8>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	3324      	adds	r3, #36	; 0x24
 8006136:	2102      	movs	r1, #2
 8006138:	4618      	mov	r0, r3
 800613a:	f001 fba5 	bl	8007888 <RCCEx_PLL3_Config>
 800613e:	4603      	mov	r3, r0
 8006140:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006142:	e009      	b.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	75fb      	strb	r3, [r7, #23]
      break;
 8006148:	e006      	b.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 800614a:	bf00      	nop
 800614c:	e004      	b.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 800614e:	bf00      	nop
 8006150:	e002      	b.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8006152:	bf00      	nop
 8006154:	e000      	b.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8006156:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006158:	7dfb      	ldrb	r3, [r7, #23]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d10a      	bne.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800615e:	4b2e      	ldr	r3, [pc, #184]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8006160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006162:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800616c:	492a      	ldr	r1, [pc, #168]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 800616e:	4313      	orrs	r3, r2
 8006170:	658b      	str	r3, [r1, #88]	; 0x58
 8006172:	e001      	b.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006174:	7dfb      	ldrb	r3, [r7, #23]
 8006176:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006180:	2b00      	cmp	r3, #0
 8006182:	d04d      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0xba0>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800618a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800618e:	d02e      	beq.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0xb6e>
 8006190:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006194:	d828      	bhi.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8006196:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800619a:	d02a      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0xb72>
 800619c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061a0:	d822      	bhi.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 80061a2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80061a6:	d026      	beq.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
 80061a8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80061ac:	d81c      	bhi.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 80061ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061b2:	d010      	beq.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0xb56>
 80061b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061b8:	d816      	bhi.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d01d      	beq.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0xb7a>
 80061be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061c2:	d111      	bne.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0xb68>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	3304      	adds	r3, #4
 80061c8:	2100      	movs	r1, #0
 80061ca:	4618      	mov	r0, r3
 80061cc:	f001 faaa 	bl	8007724 <RCCEx_PLL2_Config>
 80061d0:	4603      	mov	r3, r0
 80061d2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80061d4:	e012      	b.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0xb7c>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	3324      	adds	r3, #36	; 0x24
 80061da:	2102      	movs	r1, #2
 80061dc:	4618      	mov	r0, r3
 80061de:	f001 fb53 	bl	8007888 <RCCEx_PLL3_Config>
 80061e2:	4603      	mov	r3, r0
 80061e4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80061e6:	e009      	b.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	75fb      	strb	r3, [r7, #23]
      break;
 80061ec:	e006      	b.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 80061ee:	bf00      	nop
 80061f0:	e004      	b.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 80061f2:	bf00      	nop
 80061f4:	e002      	b.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 80061f6:	bf00      	nop
 80061f8:	e000      	b.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 80061fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061fc:	7dfb      	ldrb	r3, [r7, #23]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d10c      	bne.n	800621c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006202:	4b05      	ldr	r3, [pc, #20]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8006204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006206:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006210:	4901      	ldr	r1, [pc, #4]	; (8006218 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8006212:	4313      	orrs	r3, r2
 8006214:	658b      	str	r3, [r1, #88]	; 0x58
 8006216:	e003      	b.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006218:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800621c:	7dfb      	ldrb	r3, [r7, #23]
 800621e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 0308 	and.w	r3, r3, #8
 8006228:	2b00      	cmp	r3, #0
 800622a:	d01a      	beq.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0xbe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006236:	d10a      	bne.n	800624e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	3324      	adds	r3, #36	; 0x24
 800623c:	2102      	movs	r1, #2
 800623e:	4618      	mov	r0, r3
 8006240:	f001 fb22 	bl	8007888 <RCCEx_PLL3_Config>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d001      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0xbce>
        {
          status = HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800624e:	4b8c      	ldr	r3, [pc, #560]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8006250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006252:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800625c:	4988      	ldr	r1, [pc, #544]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800625e:	4313      	orrs	r3, r2
 8006260:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f003 0310 	and.w	r3, r3, #16
 800626a:	2b00      	cmp	r3, #0
 800626c:	d01a      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006274:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006278:	d10a      	bne.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	3324      	adds	r3, #36	; 0x24
 800627e:	2102      	movs	r1, #2
 8006280:	4618      	mov	r0, r3
 8006282:	f001 fb01 	bl	8007888 <RCCEx_PLL3_Config>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d001      	beq.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0xc10>
      {
        status = HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006290:	4b7b      	ldr	r3, [pc, #492]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8006292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006294:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800629e:	4978      	ldr	r1, [pc, #480]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80062a0:	4313      	orrs	r3, r2
 80062a2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d034      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80062b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062ba:	d01d      	beq.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80062bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062c0:	d817      	bhi.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d003      	beq.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80062c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062ca:	d009      	beq.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0xc60>
 80062cc:	e011      	b.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	3304      	adds	r3, #4
 80062d2:	2100      	movs	r1, #0
 80062d4:	4618      	mov	r0, r3
 80062d6:	f001 fa25 	bl	8007724 <RCCEx_PLL2_Config>
 80062da:	4603      	mov	r3, r0
 80062dc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80062de:	e00c      	b.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	3324      	adds	r3, #36	; 0x24
 80062e4:	2102      	movs	r1, #2
 80062e6:	4618      	mov	r0, r3
 80062e8:	f001 face 	bl	8007888 <RCCEx_PLL3_Config>
 80062ec:	4603      	mov	r3, r0
 80062ee:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80062f0:	e003      	b.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	75fb      	strb	r3, [r7, #23]
      break;
 80062f6:	e000      	b.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      break;
 80062f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062fa:	7dfb      	ldrb	r3, [r7, #23]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d10a      	bne.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006300:	4b5f      	ldr	r3, [pc, #380]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8006302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006304:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800630e:	495c      	ldr	r1, [pc, #368]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8006310:	4313      	orrs	r3, r2
 8006312:	658b      	str	r3, [r1, #88]	; 0x58
 8006314:	e001      	b.n	800631a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006316:	7dfb      	ldrb	r3, [r7, #23]
 8006318:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006322:	2b00      	cmp	r3, #0
 8006324:	d033      	beq.n	800638e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800632c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006330:	d01c      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0xcec>
 8006332:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006336:	d816      	bhi.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0xce6>
 8006338:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800633c:	d003      	beq.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 800633e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006342:	d007      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0xcd4>
 8006344:	e00f      	b.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0xce6>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006346:	4b4e      	ldr	r3, [pc, #312]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8006348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800634a:	4a4d      	ldr	r2, [pc, #308]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800634c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006350:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006352:	e00c      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0xcee>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	3324      	adds	r3, #36	; 0x24
 8006358:	2101      	movs	r1, #1
 800635a:	4618      	mov	r0, r3
 800635c:	f001 fa94 	bl	8007888 <RCCEx_PLL3_Config>
 8006360:	4603      	mov	r3, r0
 8006362:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006364:	e003      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0xcee>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	75fb      	strb	r3, [r7, #23]
      break;
 800636a:	e000      	b.n	800636e <HAL_RCCEx_PeriphCLKConfig+0xcee>
      break;
 800636c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800636e:	7dfb      	ldrb	r3, [r7, #23]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d10a      	bne.n	800638a <HAL_RCCEx_PeriphCLKConfig+0xd0a>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006374:	4b42      	ldr	r3, [pc, #264]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8006376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006378:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006382:	493f      	ldr	r1, [pc, #252]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8006384:	4313      	orrs	r3, r2
 8006386:	654b      	str	r3, [r1, #84]	; 0x54
 8006388:	e001      	b.n	800638e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800638a:	7dfb      	ldrb	r3, [r7, #23]
 800638c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006396:	2b00      	cmp	r3, #0
 8006398:	d029      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0xd6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d003      	beq.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0xd2a>
 80063a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063a6:	d007      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>
 80063a8:	e00f      	b.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0xd4a>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063aa:	4b35      	ldr	r3, [pc, #212]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80063ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ae:	4a34      	ldr	r2, [pc, #208]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80063b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80063b6:	e00b      	b.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	3304      	adds	r3, #4
 80063bc:	2102      	movs	r1, #2
 80063be:	4618      	mov	r0, r3
 80063c0:	f001 f9b0 	bl	8007724 <RCCEx_PLL2_Config>
 80063c4:	4603      	mov	r3, r0
 80063c6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80063c8:	e002      	b.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    default:
      ret = HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	75fb      	strb	r3, [r7, #23]
      break;
 80063ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063d0:	7dfb      	ldrb	r3, [r7, #23]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d109      	bne.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80063d6:	4b2a      	ldr	r3, [pc, #168]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80063d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063e2:	4927      	ldr	r1, [pc, #156]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80063e4:	4313      	orrs	r3, r2
 80063e6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80063e8:	e001      	b.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0xd6e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063ea:	7dfb      	ldrb	r3, [r7, #23]
 80063ec:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d00a      	beq.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0xd90>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	3324      	adds	r3, #36	; 0x24
 80063fe:	2102      	movs	r1, #2
 8006400:	4618      	mov	r0, r3
 8006402:	f001 fa41 	bl	8007888 <RCCEx_PLL3_Config>
 8006406:	4603      	mov	r3, r0
 8006408:	2b00      	cmp	r3, #0
 800640a:	d001      	beq.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0xd90>
    {
      status=HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006418:	2b00      	cmp	r3, #0
 800641a:	d035      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0xe08>
  {

    switch(PeriphClkInit->RngClockSelection)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006422:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006426:	d017      	beq.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0xdd8>
 8006428:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800642c:	d811      	bhi.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800642e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006432:	d013      	beq.n	800645c <HAL_RCCEx_PeriphCLKConfig+0xddc>
 8006434:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006438:	d80b      	bhi.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800643a:	2b00      	cmp	r3, #0
 800643c:	d010      	beq.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0xde0>
 800643e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006442:	d106      	bne.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006444:	4b0e      	ldr	r3, [pc, #56]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8006446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006448:	4a0d      	ldr	r2, [pc, #52]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800644a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800644e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006450:	e007      	b.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	75fb      	strb	r3, [r7, #23]
      break;
 8006456:	e004      	b.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 8006458:	bf00      	nop
 800645a:	e002      	b.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 800645c:	bf00      	nop
 800645e:	e000      	b.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 8006460:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006462:	7dfb      	ldrb	r3, [r7, #23]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d10d      	bne.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0xe04>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006468:	4b05      	ldr	r3, [pc, #20]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800646a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800646c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006476:	4902      	ldr	r1, [pc, #8]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8006478:	4313      	orrs	r3, r2
 800647a:	654b      	str	r3, [r1, #84]	; 0x54
 800647c:	e004      	b.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 800647e:	bf00      	nop
 8006480:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006484:	7dfb      	ldrb	r3, [r7, #23]
 8006486:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006490:	2b00      	cmp	r3, #0
 8006492:	d008      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006494:	4b31      	ldr	r3, [pc, #196]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8006496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006498:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064a0:	492e      	ldr	r1, [pc, #184]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80064a2:	4313      	orrs	r3, r2
 80064a4:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d009      	beq.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0xe46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80064b2:	4b2a      	ldr	r3, [pc, #168]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80064c0:	4926      	ldr	r1, [pc, #152]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80064c2:	4313      	orrs	r3, r2
 80064c4:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d008      	beq.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0xe64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80064d2:	4b22      	ldr	r3, [pc, #136]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80064d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064d6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064de:	491f      	ldr	r1, [pc, #124]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80064e0:	4313      	orrs	r3, r2
 80064e2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d00d      	beq.n	800650c <HAL_RCCEx_PeriphCLKConfig+0xe8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80064f0:	4b1a      	ldr	r3, [pc, #104]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80064f2:	691b      	ldr	r3, [r3, #16]
 80064f4:	4a19      	ldr	r2, [pc, #100]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80064f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80064fa:	6113      	str	r3, [r2, #16]
 80064fc:	4b17      	ldr	r3, [pc, #92]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80064fe:	691a      	ldr	r2, [r3, #16]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006506:	4915      	ldr	r1, [pc, #84]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8006508:	4313      	orrs	r3, r2
 800650a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	2b00      	cmp	r3, #0
 8006512:	da08      	bge.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0xea6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006514:	4b11      	ldr	r3, [pc, #68]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8006516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006518:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006520:	490e      	ldr	r1, [pc, #56]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8006522:	4313      	orrs	r3, r2
 8006524:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800652e:	2b00      	cmp	r3, #0
 8006530:	d009      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0xec6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006532:	4b0a      	ldr	r3, [pc, #40]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8006534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006536:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006540:	4906      	ldr	r1, [pc, #24]	; (800655c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8006542:	4313      	orrs	r3, r2
 8006544:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006546:	7dbb      	ldrb	r3, [r7, #22]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d101      	bne.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0xed0>
  {
    return HAL_OK;
 800654c:	2300      	movs	r3, #0
 800654e:	e000      	b.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  }
  return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
}
 8006552:	4618      	mov	r0, r3
 8006554:	3718      	adds	r7, #24
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop
 800655c:	58024400 	.word	0x58024400

08006560 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b090      	sub	sp, #64	; 0x40
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800656e:	f040 8095 	bne.w	800669c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8006572:	4bae      	ldr	r3, [pc, #696]	; (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006576:	f003 0307 	and.w	r3, r3, #7
 800657a:	633b      	str	r3, [r7, #48]	; 0x30
 800657c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657e:	2b04      	cmp	r3, #4
 8006580:	f200 8088 	bhi.w	8006694 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8006584:	a201      	add	r2, pc, #4	; (adr r2, 800658c <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8006586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800658a:	bf00      	nop
 800658c:	080065a1 	.word	0x080065a1
 8006590:	080065c9 	.word	0x080065c9
 8006594:	080065f1 	.word	0x080065f1
 8006598:	0800668d 	.word	0x0800668d
 800659c:	08006619 	.word	0x08006619

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80065a0:	4ba2      	ldr	r3, [pc, #648]	; (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80065ac:	d108      	bne.n	80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80065ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065b2:	4618      	mov	r0, r3
 80065b4:	f000 ff64 	bl	8007480 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 80065b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80065bc:	f000 bc95 	b.w	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80065c0:	2300      	movs	r3, #0
 80065c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065c4:	f000 bc91 	b.w	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80065c8:	4b98      	ldr	r3, [pc, #608]	; (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065d4:	d108      	bne.n	80065e8 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065d6:	f107 0318 	add.w	r3, r7, #24
 80065da:	4618      	mov	r0, r3
 80065dc:	f000 fca8 	bl	8006f30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80065e4:	f000 bc81 	b.w	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80065e8:	2300      	movs	r3, #0
 80065ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065ec:	f000 bc7d 	b.w	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80065f0:	4b8e      	ldr	r3, [pc, #568]	; (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065fc:	d108      	bne.n	8006610 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065fe:	f107 030c 	add.w	r3, r7, #12
 8006602:	4618      	mov	r0, r3
 8006604:	f000 fde8 	bl	80071d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800660c:	f000 bc6d 	b.w	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006610:	2300      	movs	r3, #0
 8006612:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006614:	f000 bc69 	b.w	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006618:	4b84      	ldr	r3, [pc, #528]	; (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800661a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800661c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006620:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006622:	4b82      	ldr	r3, [pc, #520]	; (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 0304 	and.w	r3, r3, #4
 800662a:	2b04      	cmp	r3, #4
 800662c:	d10c      	bne.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800662e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006630:	2b00      	cmp	r3, #0
 8006632:	d109      	bne.n	8006648 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006634:	4b7d      	ldr	r3, [pc, #500]	; (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	08db      	lsrs	r3, r3, #3
 800663a:	f003 0303 	and.w	r3, r3, #3
 800663e:	4a7c      	ldr	r2, [pc, #496]	; (8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8006640:	fa22 f303 	lsr.w	r3, r2, r3
 8006644:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006646:	e01f      	b.n	8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006648:	4b78      	ldr	r3, [pc, #480]	; (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006650:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006654:	d106      	bne.n	8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8006656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006658:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800665c:	d102      	bne.n	8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800665e:	4b75      	ldr	r3, [pc, #468]	; (8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8006660:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006662:	e011      	b.n	8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006664:	4b71      	ldr	r3, [pc, #452]	; (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800666c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006670:	d106      	bne.n	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8006672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006674:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006678:	d102      	bne.n	8006680 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800667a:	4b6f      	ldr	r3, [pc, #444]	; (8006838 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800667c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800667e:	e003      	b.n	8006688 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006680:	2300      	movs	r3, #0
 8006682:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006684:	f000 bc31 	b.w	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006688:	f000 bc2f 	b.w	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800668c:	4b6b      	ldr	r3, [pc, #428]	; (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800668e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006690:	f000 bc2b 	b.w	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8006694:	2300      	movs	r3, #0
 8006696:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006698:	f000 bc27 	b.w	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066a2:	f040 8095 	bne.w	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 80066a6:	4b61      	ldr	r3, [pc, #388]	; (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80066a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066aa:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80066ae:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80066b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066b6:	d04d      	beq.n	8006754 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 80066b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066be:	f200 8084 	bhi.w	80067ca <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80066c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c4:	2bc0      	cmp	r3, #192	; 0xc0
 80066c6:	d07d      	beq.n	80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80066c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ca:	2bc0      	cmp	r3, #192	; 0xc0
 80066cc:	d87d      	bhi.n	80067ca <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80066ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d0:	2b80      	cmp	r3, #128	; 0x80
 80066d2:	d02d      	beq.n	8006730 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 80066d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d6:	2b80      	cmp	r3, #128	; 0x80
 80066d8:	d877      	bhi.n	80067ca <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 80066da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d003      	beq.n	80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 80066e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e2:	2b40      	cmp	r3, #64	; 0x40
 80066e4:	d012      	beq.n	800670c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 80066e6:	e070      	b.n	80067ca <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80066e8:	4b50      	ldr	r3, [pc, #320]	; (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80066f4:	d107      	bne.n	8006706 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80066f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066fa:	4618      	mov	r0, r3
 80066fc:	f000 fec0 	bl	8007480 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006702:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006704:	e3f1      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006706:	2300      	movs	r3, #0
 8006708:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800670a:	e3ee      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800670c:	4b47      	ldr	r3, [pc, #284]	; (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006714:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006718:	d107      	bne.n	800672a <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800671a:	f107 0318 	add.w	r3, r7, #24
 800671e:	4618      	mov	r0, r3
 8006720:	f000 fc06 	bl	8006f30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006728:	e3df      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800672a:	2300      	movs	r3, #0
 800672c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800672e:	e3dc      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006730:	4b3e      	ldr	r3, [pc, #248]	; (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006738:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800673c:	d107      	bne.n	800674e <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800673e:	f107 030c 	add.w	r3, r7, #12
 8006742:	4618      	mov	r0, r3
 8006744:	f000 fd48 	bl	80071d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800674c:	e3cd      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800674e:	2300      	movs	r3, #0
 8006750:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006752:	e3ca      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006754:	4b35      	ldr	r3, [pc, #212]	; (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006758:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800675c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800675e:	4b33      	ldr	r3, [pc, #204]	; (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 0304 	and.w	r3, r3, #4
 8006766:	2b04      	cmp	r3, #4
 8006768:	d10c      	bne.n	8006784 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800676a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800676c:	2b00      	cmp	r3, #0
 800676e:	d109      	bne.n	8006784 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006770:	4b2e      	ldr	r3, [pc, #184]	; (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	08db      	lsrs	r3, r3, #3
 8006776:	f003 0303 	and.w	r3, r3, #3
 800677a:	4a2d      	ldr	r2, [pc, #180]	; (8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800677c:	fa22 f303 	lsr.w	r3, r2, r3
 8006780:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006782:	e01e      	b.n	80067c2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006784:	4b29      	ldr	r3, [pc, #164]	; (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800678c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006790:	d106      	bne.n	80067a0 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8006792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006794:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006798:	d102      	bne.n	80067a0 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800679a:	4b26      	ldr	r3, [pc, #152]	; (8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800679c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800679e:	e010      	b.n	80067c2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80067a0:	4b22      	ldr	r3, [pc, #136]	; (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067ac:	d106      	bne.n	80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 80067ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067b4:	d102      	bne.n	80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80067b6:	4b20      	ldr	r3, [pc, #128]	; (8006838 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80067b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067ba:	e002      	b.n	80067c2 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80067bc:	2300      	movs	r3, #0
 80067be:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80067c0:	e393      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80067c2:	e392      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80067c4:	4b1d      	ldr	r3, [pc, #116]	; (800683c <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80067c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067c8:	e38f      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 80067ca:	2300      	movs	r3, #0
 80067cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067ce:	e38c      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067d6:	f040 80a7 	bne.w	8006928 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80067da:	4b14      	ldr	r3, [pc, #80]	; (800682c <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80067dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067de:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80067e2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80067e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80067ea:	d05f      	beq.n	80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80067ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80067f2:	f200 8096 	bhi.w	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 80067f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80067fc:	f000 808e 	beq.w	800691c <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8006800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006802:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006806:	f200 808c 	bhi.w	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800680a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006810:	d03a      	beq.n	8006888 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8006812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006814:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006818:	f200 8083 	bhi.w	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800681c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681e:	2b00      	cmp	r3, #0
 8006820:	d00e      	beq.n	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8006822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006824:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006828:	d01c      	beq.n	8006864 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 800682a:	e07a      	b.n	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800682c:	58024400 	.word	0x58024400
 8006830:	03d09000 	.word	0x03d09000
 8006834:	003d0900 	.word	0x003d0900
 8006838:	017d7840 	.word	0x017d7840
 800683c:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006840:	4baa      	ldr	r3, [pc, #680]	; (8006aec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006848:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800684c:	d107      	bne.n	800685e <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800684e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006852:	4618      	mov	r0, r3
 8006854:	f000 fe14 	bl	8007480 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800685c:	e345      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 800685e:	2300      	movs	r3, #0
 8006860:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006862:	e342      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006864:	4ba1      	ldr	r3, [pc, #644]	; (8006aec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800686c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006870:	d107      	bne.n	8006882 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006872:	f107 0318 	add.w	r3, r7, #24
 8006876:	4618      	mov	r0, r3
 8006878:	f000 fb5a 	bl	8006f30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006880:	e333      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006882:	2300      	movs	r3, #0
 8006884:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006886:	e330      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006888:	4b98      	ldr	r3, [pc, #608]	; (8006aec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006890:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006894:	d107      	bne.n	80068a6 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006896:	f107 030c 	add.w	r3, r7, #12
 800689a:	4618      	mov	r0, r3
 800689c:	f000 fc9c 	bl	80071d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80068a4:	e321      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80068a6:	2300      	movs	r3, #0
 80068a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068aa:	e31e      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80068ac:	4b8f      	ldr	r3, [pc, #572]	; (8006aec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80068ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80068b4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80068b6:	4b8d      	ldr	r3, [pc, #564]	; (8006aec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f003 0304 	and.w	r3, r3, #4
 80068be:	2b04      	cmp	r3, #4
 80068c0:	d10c      	bne.n	80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 80068c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d109      	bne.n	80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80068c8:	4b88      	ldr	r3, [pc, #544]	; (8006aec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	08db      	lsrs	r3, r3, #3
 80068ce:	f003 0303 	and.w	r3, r3, #3
 80068d2:	4a87      	ldr	r2, [pc, #540]	; (8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80068d4:	fa22 f303 	lsr.w	r3, r2, r3
 80068d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068da:	e01e      	b.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80068dc:	4b83      	ldr	r3, [pc, #524]	; (8006aec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068e8:	d106      	bne.n	80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 80068ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80068f0:	d102      	bne.n	80068f8 <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80068f2:	4b80      	ldr	r3, [pc, #512]	; (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80068f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068f6:	e010      	b.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80068f8:	4b7c      	ldr	r3, [pc, #496]	; (8006aec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006900:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006904:	d106      	bne.n	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8006906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006908:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800690c:	d102      	bne.n	8006914 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800690e:	4b7a      	ldr	r3, [pc, #488]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006910:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006912:	e002      	b.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006914:	2300      	movs	r3, #0
 8006916:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006918:	e2e7      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800691a:	e2e6      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800691c:	4b77      	ldr	r3, [pc, #476]	; (8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800691e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006920:	e2e3      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8006922:	2300      	movs	r3, #0
 8006924:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006926:	e2e0      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800692e:	f040 809c 	bne.w	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8006932:	4b6e      	ldr	r3, [pc, #440]	; (8006aec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006936:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800693a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800693c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006942:	d054      	beq.n	80069ee <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8006944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006946:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800694a:	f200 808b 	bhi.w	8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 800694e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006950:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006954:	f000 8083 	beq.w	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8006958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800695a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800695e:	f200 8081 	bhi.w	8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8006962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006964:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006968:	d02f      	beq.n	80069ca <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800696a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800696c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006970:	d878      	bhi.n	8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8006972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006974:	2b00      	cmp	r3, #0
 8006976:	d004      	beq.n	8006982 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8006978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800697e:	d012      	beq.n	80069a6 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8006980:	e070      	b.n	8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006982:	4b5a      	ldr	r3, [pc, #360]	; (8006aec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800698a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800698e:	d107      	bne.n	80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006990:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006994:	4618      	mov	r0, r3
 8006996:	f000 fd73 	bl	8007480 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800699a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800699e:	e2a4      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80069a0:	2300      	movs	r3, #0
 80069a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069a4:	e2a1      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80069a6:	4b51      	ldr	r3, [pc, #324]	; (8006aec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069b2:	d107      	bne.n	80069c4 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069b4:	f107 0318 	add.w	r3, r7, #24
 80069b8:	4618      	mov	r0, r3
 80069ba:	f000 fab9 	bl	8006f30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 80069c2:	e292      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80069c4:	2300      	movs	r3, #0
 80069c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069c8:	e28f      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80069ca:	4b48      	ldr	r3, [pc, #288]	; (8006aec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069d6:	d107      	bne.n	80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069d8:	f107 030c 	add.w	r3, r7, #12
 80069dc:	4618      	mov	r0, r3
 80069de:	f000 fbfb 	bl	80071d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80069e6:	e280      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 80069e8:	2300      	movs	r3, #0
 80069ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069ec:	e27d      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80069ee:	4b3f      	ldr	r3, [pc, #252]	; (8006aec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80069f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80069f6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80069f8:	4b3c      	ldr	r3, [pc, #240]	; (8006aec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 0304 	and.w	r3, r3, #4
 8006a00:	2b04      	cmp	r3, #4
 8006a02:	d10c      	bne.n	8006a1e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8006a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d109      	bne.n	8006a1e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a0a:	4b38      	ldr	r3, [pc, #224]	; (8006aec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	08db      	lsrs	r3, r3, #3
 8006a10:	f003 0303 	and.w	r3, r3, #3
 8006a14:	4a36      	ldr	r2, [pc, #216]	; (8006af0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006a16:	fa22 f303 	lsr.w	r3, r2, r3
 8006a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a1c:	e01e      	b.n	8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006a1e:	4b33      	ldr	r3, [pc, #204]	; (8006aec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a2a:	d106      	bne.n	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8006a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a32:	d102      	bne.n	8006a3a <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006a34:	4b2f      	ldr	r3, [pc, #188]	; (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006a36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a38:	e010      	b.n	8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006a3a:	4b2c      	ldr	r3, [pc, #176]	; (8006aec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a46:	d106      	bne.n	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8006a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a4e:	d102      	bne.n	8006a56 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006a50:	4b29      	ldr	r3, [pc, #164]	; (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006a52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a54:	e002      	b.n	8006a5c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006a56:	2300      	movs	r3, #0
 8006a58:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006a5a:	e246      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006a5c:	e245      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006a5e:	4b27      	ldr	r3, [pc, #156]	; (8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006a60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a62:	e242      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8006a64:	2300      	movs	r3, #0
 8006a66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a68:	e23f      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a70:	f040 80a8 	bne.w	8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8006a74:	4b1d      	ldr	r3, [pc, #116]	; (8006aec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a78:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006a7c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a84:	d060      	beq.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8006a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a8c:	f200 8097 	bhi.w	8006bbe <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8006a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a92:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a96:	f000 808f 	beq.w	8006bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8006a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a9c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006aa0:	f200 808d 	bhi.w	8006bbe <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8006aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006aaa:	d03b      	beq.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8006aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ab2:	f200 8084 	bhi.w	8006bbe <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8006ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d004      	beq.n	8006ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8006abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ac2:	d01d      	beq.n	8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8006ac4:	e07b      	b.n	8006bbe <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006ac6:	4b09      	ldr	r3, [pc, #36]	; (8006aec <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ace:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ad2:	d107      	bne.n	8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ad4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f000 fcd1 	bl	8007480 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006ae2:	e202      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ae8:	e1ff      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006aea:	bf00      	nop
 8006aec:	58024400 	.word	0x58024400
 8006af0:	03d09000 	.word	0x03d09000
 8006af4:	003d0900 	.word	0x003d0900
 8006af8:	017d7840 	.word	0x017d7840
 8006afc:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b00:	4ba3      	ldr	r3, [pc, #652]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b0c:	d107      	bne.n	8006b1e <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b0e:	f107 0318 	add.w	r3, r7, #24
 8006b12:	4618      	mov	r0, r3
 8006b14:	f000 fa0c 	bl	8006f30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006b1c:	e1e5      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b22:	e1e2      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006b24:	4b9a      	ldr	r3, [pc, #616]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b30:	d107      	bne.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b32:	f107 030c 	add.w	r3, r7, #12
 8006b36:	4618      	mov	r0, r3
 8006b38:	f000 fb4e 	bl	80071d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006b40:	e1d3      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006b42:	2300      	movs	r3, #0
 8006b44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b46:	e1d0      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006b48:	4b91      	ldr	r3, [pc, #580]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006b4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006b50:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006b52:	4b8f      	ldr	r3, [pc, #572]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 0304 	and.w	r3, r3, #4
 8006b5a:	2b04      	cmp	r3, #4
 8006b5c:	d10c      	bne.n	8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8006b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d109      	bne.n	8006b78 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006b64:	4b8a      	ldr	r3, [pc, #552]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	08db      	lsrs	r3, r3, #3
 8006b6a:	f003 0303 	and.w	r3, r3, #3
 8006b6e:	4a89      	ldr	r2, [pc, #548]	; (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006b70:	fa22 f303 	lsr.w	r3, r2, r3
 8006b74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b76:	e01e      	b.n	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006b78:	4b85      	ldr	r3, [pc, #532]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b84:	d106      	bne.n	8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 8006b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b8c:	d102      	bne.n	8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006b8e:	4b82      	ldr	r3, [pc, #520]	; (8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006b90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b92:	e010      	b.n	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006b94:	4b7e      	ldr	r3, [pc, #504]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ba0:	d106      	bne.n	8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8006ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ba4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ba8:	d102      	bne.n	8006bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006baa:	4b7c      	ldr	r3, [pc, #496]	; (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006bac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bae:	e002      	b.n	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006bb4:	e199      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006bb6:	e198      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006bb8:	4b79      	ldr	r3, [pc, #484]	; (8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006bba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006bbc:	e195      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006bc2:	e192      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006bca:	d173      	bne.n	8006cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8006bcc:	4b70      	ldr	r3, [pc, #448]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006bd4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006bdc:	d02f      	beq.n	8006c3e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8006bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006be4:	d863      	bhi.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 8006be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d004      	beq.n	8006bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8006bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bf2:	d012      	beq.n	8006c1a <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 8006bf4:	e05b      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006bf6:	4b66      	ldr	r3, [pc, #408]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bfe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c02:	d107      	bne.n	8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c04:	f107 0318 	add.w	r3, r7, #24
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f000 f991 	bl	8006f30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006c12:	e16a      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006c14:	2300      	movs	r3, #0
 8006c16:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c18:	e167      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006c1a:	4b5d      	ldr	r3, [pc, #372]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c26:	d107      	bne.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c28:	f107 030c 	add.w	r3, r7, #12
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f000 fad3 	bl	80071d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006c36:	e158      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006c3c:	e155      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006c3e:	4b54      	ldr	r3, [pc, #336]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c42:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006c46:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006c48:	4b51      	ldr	r3, [pc, #324]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f003 0304 	and.w	r3, r3, #4
 8006c50:	2b04      	cmp	r3, #4
 8006c52:	d10c      	bne.n	8006c6e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8006c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d109      	bne.n	8006c6e <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006c5a:	4b4d      	ldr	r3, [pc, #308]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	08db      	lsrs	r3, r3, #3
 8006c60:	f003 0303 	and.w	r3, r3, #3
 8006c64:	4a4b      	ldr	r2, [pc, #300]	; (8006d94 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006c66:	fa22 f303 	lsr.w	r3, r2, r3
 8006c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c6c:	e01e      	b.n	8006cac <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006c6e:	4b48      	ldr	r3, [pc, #288]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c7a:	d106      	bne.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8006c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c82:	d102      	bne.n	8006c8a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006c84:	4b44      	ldr	r3, [pc, #272]	; (8006d98 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006c86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c88:	e010      	b.n	8006cac <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006c8a:	4b41      	ldr	r3, [pc, #260]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006c96:	d106      	bne.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8006c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c9e:	d102      	bne.n	8006ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006ca0:	4b3e      	ldr	r3, [pc, #248]	; (8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ca4:	e002      	b.n	8006cac <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006caa:	e11e      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006cac:	e11d      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006cb2:	e11a      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cba:	d133      	bne.n	8006d24 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8006cbc:	4b34      	ldr	r3, [pc, #208]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cc4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d004      	beq.n	8006cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 8006ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cd2:	d012      	beq.n	8006cfa <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8006cd4:	e023      	b.n	8006d1e <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006cd6:	4b2e      	ldr	r3, [pc, #184]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ce2:	d107      	bne.n	8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ce4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f000 fbc9 	bl	8007480 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006cf2:	e0fa      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006cf8:	e0f7      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006cfa:	4b25      	ldr	r3, [pc, #148]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d06:	d107      	bne.n	8006d18 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d08:	f107 0318 	add.w	r3, r7, #24
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f000 f90f 	bl	8006f30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006d12:	6a3b      	ldr	r3, [r7, #32]
 8006d14:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006d16:	e0e8      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d1c:	e0e5      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006d22:	e0e2      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d2a:	f040 808f 	bne.w	8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8006d2e:	4b18      	ldr	r3, [pc, #96]	; (8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8006d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d32:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8006d36:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d3e:	d075      	beq.n	8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8006d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d42:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d46:	d87e      	bhi.n	8006e46 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8006d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d4e:	d060      	beq.n	8006e12 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8006d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d56:	d876      	bhi.n	8006e46 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8006d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d5a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006d5e:	d045      	beq.n	8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8006d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d62:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006d66:	d86e      	bhi.n	8006e46 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8006d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d6e:	d02b      	beq.n	8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8006d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d76:	d866      	bhi.n	8006e46 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8006d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d004      	beq.n	8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8006d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d84:	d00e      	beq.n	8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 8006d86:	e05e      	b.n	8006e46 <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006d88:	f000 f8bc 	bl	8006f04 <HAL_RCCEx_GetD3PCLK1Freq>
 8006d8c:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8006d8e:	e0ac      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006d90:	58024400 	.word	0x58024400
 8006d94:	03d09000 	.word	0x03d09000
 8006d98:	003d0900 	.word	0x003d0900
 8006d9c:	017d7840 	.word	0x017d7840
 8006da0:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006da4:	4b53      	ldr	r3, [pc, #332]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006dac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006db0:	d107      	bne.n	8006dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006db2:	f107 0318 	add.w	r3, r7, #24
 8006db6:	4618      	mov	r0, r3
 8006db8:	f000 f8ba 	bl	8006f30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006dc0:	e093      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006dc6:	e090      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006dc8:	4b4a      	ldr	r3, [pc, #296]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006dd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006dd4:	d107      	bne.n	8006de6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006dd6:	f107 030c 	add.w	r3, r7, #12
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f000 f9fc 	bl	80071d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006de4:	e081      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006de6:	2300      	movs	r3, #0
 8006de8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006dea:	e07e      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006dec:	4b41      	ldr	r3, [pc, #260]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f003 0304 	and.w	r3, r3, #4
 8006df4:	2b04      	cmp	r3, #4
 8006df6:	d109      	bne.n	8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006df8:	4b3e      	ldr	r3, [pc, #248]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	08db      	lsrs	r3, r3, #3
 8006dfe:	f003 0303 	and.w	r3, r3, #3
 8006e02:	4a3d      	ldr	r2, [pc, #244]	; (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8006e04:	fa22 f303 	lsr.w	r3, r2, r3
 8006e08:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006e0a:	e06e      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e10:	e06b      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006e12:	4b38      	ldr	r3, [pc, #224]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e1e:	d102      	bne.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8006e20:	4b36      	ldr	r3, [pc, #216]	; (8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006e22:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006e24:	e061      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8006e26:	2300      	movs	r3, #0
 8006e28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e2a:	e05e      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006e2c:	4b31      	ldr	r3, [pc, #196]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e38:	d102      	bne.n	8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 8006e3a:	4b31      	ldr	r3, [pc, #196]	; (8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006e3e:	e054      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006e40:	2300      	movs	r3, #0
 8006e42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e44:	e051      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8006e46:	2300      	movs	r3, #0
 8006e48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e4a:	e04e      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e52:	d148      	bne.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8006e54:	4b27      	ldr	r3, [pc, #156]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006e56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006e5c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e64:	d02a      	beq.n	8006ebc <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8006e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e6c:	d838      	bhi.n	8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8006e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d004      	beq.n	8006e7e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8006e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e7a:	d00d      	beq.n	8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8006e7c:	e030      	b.n	8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006e7e:	4b1d      	ldr	r3, [pc, #116]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e8a:	d102      	bne.n	8006e92 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8006e8c:	4b1c      	ldr	r3, [pc, #112]	; (8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006e90:	e02b      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006e92:	2300      	movs	r3, #0
 8006e94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e96:	e028      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006e98:	4b16      	ldr	r3, [pc, #88]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ea0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ea4:	d107      	bne.n	8006eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ea6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f000 fae8 	bl	8007480 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006eb4:	e019      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006eba:	e016      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ebc:	4b0d      	ldr	r3, [pc, #52]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ec4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ec8:	d107      	bne.n	8006eda <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006eca:	f107 0318 	add.w	r3, r7, #24
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f000 f82e 	bl	8006f30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006ed8:	e007      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006eda:	2300      	movs	r3, #0
 8006edc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ede:	e004      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ee4:	e001      	b.n	8006eea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8006eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3740      	adds	r7, #64	; 0x40
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}
 8006ef4:	58024400 	.word	0x58024400
 8006ef8:	03d09000 	.word	0x03d09000
 8006efc:	003d0900 	.word	0x003d0900
 8006f00:	017d7840 	.word	0x017d7840

08006f04 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006f08:	f7fe fb8a 	bl	8005620 <HAL_RCC_GetHCLKFreq>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	4b06      	ldr	r3, [pc, #24]	; (8006f28 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006f10:	6a1b      	ldr	r3, [r3, #32]
 8006f12:	091b      	lsrs	r3, r3, #4
 8006f14:	f003 0307 	and.w	r3, r3, #7
 8006f18:	4904      	ldr	r1, [pc, #16]	; (8006f2c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006f1a:	5ccb      	ldrb	r3, [r1, r3]
 8006f1c:	f003 031f 	and.w	r3, r3, #31
 8006f20:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	58024400 	.word	0x58024400
 8006f2c:	08007a5c 	.word	0x08007a5c

08006f30 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b089      	sub	sp, #36	; 0x24
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f38:	4ba1      	ldr	r3, [pc, #644]	; (80071c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f3c:	f003 0303 	and.w	r3, r3, #3
 8006f40:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006f42:	4b9f      	ldr	r3, [pc, #636]	; (80071c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f46:	0b1b      	lsrs	r3, r3, #12
 8006f48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f4c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006f4e:	4b9c      	ldr	r3, [pc, #624]	; (80071c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f52:	091b      	lsrs	r3, r3, #4
 8006f54:	f003 0301 	and.w	r3, r3, #1
 8006f58:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006f5a:	4b99      	ldr	r3, [pc, #612]	; (80071c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f5e:	08db      	lsrs	r3, r3, #3
 8006f60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f64:	693a      	ldr	r2, [r7, #16]
 8006f66:	fb02 f303 	mul.w	r3, r2, r3
 8006f6a:	ee07 3a90 	vmov	s15, r3
 8006f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f72:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	f000 8111 	beq.w	80071a0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	2b02      	cmp	r3, #2
 8006f82:	f000 8083 	beq.w	800708c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	f200 80a1 	bhi.w	80070d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d003      	beq.n	8006f9c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006f94:	69bb      	ldr	r3, [r7, #24]
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d056      	beq.n	8007048 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006f9a:	e099      	b.n	80070d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f9c:	4b88      	ldr	r3, [pc, #544]	; (80071c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 0320 	and.w	r3, r3, #32
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d02d      	beq.n	8007004 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006fa8:	4b85      	ldr	r3, [pc, #532]	; (80071c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	08db      	lsrs	r3, r3, #3
 8006fae:	f003 0303 	and.w	r3, r3, #3
 8006fb2:	4a84      	ldr	r2, [pc, #528]	; (80071c4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8006fb8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	ee07 3a90 	vmov	s15, r3
 8006fc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	ee07 3a90 	vmov	s15, r3
 8006fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fd2:	4b7b      	ldr	r3, [pc, #492]	; (80071c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fda:	ee07 3a90 	vmov	s15, r3
 8006fde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fe2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fe6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80071c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006fea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ff2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ffe:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007002:	e087      	b.n	8007114 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	ee07 3a90 	vmov	s15, r3
 800700a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800700e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80071cc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007016:	4b6a      	ldr	r3, [pc, #424]	; (80071c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800701a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800701e:	ee07 3a90 	vmov	s15, r3
 8007022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007026:	ed97 6a03 	vldr	s12, [r7, #12]
 800702a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80071c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800702e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007036:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800703a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800703e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007042:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007046:	e065      	b.n	8007114 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	ee07 3a90 	vmov	s15, r3
 800704e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007052:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80071d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800705a:	4b59      	ldr	r3, [pc, #356]	; (80071c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800705c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800705e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007062:	ee07 3a90 	vmov	s15, r3
 8007066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800706a:	ed97 6a03 	vldr	s12, [r7, #12]
 800706e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80071c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800707a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800707e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007086:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800708a:	e043      	b.n	8007114 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	ee07 3a90 	vmov	s15, r3
 8007092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007096:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80071d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800709a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800709e:	4b48      	ldr	r3, [pc, #288]	; (80071c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070a6:	ee07 3a90 	vmov	s15, r3
 80070aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80070b2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80071c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80070ce:	e021      	b.n	8007114 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	ee07 3a90 	vmov	s15, r3
 80070d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070da:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80071d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80070de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070e2:	4b37      	ldr	r3, [pc, #220]	; (80071c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80070e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ea:	ee07 3a90 	vmov	s15, r3
 80070ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80070f6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80071c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80070fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007102:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007106:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800710a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800710e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007112:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007114:	4b2a      	ldr	r3, [pc, #168]	; (80071c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007118:	0a5b      	lsrs	r3, r3, #9
 800711a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800711e:	ee07 3a90 	vmov	s15, r3
 8007122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007126:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800712a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800712e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007132:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007136:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800713a:	ee17 2a90 	vmov	r2, s15
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007142:	4b1f      	ldr	r3, [pc, #124]	; (80071c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007146:	0c1b      	lsrs	r3, r3, #16
 8007148:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800714c:	ee07 3a90 	vmov	s15, r3
 8007150:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007154:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007158:	ee37 7a87 	vadd.f32	s14, s15, s14
 800715c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007160:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007164:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007168:	ee17 2a90 	vmov	r2, s15
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007170:	4b13      	ldr	r3, [pc, #76]	; (80071c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007174:	0e1b      	lsrs	r3, r3, #24
 8007176:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800717a:	ee07 3a90 	vmov	s15, r3
 800717e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007182:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007186:	ee37 7a87 	vadd.f32	s14, s15, s14
 800718a:	edd7 6a07 	vldr	s13, [r7, #28]
 800718e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007192:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007196:	ee17 2a90 	vmov	r2, s15
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800719e:	e008      	b.n	80071b2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	609a      	str	r2, [r3, #8]
}
 80071b2:	bf00      	nop
 80071b4:	3724      	adds	r7, #36	; 0x24
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr
 80071be:	bf00      	nop
 80071c0:	58024400 	.word	0x58024400
 80071c4:	03d09000 	.word	0x03d09000
 80071c8:	46000000 	.word	0x46000000
 80071cc:	4c742400 	.word	0x4c742400
 80071d0:	4a742400 	.word	0x4a742400
 80071d4:	4bbebc20 	.word	0x4bbebc20

080071d8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80071d8:	b480      	push	{r7}
 80071da:	b089      	sub	sp, #36	; 0x24
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80071e0:	4ba1      	ldr	r3, [pc, #644]	; (8007468 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e4:	f003 0303 	and.w	r3, r3, #3
 80071e8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80071ea:	4b9f      	ldr	r3, [pc, #636]	; (8007468 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ee:	0d1b      	lsrs	r3, r3, #20
 80071f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071f4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80071f6:	4b9c      	ldr	r3, [pc, #624]	; (8007468 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80071f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071fa:	0a1b      	lsrs	r3, r3, #8
 80071fc:	f003 0301 	and.w	r3, r3, #1
 8007200:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007202:	4b99      	ldr	r3, [pc, #612]	; (8007468 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007206:	08db      	lsrs	r3, r3, #3
 8007208:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800720c:	693a      	ldr	r2, [r7, #16]
 800720e:	fb02 f303 	mul.w	r3, r2, r3
 8007212:	ee07 3a90 	vmov	s15, r3
 8007216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800721a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	2b00      	cmp	r3, #0
 8007222:	f000 8111 	beq.w	8007448 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007226:	69bb      	ldr	r3, [r7, #24]
 8007228:	2b02      	cmp	r3, #2
 800722a:	f000 8083 	beq.w	8007334 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800722e:	69bb      	ldr	r3, [r7, #24]
 8007230:	2b02      	cmp	r3, #2
 8007232:	f200 80a1 	bhi.w	8007378 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007236:	69bb      	ldr	r3, [r7, #24]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d003      	beq.n	8007244 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	2b01      	cmp	r3, #1
 8007240:	d056      	beq.n	80072f0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007242:	e099      	b.n	8007378 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007244:	4b88      	ldr	r3, [pc, #544]	; (8007468 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f003 0320 	and.w	r3, r3, #32
 800724c:	2b00      	cmp	r3, #0
 800724e:	d02d      	beq.n	80072ac <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007250:	4b85      	ldr	r3, [pc, #532]	; (8007468 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	08db      	lsrs	r3, r3, #3
 8007256:	f003 0303 	and.w	r3, r3, #3
 800725a:	4a84      	ldr	r2, [pc, #528]	; (800746c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800725c:	fa22 f303 	lsr.w	r3, r2, r3
 8007260:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	ee07 3a90 	vmov	s15, r3
 8007268:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	ee07 3a90 	vmov	s15, r3
 8007272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800727a:	4b7b      	ldr	r3, [pc, #492]	; (8007468 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800727c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007282:	ee07 3a90 	vmov	s15, r3
 8007286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800728a:	ed97 6a03 	vldr	s12, [r7, #12]
 800728e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007470 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007292:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800729a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800729e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072a6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80072aa:	e087      	b.n	80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	ee07 3a90 	vmov	s15, r3
 80072b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072b6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007474 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80072ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072be:	4b6a      	ldr	r3, [pc, #424]	; (8007468 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80072c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072c6:	ee07 3a90 	vmov	s15, r3
 80072ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80072d2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007470 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80072d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80072ee:	e065      	b.n	80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	ee07 3a90 	vmov	s15, r3
 80072f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072fa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007478 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80072fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007302:	4b59      	ldr	r3, [pc, #356]	; (8007468 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800730a:	ee07 3a90 	vmov	s15, r3
 800730e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007312:	ed97 6a03 	vldr	s12, [r7, #12]
 8007316:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007470 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800731a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800731e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007322:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800732a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800732e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007332:	e043      	b.n	80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	ee07 3a90 	vmov	s15, r3
 800733a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800733e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800747c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007346:	4b48      	ldr	r3, [pc, #288]	; (8007468 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800734a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800734e:	ee07 3a90 	vmov	s15, r3
 8007352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007356:	ed97 6a03 	vldr	s12, [r7, #12]
 800735a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007470 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800735e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007366:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800736a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800736e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007372:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007376:	e021      	b.n	80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	ee07 3a90 	vmov	s15, r3
 800737e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007382:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007478 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800738a:	4b37      	ldr	r3, [pc, #220]	; (8007468 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800738c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800738e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007392:	ee07 3a90 	vmov	s15, r3
 8007396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800739a:	ed97 6a03 	vldr	s12, [r7, #12]
 800739e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007470 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80073a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80073ba:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80073bc:	4b2a      	ldr	r3, [pc, #168]	; (8007468 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c0:	0a5b      	lsrs	r3, r3, #9
 80073c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073c6:	ee07 3a90 	vmov	s15, r3
 80073ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80073da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073e2:	ee17 2a90 	vmov	r2, s15
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80073ea:	4b1f      	ldr	r3, [pc, #124]	; (8007468 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80073ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ee:	0c1b      	lsrs	r3, r3, #16
 80073f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073f4:	ee07 3a90 	vmov	s15, r3
 80073f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007400:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007404:	edd7 6a07 	vldr	s13, [r7, #28]
 8007408:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800740c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007410:	ee17 2a90 	vmov	r2, s15
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007418:	4b13      	ldr	r3, [pc, #76]	; (8007468 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800741a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741c:	0e1b      	lsrs	r3, r3, #24
 800741e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007422:	ee07 3a90 	vmov	s15, r3
 8007426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800742a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800742e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007432:	edd7 6a07 	vldr	s13, [r7, #28]
 8007436:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800743a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800743e:	ee17 2a90 	vmov	r2, s15
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007446:	e008      	b.n	800745a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2200      	movs	r2, #0
 8007452:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	609a      	str	r2, [r3, #8]
}
 800745a:	bf00      	nop
 800745c:	3724      	adds	r7, #36	; 0x24
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr
 8007466:	bf00      	nop
 8007468:	58024400 	.word	0x58024400
 800746c:	03d09000 	.word	0x03d09000
 8007470:	46000000 	.word	0x46000000
 8007474:	4c742400 	.word	0x4c742400
 8007478:	4a742400 	.word	0x4a742400
 800747c:	4bbebc20 	.word	0x4bbebc20

08007480 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007480:	b480      	push	{r7}
 8007482:	b089      	sub	sp, #36	; 0x24
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007488:	4ba0      	ldr	r3, [pc, #640]	; (800770c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800748a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800748c:	f003 0303 	and.w	r3, r3, #3
 8007490:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007492:	4b9e      	ldr	r3, [pc, #632]	; (800770c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007496:	091b      	lsrs	r3, r3, #4
 8007498:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800749c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800749e:	4b9b      	ldr	r3, [pc, #620]	; (800770c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80074a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a2:	f003 0301 	and.w	r3, r3, #1
 80074a6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80074a8:	4b98      	ldr	r3, [pc, #608]	; (800770c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80074aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074ac:	08db      	lsrs	r3, r3, #3
 80074ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80074b2:	693a      	ldr	r2, [r7, #16]
 80074b4:	fb02 f303 	mul.w	r3, r2, r3
 80074b8:	ee07 3a90 	vmov	s15, r3
 80074bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074c0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	f000 8111 	beq.w	80076ee <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	2b02      	cmp	r3, #2
 80074d0:	f000 8083 	beq.w	80075da <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80074d4:	69bb      	ldr	r3, [r7, #24]
 80074d6:	2b02      	cmp	r3, #2
 80074d8:	f200 80a1 	bhi.w	800761e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80074dc:	69bb      	ldr	r3, [r7, #24]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d003      	beq.n	80074ea <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80074e2:	69bb      	ldr	r3, [r7, #24]
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d056      	beq.n	8007596 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80074e8:	e099      	b.n	800761e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074ea:	4b88      	ldr	r3, [pc, #544]	; (800770c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f003 0320 	and.w	r3, r3, #32
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d02d      	beq.n	8007552 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80074f6:	4b85      	ldr	r3, [pc, #532]	; (800770c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	08db      	lsrs	r3, r3, #3
 80074fc:	f003 0303 	and.w	r3, r3, #3
 8007500:	4a83      	ldr	r2, [pc, #524]	; (8007710 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007502:	fa22 f303 	lsr.w	r3, r2, r3
 8007506:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	ee07 3a90 	vmov	s15, r3
 800750e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	ee07 3a90 	vmov	s15, r3
 8007518:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800751c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007520:	4b7a      	ldr	r3, [pc, #488]	; (800770c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007524:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007528:	ee07 3a90 	vmov	s15, r3
 800752c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007530:	ed97 6a03 	vldr	s12, [r7, #12]
 8007534:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007714 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007538:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800753c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007540:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007544:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007548:	ee67 7a27 	vmul.f32	s15, s14, s15
 800754c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007550:	e087      	b.n	8007662 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	ee07 3a90 	vmov	s15, r3
 8007558:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800755c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007718 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007560:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007564:	4b69      	ldr	r3, [pc, #420]	; (800770c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800756c:	ee07 3a90 	vmov	s15, r3
 8007570:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007574:	ed97 6a03 	vldr	s12, [r7, #12]
 8007578:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007714 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800757c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007580:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007584:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007588:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800758c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007590:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007594:	e065      	b.n	8007662 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	ee07 3a90 	vmov	s15, r3
 800759c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075a0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800771c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80075a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075a8:	4b58      	ldr	r3, [pc, #352]	; (800770c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075b0:	ee07 3a90 	vmov	s15, r3
 80075b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80075bc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007714 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80075c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075d4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80075d8:	e043      	b.n	8007662 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	ee07 3a90 	vmov	s15, r3
 80075e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075e4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007720 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80075e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075ec:	4b47      	ldr	r3, [pc, #284]	; (800770c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80075ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075f4:	ee07 3a90 	vmov	s15, r3
 80075f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8007600:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007714 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007604:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007608:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800760c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007610:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007614:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007618:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800761c:	e021      	b.n	8007662 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	ee07 3a90 	vmov	s15, r3
 8007624:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007628:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007718 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800762c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007630:	4b36      	ldr	r3, [pc, #216]	; (800770c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007634:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007638:	ee07 3a90 	vmov	s15, r3
 800763c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007640:	ed97 6a03 	vldr	s12, [r7, #12]
 8007644:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007714 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007648:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800764c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007650:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007654:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007658:	ee67 7a27 	vmul.f32	s15, s14, s15
 800765c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007660:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007662:	4b2a      	ldr	r3, [pc, #168]	; (800770c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007666:	0a5b      	lsrs	r3, r3, #9
 8007668:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800766c:	ee07 3a90 	vmov	s15, r3
 8007670:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007674:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007678:	ee37 7a87 	vadd.f32	s14, s15, s14
 800767c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007680:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007684:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007688:	ee17 2a90 	vmov	r2, s15
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007690:	4b1e      	ldr	r3, [pc, #120]	; (800770c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007694:	0c1b      	lsrs	r3, r3, #16
 8007696:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800769a:	ee07 3a90 	vmov	s15, r3
 800769e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80076ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076b6:	ee17 2a90 	vmov	r2, s15
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 80076be:	4b13      	ldr	r3, [pc, #76]	; (800770c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80076c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c2:	0e1b      	lsrs	r3, r3, #24
 80076c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076c8:	ee07 3a90 	vmov	s15, r3
 80076cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80076d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80076d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80076dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80076e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80076e4:	ee17 2a90 	vmov	r2, s15
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80076ec:	e008      	b.n	8007700 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	609a      	str	r2, [r3, #8]
}
 8007700:	bf00      	nop
 8007702:	3724      	adds	r7, #36	; 0x24
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr
 800770c:	58024400 	.word	0x58024400
 8007710:	03d09000 	.word	0x03d09000
 8007714:	46000000 	.word	0x46000000
 8007718:	4c742400 	.word	0x4c742400
 800771c:	4a742400 	.word	0x4a742400
 8007720:	4bbebc20 	.word	0x4bbebc20

08007724 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800772e:	2300      	movs	r3, #0
 8007730:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007732:	4b53      	ldr	r3, [pc, #332]	; (8007880 <RCCEx_PLL2_Config+0x15c>)
 8007734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007736:	f003 0303 	and.w	r3, r3, #3
 800773a:	2b03      	cmp	r3, #3
 800773c:	d101      	bne.n	8007742 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	e099      	b.n	8007876 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007742:	4b4f      	ldr	r3, [pc, #316]	; (8007880 <RCCEx_PLL2_Config+0x15c>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a4e      	ldr	r2, [pc, #312]	; (8007880 <RCCEx_PLL2_Config+0x15c>)
 8007748:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800774c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800774e:	f7f9 f9c3 	bl	8000ad8 <HAL_GetTick>
 8007752:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007754:	e008      	b.n	8007768 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007756:	f7f9 f9bf 	bl	8000ad8 <HAL_GetTick>
 800775a:	4602      	mov	r2, r0
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	1ad3      	subs	r3, r2, r3
 8007760:	2b02      	cmp	r3, #2
 8007762:	d901      	bls.n	8007768 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007764:	2303      	movs	r3, #3
 8007766:	e086      	b.n	8007876 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007768:	4b45      	ldr	r3, [pc, #276]	; (8007880 <RCCEx_PLL2_Config+0x15c>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007770:	2b00      	cmp	r3, #0
 8007772:	d1f0      	bne.n	8007756 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007774:	4b42      	ldr	r3, [pc, #264]	; (8007880 <RCCEx_PLL2_Config+0x15c>)
 8007776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007778:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	031b      	lsls	r3, r3, #12
 8007782:	493f      	ldr	r1, [pc, #252]	; (8007880 <RCCEx_PLL2_Config+0x15c>)
 8007784:	4313      	orrs	r3, r2
 8007786:	628b      	str	r3, [r1, #40]	; 0x28
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	3b01      	subs	r3, #1
 800778e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	3b01      	subs	r3, #1
 8007798:	025b      	lsls	r3, r3, #9
 800779a:	b29b      	uxth	r3, r3
 800779c:	431a      	orrs	r2, r3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	68db      	ldr	r3, [r3, #12]
 80077a2:	3b01      	subs	r3, #1
 80077a4:	041b      	lsls	r3, r3, #16
 80077a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80077aa:	431a      	orrs	r2, r3
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	691b      	ldr	r3, [r3, #16]
 80077b0:	3b01      	subs	r3, #1
 80077b2:	061b      	lsls	r3, r3, #24
 80077b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80077b8:	4931      	ldr	r1, [pc, #196]	; (8007880 <RCCEx_PLL2_Config+0x15c>)
 80077ba:	4313      	orrs	r3, r2
 80077bc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80077be:	4b30      	ldr	r3, [pc, #192]	; (8007880 <RCCEx_PLL2_Config+0x15c>)
 80077c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	695b      	ldr	r3, [r3, #20]
 80077ca:	492d      	ldr	r1, [pc, #180]	; (8007880 <RCCEx_PLL2_Config+0x15c>)
 80077cc:	4313      	orrs	r3, r2
 80077ce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80077d0:	4b2b      	ldr	r3, [pc, #172]	; (8007880 <RCCEx_PLL2_Config+0x15c>)
 80077d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d4:	f023 0220 	bic.w	r2, r3, #32
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	699b      	ldr	r3, [r3, #24]
 80077dc:	4928      	ldr	r1, [pc, #160]	; (8007880 <RCCEx_PLL2_Config+0x15c>)
 80077de:	4313      	orrs	r3, r2
 80077e0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80077e2:	4b27      	ldr	r3, [pc, #156]	; (8007880 <RCCEx_PLL2_Config+0x15c>)
 80077e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e6:	4a26      	ldr	r2, [pc, #152]	; (8007880 <RCCEx_PLL2_Config+0x15c>)
 80077e8:	f023 0310 	bic.w	r3, r3, #16
 80077ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80077ee:	4b24      	ldr	r3, [pc, #144]	; (8007880 <RCCEx_PLL2_Config+0x15c>)
 80077f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077f2:	4b24      	ldr	r3, [pc, #144]	; (8007884 <RCCEx_PLL2_Config+0x160>)
 80077f4:	4013      	ands	r3, r2
 80077f6:	687a      	ldr	r2, [r7, #4]
 80077f8:	69d2      	ldr	r2, [r2, #28]
 80077fa:	00d2      	lsls	r2, r2, #3
 80077fc:	4920      	ldr	r1, [pc, #128]	; (8007880 <RCCEx_PLL2_Config+0x15c>)
 80077fe:	4313      	orrs	r3, r2
 8007800:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007802:	4b1f      	ldr	r3, [pc, #124]	; (8007880 <RCCEx_PLL2_Config+0x15c>)
 8007804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007806:	4a1e      	ldr	r2, [pc, #120]	; (8007880 <RCCEx_PLL2_Config+0x15c>)
 8007808:	f043 0310 	orr.w	r3, r3, #16
 800780c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d106      	bne.n	8007822 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007814:	4b1a      	ldr	r3, [pc, #104]	; (8007880 <RCCEx_PLL2_Config+0x15c>)
 8007816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007818:	4a19      	ldr	r2, [pc, #100]	; (8007880 <RCCEx_PLL2_Config+0x15c>)
 800781a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800781e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007820:	e00f      	b.n	8007842 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	2b01      	cmp	r3, #1
 8007826:	d106      	bne.n	8007836 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007828:	4b15      	ldr	r3, [pc, #84]	; (8007880 <RCCEx_PLL2_Config+0x15c>)
 800782a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800782c:	4a14      	ldr	r2, [pc, #80]	; (8007880 <RCCEx_PLL2_Config+0x15c>)
 800782e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007832:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007834:	e005      	b.n	8007842 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007836:	4b12      	ldr	r3, [pc, #72]	; (8007880 <RCCEx_PLL2_Config+0x15c>)
 8007838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800783a:	4a11      	ldr	r2, [pc, #68]	; (8007880 <RCCEx_PLL2_Config+0x15c>)
 800783c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007840:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007842:	4b0f      	ldr	r3, [pc, #60]	; (8007880 <RCCEx_PLL2_Config+0x15c>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a0e      	ldr	r2, [pc, #56]	; (8007880 <RCCEx_PLL2_Config+0x15c>)
 8007848:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800784c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800784e:	f7f9 f943 	bl	8000ad8 <HAL_GetTick>
 8007852:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007854:	e008      	b.n	8007868 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007856:	f7f9 f93f 	bl	8000ad8 <HAL_GetTick>
 800785a:	4602      	mov	r2, r0
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	1ad3      	subs	r3, r2, r3
 8007860:	2b02      	cmp	r3, #2
 8007862:	d901      	bls.n	8007868 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007864:	2303      	movs	r3, #3
 8007866:	e006      	b.n	8007876 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007868:	4b05      	ldr	r3, [pc, #20]	; (8007880 <RCCEx_PLL2_Config+0x15c>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007870:	2b00      	cmp	r3, #0
 8007872:	d0f0      	beq.n	8007856 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007874:	7bfb      	ldrb	r3, [r7, #15]
}
 8007876:	4618      	mov	r0, r3
 8007878:	3710      	adds	r7, #16
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
 800787e:	bf00      	nop
 8007880:	58024400 	.word	0x58024400
 8007884:	ffff0007 	.word	0xffff0007

08007888 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007892:	2300      	movs	r3, #0
 8007894:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007896:	4b53      	ldr	r3, [pc, #332]	; (80079e4 <RCCEx_PLL3_Config+0x15c>)
 8007898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800789a:	f003 0303 	and.w	r3, r3, #3
 800789e:	2b03      	cmp	r3, #3
 80078a0:	d101      	bne.n	80078a6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	e099      	b.n	80079da <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80078a6:	4b4f      	ldr	r3, [pc, #316]	; (80079e4 <RCCEx_PLL3_Config+0x15c>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a4e      	ldr	r2, [pc, #312]	; (80079e4 <RCCEx_PLL3_Config+0x15c>)
 80078ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078b2:	f7f9 f911 	bl	8000ad8 <HAL_GetTick>
 80078b6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80078b8:	e008      	b.n	80078cc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80078ba:	f7f9 f90d 	bl	8000ad8 <HAL_GetTick>
 80078be:	4602      	mov	r2, r0
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	1ad3      	subs	r3, r2, r3
 80078c4:	2b02      	cmp	r3, #2
 80078c6:	d901      	bls.n	80078cc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80078c8:	2303      	movs	r3, #3
 80078ca:	e086      	b.n	80079da <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80078cc:	4b45      	ldr	r3, [pc, #276]	; (80079e4 <RCCEx_PLL3_Config+0x15c>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d1f0      	bne.n	80078ba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80078d8:	4b42      	ldr	r3, [pc, #264]	; (80079e4 <RCCEx_PLL3_Config+0x15c>)
 80078da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078dc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	051b      	lsls	r3, r3, #20
 80078e6:	493f      	ldr	r1, [pc, #252]	; (80079e4 <RCCEx_PLL3_Config+0x15c>)
 80078e8:	4313      	orrs	r3, r2
 80078ea:	628b      	str	r3, [r1, #40]	; 0x28
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	3b01      	subs	r3, #1
 80078f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	3b01      	subs	r3, #1
 80078fc:	025b      	lsls	r3, r3, #9
 80078fe:	b29b      	uxth	r3, r3
 8007900:	431a      	orrs	r2, r3
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	68db      	ldr	r3, [r3, #12]
 8007906:	3b01      	subs	r3, #1
 8007908:	041b      	lsls	r3, r3, #16
 800790a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800790e:	431a      	orrs	r2, r3
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	691b      	ldr	r3, [r3, #16]
 8007914:	3b01      	subs	r3, #1
 8007916:	061b      	lsls	r3, r3, #24
 8007918:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800791c:	4931      	ldr	r1, [pc, #196]	; (80079e4 <RCCEx_PLL3_Config+0x15c>)
 800791e:	4313      	orrs	r3, r2
 8007920:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007922:	4b30      	ldr	r3, [pc, #192]	; (80079e4 <RCCEx_PLL3_Config+0x15c>)
 8007924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007926:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	695b      	ldr	r3, [r3, #20]
 800792e:	492d      	ldr	r1, [pc, #180]	; (80079e4 <RCCEx_PLL3_Config+0x15c>)
 8007930:	4313      	orrs	r3, r2
 8007932:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007934:	4b2b      	ldr	r3, [pc, #172]	; (80079e4 <RCCEx_PLL3_Config+0x15c>)
 8007936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007938:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	699b      	ldr	r3, [r3, #24]
 8007940:	4928      	ldr	r1, [pc, #160]	; (80079e4 <RCCEx_PLL3_Config+0x15c>)
 8007942:	4313      	orrs	r3, r2
 8007944:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007946:	4b27      	ldr	r3, [pc, #156]	; (80079e4 <RCCEx_PLL3_Config+0x15c>)
 8007948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800794a:	4a26      	ldr	r2, [pc, #152]	; (80079e4 <RCCEx_PLL3_Config+0x15c>)
 800794c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007950:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007952:	4b24      	ldr	r3, [pc, #144]	; (80079e4 <RCCEx_PLL3_Config+0x15c>)
 8007954:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007956:	4b24      	ldr	r3, [pc, #144]	; (80079e8 <RCCEx_PLL3_Config+0x160>)
 8007958:	4013      	ands	r3, r2
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	69d2      	ldr	r2, [r2, #28]
 800795e:	00d2      	lsls	r2, r2, #3
 8007960:	4920      	ldr	r1, [pc, #128]	; (80079e4 <RCCEx_PLL3_Config+0x15c>)
 8007962:	4313      	orrs	r3, r2
 8007964:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007966:	4b1f      	ldr	r3, [pc, #124]	; (80079e4 <RCCEx_PLL3_Config+0x15c>)
 8007968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800796a:	4a1e      	ldr	r2, [pc, #120]	; (80079e4 <RCCEx_PLL3_Config+0x15c>)
 800796c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007970:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d106      	bne.n	8007986 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007978:	4b1a      	ldr	r3, [pc, #104]	; (80079e4 <RCCEx_PLL3_Config+0x15c>)
 800797a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800797c:	4a19      	ldr	r2, [pc, #100]	; (80079e4 <RCCEx_PLL3_Config+0x15c>)
 800797e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007982:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007984:	e00f      	b.n	80079a6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	2b01      	cmp	r3, #1
 800798a:	d106      	bne.n	800799a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800798c:	4b15      	ldr	r3, [pc, #84]	; (80079e4 <RCCEx_PLL3_Config+0x15c>)
 800798e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007990:	4a14      	ldr	r2, [pc, #80]	; (80079e4 <RCCEx_PLL3_Config+0x15c>)
 8007992:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007996:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007998:	e005      	b.n	80079a6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800799a:	4b12      	ldr	r3, [pc, #72]	; (80079e4 <RCCEx_PLL3_Config+0x15c>)
 800799c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800799e:	4a11      	ldr	r2, [pc, #68]	; (80079e4 <RCCEx_PLL3_Config+0x15c>)
 80079a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80079a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80079a6:	4b0f      	ldr	r3, [pc, #60]	; (80079e4 <RCCEx_PLL3_Config+0x15c>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a0e      	ldr	r2, [pc, #56]	; (80079e4 <RCCEx_PLL3_Config+0x15c>)
 80079ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079b2:	f7f9 f891 	bl	8000ad8 <HAL_GetTick>
 80079b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80079b8:	e008      	b.n	80079cc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80079ba:	f7f9 f88d 	bl	8000ad8 <HAL_GetTick>
 80079be:	4602      	mov	r2, r0
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	1ad3      	subs	r3, r2, r3
 80079c4:	2b02      	cmp	r3, #2
 80079c6:	d901      	bls.n	80079cc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80079c8:	2303      	movs	r3, #3
 80079ca:	e006      	b.n	80079da <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80079cc:	4b05      	ldr	r3, [pc, #20]	; (80079e4 <RCCEx_PLL3_Config+0x15c>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d0f0      	beq.n	80079ba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80079d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3710      	adds	r7, #16
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
 80079e2:	bf00      	nop
 80079e4:	58024400 	.word	0x58024400
 80079e8:	ffff0007 	.word	0xffff0007

080079ec <__libc_init_array>:
 80079ec:	b570      	push	{r4, r5, r6, lr}
 80079ee:	4d0d      	ldr	r5, [pc, #52]	; (8007a24 <__libc_init_array+0x38>)
 80079f0:	4c0d      	ldr	r4, [pc, #52]	; (8007a28 <__libc_init_array+0x3c>)
 80079f2:	1b64      	subs	r4, r4, r5
 80079f4:	10a4      	asrs	r4, r4, #2
 80079f6:	2600      	movs	r6, #0
 80079f8:	42a6      	cmp	r6, r4
 80079fa:	d109      	bne.n	8007a10 <__libc_init_array+0x24>
 80079fc:	4d0b      	ldr	r5, [pc, #44]	; (8007a2c <__libc_init_array+0x40>)
 80079fe:	4c0c      	ldr	r4, [pc, #48]	; (8007a30 <__libc_init_array+0x44>)
 8007a00:	f000 f820 	bl	8007a44 <_init>
 8007a04:	1b64      	subs	r4, r4, r5
 8007a06:	10a4      	asrs	r4, r4, #2
 8007a08:	2600      	movs	r6, #0
 8007a0a:	42a6      	cmp	r6, r4
 8007a0c:	d105      	bne.n	8007a1a <__libc_init_array+0x2e>
 8007a0e:	bd70      	pop	{r4, r5, r6, pc}
 8007a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a14:	4798      	blx	r3
 8007a16:	3601      	adds	r6, #1
 8007a18:	e7ee      	b.n	80079f8 <__libc_init_array+0xc>
 8007a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a1e:	4798      	blx	r3
 8007a20:	3601      	adds	r6, #1
 8007a22:	e7f2      	b.n	8007a0a <__libc_init_array+0x1e>
 8007a24:	08007a74 	.word	0x08007a74
 8007a28:	08007a74 	.word	0x08007a74
 8007a2c:	08007a74 	.word	0x08007a74
 8007a30:	08007a78 	.word	0x08007a78

08007a34 <memset>:
 8007a34:	4402      	add	r2, r0
 8007a36:	4603      	mov	r3, r0
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d100      	bne.n	8007a3e <memset+0xa>
 8007a3c:	4770      	bx	lr
 8007a3e:	f803 1b01 	strb.w	r1, [r3], #1
 8007a42:	e7f9      	b.n	8007a38 <memset+0x4>

08007a44 <_init>:
 8007a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a46:	bf00      	nop
 8007a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a4a:	bc08      	pop	{r3}
 8007a4c:	469e      	mov	lr, r3
 8007a4e:	4770      	bx	lr

08007a50 <_fini>:
 8007a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a52:	bf00      	nop
 8007a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a56:	bc08      	pop	{r3}
 8007a58:	469e      	mov	lr, r3
 8007a5a:	4770      	bx	lr
